cmake_minimum_required(VERSION 3.5)

# Set the project name
project (common_proto)

# find the protobuf compiler and libraries
find_package(Protobuf REQUIRED)

# check if protobuf was found
if(PROTOBUF_FOUND)
    message ("protobuf found")
else()
    message (FATAL_ERROR "Cannot find Protobuf")
endif()


#set(COMMON_PROTO_SRC
#    dirction.proto
#    drive_event.proto
#    drive_state.proto
#    error_code.proto
#    geometry.proto
#    header.proto
#    pnc_point.proto
#    vehicle_signal.proto
#)

# Generate the .h and .cxx files
PROTOBUF_GENERATE_CPP(PROTO_SRCS_ERROR_CODE PROTO_HDRS_ERROR_CODE error_code.proto)
PROTOBUF_GENERATE_CPP(PROTO_SRCS_PNC_POINT PROTO_HDRS_PNC_POINT pnc_point.proto)
PROTOBUF_GENERATE_CPP(PROTO_SRCS_GEOMETRY PROTO_HDRS_GEOMETRY geometry.proto)

# Print path to generated files
#message ("PROTO_SRCS = ${PROTO_SRCS}")
#message ("PROTO_HDRS = ${PROTO_HDRS}")

# Add an executable
#add_executable(protobuf_example
#    main.cpp
#    ${PROTO_SRCS}
#   ${PROTO_HDRS})

add_library(common_proto 
${PROTO_SRCS_ERROR_CODE} ${PROTO_HDRS_ERROR_CODE}
${PROTO_SRCS_PNC_POINT} ${PROTO_HDRS_PNC_POINT}
${PROTO_SRCS_GEOMETRY} ${PROTO_HDRS_GEOMETRY}
)


target_include_directories(common_proto
    PUBLIC
    ${PROTOBUF_INCLUDE_DIRS}
    ${CMAKE_CURRENT_BINARY_DIR}
)

# link the exe against the libraries
target_link_libraries(common_proto
    PUBLIC
    ${PROTOBUF_LIBRARIES}
)
