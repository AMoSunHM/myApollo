cmake_minimum_required(VERSION 3.5)

# Set the project name
project (map_proto)

# find the protobuf compiler and libraries
find_package(Protobuf REQUIRED)

# check if protobuf was found
if(PROTOBUF_FOUND)
    message ("protobuf found")
else()
    message (FATAL_ERROR "Cannot find Protobuf")
endif()


#set(COMMON_PROTO_SRC
#    dirction.proto
#    drive_event.proto
#    drive_state.proto
#    error_code.proto
#    geometry.proto
#    header.proto
#    pnc_point.proto
#    vehicle_signal.proto
#)

# Generate the .h and .cxx files
PROTOBUF_GENERATE_CPP(PROTO_SRCS_MAP_CLEAR_AREA PROTO_HDRS_MAP_CLEAR_AREA map_clear_area.proto)
PROTOBUF_GENERATE_CPP(PROTO_SRCS_MAP_CROSSWALK PROTO_HDRS_MAP_CROSSWALK map_crosswalk.proto)
PROTOBUF_GENERATE_CPP(PROTO_SRCS_MAP_GEOMETRY PROTO_HDRS_MAP_GEOMETRY map_geometry.proto)
PROTOBUF_GENERATE_CPP(PROTO_SRCS_MAP_ID PROTO_HDRS_MAP_ID map_id.proto)
PROTOBUF_GENERATE_CPP(PROTO_SRCS_MAP_JUNCTION PROTO_HDRS_MAP_JUNCTION map_junction.proto)
PROTOBUF_GENERATE_CPP(PROTO_SRCS_MAP_LANE PROTO_HDRS_MAP_LANE map_lane.proto)
PROTOBUF_GENERATE_CPP(PROTO_SRCS_MAP_OVERLAP PROTO_HDRS_MAP_OVERLAP map_overlap.proto)
PROTOBUF_GENERATE_CPP(PROTO_SRCS_MAP_PARKING_SPACE PROTO_HDRS_MAP_PARKING_SPACE map_parking_space.proto)
PROTOBUF_GENERATE_CPP(PROTO_SRCS_MAP_PNC_JUNCTION PROTO_HDRS_MAP_PNC_JUNCTION map_pnc_junction.proto)
PROTOBUF_GENERATE_CPP(PROTO_SRCS_MAP_ROAD PROTO_HDRS_MAP_ROAD map_road.proto)
PROTOBUF_GENERATE_CPP(PROTO_SRCS_MAP_RSU PROTO_HDRS_MAP_RSU map_rsu.proto)
PROTOBUF_GENERATE_CPP(PROTO_SRCS_MAP_SIGNAL PROTO_HDRS_MAP_SIGNAL map_signal.proto)
PROTOBUF_GENERATE_CPP(PROTO_SRCS_MAP_SPEED_BUMP PROTO_HDRS_MAP_SPEED_BUMP map_speed_bump.proto)
PROTOBUF_GENERATE_CPP(PROTO_SRCS_MAP_SPEED_CONTROL PROTO_HDRS_MAP_SPEED_CONTROL map_speed_control.proto)
PROTOBUF_GENERATE_CPP(PROTO_SRCS_MAP_STOP_SIGN PROTO_HDRS_MAP_STOP_SIGN map_stop_sign.proto)
PROTOBUF_GENERATE_CPP(PROTO_SRCS_MAP_YIELD_SIGN PROTO_HDRS_MAP_YIELD_SIGN map_yield_sign.proto)
PROTOBUF_GENERATE_CPP(PROTO_SRCS_MAP PROTO_HDRS_MAP map.proto)

# Print path to generated files
#message ("PROTO_SRCS = ${PROTO_SRCS}")
#message ("PROTO_HDRS = ${PROTO_HDRS}")

# Add an executable



add_library(map_proto 
${PROTO_SRCS_MAP_CLEAR_AREA} ${PROTO_HDRS_MAP_CLEAR_AREA}
${PROTO_SRCS_MAP_CROSSWALK} ${PROTO_HDRS_MAP_CROSSWALK}
${PROTO_SRCS_MAP_GEOMETRY} ${PROTO_HDRS_MAP_GEOMETRY}
${PROTO_SRCS_MAP_ID} ${PROTO_HDRS_MAP_ID}
${PROTO_SRCS_MAP_JUNCTION} ${PROTO_HDRS_MAP_JUNCTION}
${PROTO_SRCS_MAP_LANE} ${PROTO_HDRS_MAP_LANE}
${PROTO_SRCS_MAP_OVERLAP} ${PROTO_HDRS_MAP_OVERLAP}
${PROTO_SRCS_MAP_PARKING_SPACE} ${PROTO_HDRS_MAP_PARKING_SPACE}
${PROTO_SRCS_MAP_PNC_JUNCTION} ${PROTO_HDRS_MAP_PNC_JUNCTION}
${PROTO_SRCS_MAP_ROAD} ${PROTO_HDRS_MAP_ROAD}
${PROTO_SRCS_MAP_RSU} ${PROTO_HDRS_MAP_RSU}
${PROTO_SRCS_MAP_SIGNAL} ${PROTO_HDRS_MAP_SIGNAL}
${PROTO_SRCS_MAP_SPEED_BUMP} ${PROTO_HDRS_MAP_SPEED_BUMP}
${PROTO_SRCS_MAP_SPEED_CONTROL} ${PROTO_HDRS_MAP_SPEED_CONTROL}
${PROTO_SRCS_MAP_STOP_SIGN} ${PROTO_HDRS_MAP_STOP_SIGN}
${PROTO_SRCS_MAP_YIELD_SIGN} ${PROTO_HDRS_MAP_YIELD_SIGN}
${PROTO_SRCS_MAP} ${PROTO_HDRS_MAP}

)


target_include_directories(map_proto
    PUBLIC
    ${PROTOBUF_INCLUDE_DIRS}
    ${CMAKE_CURRENT_BINARY_DIR}
)

# link the exe against the libraries
target_link_libraries(map_proto
    PUBLIC
    ${PROTOBUF_LIBRARIES}
)
