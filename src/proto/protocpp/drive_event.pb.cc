// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: drive_event.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "drive_event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace common {
class DriveEventDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DriveEvent>
     _instance;
} _DriveEvent_default_instance_;

namespace protobuf_drive_5fevent_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriveEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriveEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriveEvent, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriveEvent, event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriveEvent, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriveEvent, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriveEvent, is_reportable_),
  1,
  0,
  2,
  ~0u,
  3,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(DriveEvent)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_DriveEvent_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "drive_event.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::apollo::common::protobuf_header_2eproto::InitDefaults();
  ::apollo::localization::protobuf_pose_2eproto::InitDefaults();
  _DriveEvent_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DriveEvent_default_instance_);_DriveEvent_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  _DriveEvent_default_instance_._instance.get_mutable()->location_ = const_cast< ::apollo::localization::Pose*>(
      ::apollo::localization::Pose::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021drive_event.proto\022\rapollo.common\032\014head"
      "er.proto\032\npose.proto\"\366\001\n\nDriveEvent\022%\n\006h"
      "eader\030\001 \001(\0132\025.apollo.common.Header\022\r\n\005ev"
      "ent\030\002 \001(\t\022+\n\010location\030\003 \001(\0132\031.apollo.loc"
      "alization.Pose\022,\n\004type\030\004 \003(\0162\036.apollo.co"
      "mmon.DriveEvent.Type\022\025\n\ris_reportable\030\005 "
      "\001(\010\"@\n\004Type\022\014\n\010CRITICAL\020\000\022\013\n\007PROBLEM\020\001\022\013"
      "\n\007DESIRED\020\002\022\020\n\014OUT_OF_SCOPE\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 309);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "drive_event.proto", &protobuf_RegisterTypes);
  ::apollo::common::protobuf_header_2eproto::AddDescriptors();
  ::apollo::localization::protobuf_pose_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_drive_5fevent_2eproto

const ::google::protobuf::EnumDescriptor* DriveEvent_Type_descriptor() {
  protobuf_drive_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drive_5fevent_2eproto::file_level_enum_descriptors[0];
}
bool DriveEvent_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DriveEvent_Type DriveEvent::CRITICAL;
const DriveEvent_Type DriveEvent::PROBLEM;
const DriveEvent_Type DriveEvent::DESIRED;
const DriveEvent_Type DriveEvent::OUT_OF_SCOPE;
const DriveEvent_Type DriveEvent::Type_MIN;
const DriveEvent_Type DriveEvent::Type_MAX;
const int DriveEvent::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DriveEvent::kHeaderFieldNumber;
const int DriveEvent::kEventFieldNumber;
const int DriveEvent::kLocationFieldNumber;
const int DriveEvent::kTypeFieldNumber;
const int DriveEvent::kIsReportableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DriveEvent::DriveEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_drive_5fevent_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.DriveEvent)
}
DriveEvent::DriveEvent(const DriveEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      type_(from.type_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_event()) {
    event_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_);
  }
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_location()) {
    location_ = new ::apollo::localization::Pose(*from.location_);
  } else {
    location_ = NULL;
  }
  is_reportable_ = from.is_reportable_;
  // @@protoc_insertion_point(copy_constructor:apollo.common.DriveEvent)
}

void DriveEvent::SharedCtor() {
  _cached_size_ = 0;
  event_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_reportable_) -
      reinterpret_cast<char*>(&header_)) + sizeof(is_reportable_));
}

DriveEvent::~DriveEvent() {
  // @@protoc_insertion_point(destructor:apollo.common.DriveEvent)
  SharedDtor();
}

void DriveEvent::SharedDtor() {
  event_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete location_;
}

void DriveEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DriveEvent::descriptor() {
  protobuf_drive_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drive_5fevent_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DriveEvent& DriveEvent::default_instance() {
  protobuf_drive_5fevent_2eproto::InitDefaults();
  return *internal_default_instance();
}

DriveEvent* DriveEvent::New(::google::protobuf::Arena* arena) const {
  DriveEvent* n = new DriveEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DriveEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.DriveEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!event_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*event_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::apollo::common::Header::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(location_ != NULL);
      location_->::apollo::localization::Pose::Clear();
    }
  }
  is_reportable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DriveEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.DriveEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string event = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->event().data(), static_cast<int>(this->event().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.common.DriveEvent.event");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.localization.Pose location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.common.DriveEvent.Type type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::common::DriveEvent_Type_IsValid(value)) {
            add_type(static_cast< ::apollo::common::DriveEvent_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 4,
                 ::apollo::common::DriveEvent_Type_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_type())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_reportable = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_is_reportable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_reportable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.DriveEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.DriveEvent)
  return false;
#undef DO_
}

void DriveEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.DriveEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional string event = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event().data(), static_cast<int>(this->event().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.common.DriveEvent.event");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->event(), output);
  }

  // optional .apollo.localization.Pose location = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->location_, output);
  }

  // repeated .apollo.common.DriveEvent.Type type = 4;
  for (int i = 0, n = this->type_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(i), output);
  }

  // optional bool is_reportable = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_reportable(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.DriveEvent)
}

::google::protobuf::uint8* DriveEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.DriveEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // optional string event = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event().data(), static_cast<int>(this->event().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.common.DriveEvent.event");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->event(), target);
  }

  // optional .apollo.localization.Pose location = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->location_, deterministic, target);
  }

  // repeated .apollo.common.DriveEvent.Type type = 4;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    4, this->type_, target);

  // optional bool is_reportable = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_reportable(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.DriveEvent)
  return target;
}

size_t DriveEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.DriveEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.common.DriveEvent.Type type = 4;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->type(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string event = 2;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event());
    }

    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .apollo.localization.Pose location = 3;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->location_);
    }

    // optional bool is_reportable = 5;
    if (has_is_reportable()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DriveEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.DriveEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const DriveEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DriveEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.DriveEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.DriveEvent)
    MergeFrom(*source);
  }
}

void DriveEvent::MergeFrom(const DriveEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.DriveEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  type_.MergeFrom(from.type_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_event();
      event_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_location()->::apollo::localization::Pose::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000008u) {
      is_reportable_ = from.is_reportable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DriveEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.DriveEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DriveEvent::CopyFrom(const DriveEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.DriveEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DriveEvent::IsInitialized() const {
  return true;
}

void DriveEvent::Swap(DriveEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DriveEvent::InternalSwap(DriveEvent* other) {
  using std::swap;
  type_.InternalSwap(&other->type_);
  event_.Swap(&other->event_);
  swap(header_, other->header_);
  swap(location_, other->location_);
  swap(is_reportable_, other->is_reportable_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DriveEvent::GetMetadata() const {
  protobuf_drive_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_drive_5fevent_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DriveEvent

// optional .apollo.common.Header header = 1;
bool DriveEvent::has_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DriveEvent::set_has_header() {
  _has_bits_[0] |= 0x00000002u;
}
void DriveEvent::clear_has_header() {
  _has_bits_[0] &= ~0x00000002u;
}
void DriveEvent::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
const ::apollo::common::Header& DriveEvent::header() const {
  const ::apollo::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:apollo.common.DriveEvent.header)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Header*>(
      &::apollo::common::_Header_default_instance_);
}
::apollo::common::Header* DriveEvent::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.DriveEvent.header)
  return header_;
}
::apollo::common::Header* DriveEvent::release_header() {
  // @@protoc_insertion_point(field_release:apollo.common.DriveEvent.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void DriveEvent::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.common.DriveEvent.header)
}

// optional string event = 2;
bool DriveEvent::has_event() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DriveEvent::set_has_event() {
  _has_bits_[0] |= 0x00000001u;
}
void DriveEvent::clear_has_event() {
  _has_bits_[0] &= ~0x00000001u;
}
void DriveEvent::clear_event() {
  event_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_event();
}
const ::std::string& DriveEvent::event() const {
  // @@protoc_insertion_point(field_get:apollo.common.DriveEvent.event)
  return event_.GetNoArena();
}
void DriveEvent::set_event(const ::std::string& value) {
  set_has_event();
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.common.DriveEvent.event)
}
#if LANG_CXX11
void DriveEvent::set_event(::std::string&& value) {
  set_has_event();
  event_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.common.DriveEvent.event)
}
#endif
void DriveEvent::set_event(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_event();
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.common.DriveEvent.event)
}
void DriveEvent::set_event(const char* value, size_t size) {
  set_has_event();
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.common.DriveEvent.event)
}
::std::string* DriveEvent::mutable_event() {
  set_has_event();
  // @@protoc_insertion_point(field_mutable:apollo.common.DriveEvent.event)
  return event_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DriveEvent::release_event() {
  // @@protoc_insertion_point(field_release:apollo.common.DriveEvent.event)
  clear_has_event();
  return event_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DriveEvent::set_allocated_event(::std::string* event) {
  if (event != NULL) {
    set_has_event();
  } else {
    clear_has_event();
  }
  event_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event);
  // @@protoc_insertion_point(field_set_allocated:apollo.common.DriveEvent.event)
}

// optional .apollo.localization.Pose location = 3;
bool DriveEvent::has_location() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DriveEvent::set_has_location() {
  _has_bits_[0] |= 0x00000004u;
}
void DriveEvent::clear_has_location() {
  _has_bits_[0] &= ~0x00000004u;
}
void DriveEvent::clear_location() {
  if (location_ != NULL) location_->::apollo::localization::Pose::Clear();
  clear_has_location();
}
const ::apollo::localization::Pose& DriveEvent::location() const {
  const ::apollo::localization::Pose* p = location_;
  // @@protoc_insertion_point(field_get:apollo.common.DriveEvent.location)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::localization::Pose*>(
      &::apollo::localization::_Pose_default_instance_);
}
::apollo::localization::Pose* DriveEvent::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::apollo::localization::Pose;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.DriveEvent.location)
  return location_;
}
::apollo::localization::Pose* DriveEvent::release_location() {
  // @@protoc_insertion_point(field_release:apollo.common.DriveEvent.location)
  clear_has_location();
  ::apollo::localization::Pose* temp = location_;
  location_ = NULL;
  return temp;
}
void DriveEvent::set_allocated_location(::apollo::localization::Pose* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.common.DriveEvent.location)
}

// repeated .apollo.common.DriveEvent.Type type = 4;
int DriveEvent::type_size() const {
  return type_.size();
}
void DriveEvent::clear_type() {
  type_.Clear();
}
::apollo::common::DriveEvent_Type DriveEvent::type(int index) const {
  // @@protoc_insertion_point(field_get:apollo.common.DriveEvent.type)
  return static_cast< ::apollo::common::DriveEvent_Type >(type_.Get(index));
}
void DriveEvent::set_type(int index, ::apollo::common::DriveEvent_Type value) {
  assert(::apollo::common::DriveEvent_Type_IsValid(value));
  type_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.common.DriveEvent.type)
}
void DriveEvent::add_type(::apollo::common::DriveEvent_Type value) {
  assert(::apollo::common::DriveEvent_Type_IsValid(value));
  type_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.common.DriveEvent.type)
}
const ::google::protobuf::RepeatedField<int>&
DriveEvent::type() const {
  // @@protoc_insertion_point(field_list:apollo.common.DriveEvent.type)
  return type_;
}
::google::protobuf::RepeatedField<int>*
DriveEvent::mutable_type() {
  // @@protoc_insertion_point(field_mutable_list:apollo.common.DriveEvent.type)
  return &type_;
}

// optional bool is_reportable = 5;
bool DriveEvent::has_is_reportable() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DriveEvent::set_has_is_reportable() {
  _has_bits_[0] |= 0x00000008u;
}
void DriveEvent::clear_has_is_reportable() {
  _has_bits_[0] &= ~0x00000008u;
}
void DriveEvent::clear_is_reportable() {
  is_reportable_ = false;
  clear_has_is_reportable();
}
bool DriveEvent::is_reportable() const {
  // @@protoc_insertion_point(field_get:apollo.common.DriveEvent.is_reportable)
  return is_reportable_;
}
void DriveEvent::set_is_reportable(bool value) {
  set_has_is_reportable();
  is_reportable_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.DriveEvent.is_reportable)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
