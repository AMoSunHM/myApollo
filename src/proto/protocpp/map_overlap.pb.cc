// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_overlap.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "map_overlap.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace hdmap {
class LaneOverlapInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LaneOverlapInfo>
     _instance;
} _LaneOverlapInfo_default_instance_;
class SignalOverlapInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SignalOverlapInfo>
     _instance;
} _SignalOverlapInfo_default_instance_;
class StopSignOverlapInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<StopSignOverlapInfo>
     _instance;
} _StopSignOverlapInfo_default_instance_;
class CrosswalkOverlapInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CrosswalkOverlapInfo>
     _instance;
} _CrosswalkOverlapInfo_default_instance_;
class JunctionOverlapInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<JunctionOverlapInfo>
     _instance;
} _JunctionOverlapInfo_default_instance_;
class YieldOverlapInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<YieldOverlapInfo>
     _instance;
} _YieldOverlapInfo_default_instance_;
class ClearAreaOverlapInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ClearAreaOverlapInfo>
     _instance;
} _ClearAreaOverlapInfo_default_instance_;
class SpeedBumpOverlapInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SpeedBumpOverlapInfo>
     _instance;
} _SpeedBumpOverlapInfo_default_instance_;
class ParkingSpaceOverlapInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ParkingSpaceOverlapInfo>
     _instance;
} _ParkingSpaceOverlapInfo_default_instance_;
class PNCJunctionOverlapInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PNCJunctionOverlapInfo>
     _instance;
} _PNCJunctionOverlapInfo_default_instance_;
class RSUOverlapInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RSUOverlapInfo>
     _instance;
} _RSUOverlapInfo_default_instance_;
class RegionOverlapInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RegionOverlapInfo>
     _instance;
} _RegionOverlapInfo_default_instance_;
class ObjectOverlapInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ObjectOverlapInfo>
     _instance;
  const ::apollo::hdmap::LaneOverlapInfo* lane_overlap_info_;
  const ::apollo::hdmap::SignalOverlapInfo* signal_overlap_info_;
  const ::apollo::hdmap::StopSignOverlapInfo* stop_sign_overlap_info_;
  const ::apollo::hdmap::CrosswalkOverlapInfo* crosswalk_overlap_info_;
  const ::apollo::hdmap::JunctionOverlapInfo* junction_overlap_info_;
  const ::apollo::hdmap::YieldOverlapInfo* yield_sign_overlap_info_;
  const ::apollo::hdmap::ClearAreaOverlapInfo* clear_area_overlap_info_;
  const ::apollo::hdmap::SpeedBumpOverlapInfo* speed_bump_overlap_info_;
  const ::apollo::hdmap::ParkingSpaceOverlapInfo* parking_space_overlap_info_;
  const ::apollo::hdmap::PNCJunctionOverlapInfo* pnc_junction_overlap_info_;
  const ::apollo::hdmap::RSUOverlapInfo* rsu_overlap_info_;
} _ObjectOverlapInfo_default_instance_;
class OverlapDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Overlap>
     _instance;
} _Overlap_default_instance_;

namespace protobuf_map_5foverlap_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[14];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneOverlapInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneOverlapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneOverlapInfo, start_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneOverlapInfo, end_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneOverlapInfo, is_merge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneOverlapInfo, region_overlap_id_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalOverlapInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalOverlapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopSignOverlapInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopSignOverlapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrosswalkOverlapInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrosswalkOverlapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrosswalkOverlapInfo, region_overlap_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JunctionOverlapInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JunctionOverlapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YieldOverlapInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YieldOverlapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearAreaOverlapInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearAreaOverlapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedBumpOverlapInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedBumpOverlapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParkingSpaceOverlapInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParkingSpaceOverlapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNCJunctionOverlapInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNCJunctionOverlapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSUOverlapInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSUOverlapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionOverlapInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionOverlapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionOverlapInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionOverlapInfo, polygon_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectOverlapInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectOverlapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectOverlapInfo, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectOverlapInfo, id_),
  offsetof(ObjectOverlapInfoDefaultTypeInternal, lane_overlap_info_),
  offsetof(ObjectOverlapInfoDefaultTypeInternal, signal_overlap_info_),
  offsetof(ObjectOverlapInfoDefaultTypeInternal, stop_sign_overlap_info_),
  offsetof(ObjectOverlapInfoDefaultTypeInternal, crosswalk_overlap_info_),
  offsetof(ObjectOverlapInfoDefaultTypeInternal, junction_overlap_info_),
  offsetof(ObjectOverlapInfoDefaultTypeInternal, yield_sign_overlap_info_),
  offsetof(ObjectOverlapInfoDefaultTypeInternal, clear_area_overlap_info_),
  offsetof(ObjectOverlapInfoDefaultTypeInternal, speed_bump_overlap_info_),
  offsetof(ObjectOverlapInfoDefaultTypeInternal, parking_space_overlap_info_),
  offsetof(ObjectOverlapInfoDefaultTypeInternal, pnc_junction_overlap_info_),
  offsetof(ObjectOverlapInfoDefaultTypeInternal, rsu_overlap_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectOverlapInfo, overlap_info_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Overlap, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Overlap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Overlap, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Overlap, object_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Overlap, region_overlap_),
  0,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(LaneOverlapInfo)},
  { 13, 18, sizeof(SignalOverlapInfo)},
  { 18, 23, sizeof(StopSignOverlapInfo)},
  { 23, 29, sizeof(CrosswalkOverlapInfo)},
  { 30, 35, sizeof(JunctionOverlapInfo)},
  { 35, 40, sizeof(YieldOverlapInfo)},
  { 40, 45, sizeof(ClearAreaOverlapInfo)},
  { 45, 50, sizeof(SpeedBumpOverlapInfo)},
  { 50, 55, sizeof(ParkingSpaceOverlapInfo)},
  { 55, 60, sizeof(PNCJunctionOverlapInfo)},
  { 60, 65, sizeof(RSUOverlapInfo)},
  { 65, 72, sizeof(RegionOverlapInfo)},
  { 74, 92, sizeof(ObjectOverlapInfo)},
  { 104, 112, sizeof(Overlap)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_LaneOverlapInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SignalOverlapInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StopSignOverlapInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CrosswalkOverlapInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_JunctionOverlapInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_YieldOverlapInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClearAreaOverlapInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SpeedBumpOverlapInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ParkingSpaceOverlapInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PNCJunctionOverlapInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RSUOverlapInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RegionOverlapInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObjectOverlapInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Overlap_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "map_overlap.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 14);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::apollo::hdmap::protobuf_map_5fid_2eproto::InitDefaults();
  ::apollo::hdmap::protobuf_map_5fgeometry_2eproto::InitDefaults();
  _LaneOverlapInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LaneOverlapInfo_default_instance_);_SignalOverlapInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SignalOverlapInfo_default_instance_);_StopSignOverlapInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_StopSignOverlapInfo_default_instance_);_CrosswalkOverlapInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CrosswalkOverlapInfo_default_instance_);_JunctionOverlapInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_JunctionOverlapInfo_default_instance_);_YieldOverlapInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_YieldOverlapInfo_default_instance_);_ClearAreaOverlapInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ClearAreaOverlapInfo_default_instance_);_SpeedBumpOverlapInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SpeedBumpOverlapInfo_default_instance_);_ParkingSpaceOverlapInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ParkingSpaceOverlapInfo_default_instance_);_PNCJunctionOverlapInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PNCJunctionOverlapInfo_default_instance_);_RSUOverlapInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RSUOverlapInfo_default_instance_);_RegionOverlapInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RegionOverlapInfo_default_instance_);_ObjectOverlapInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ObjectOverlapInfo_default_instance_);_Overlap_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Overlap_default_instance_);_LaneOverlapInfo_default_instance_._instance.get_mutable()->region_overlap_id_ = const_cast< ::apollo::hdmap::Id*>(
      ::apollo::hdmap::Id::internal_default_instance());
  _CrosswalkOverlapInfo_default_instance_._instance.get_mutable()->region_overlap_id_ = const_cast< ::apollo::hdmap::Id*>(
      ::apollo::hdmap::Id::internal_default_instance());
  _RegionOverlapInfo_default_instance_._instance.get_mutable()->id_ = const_cast< ::apollo::hdmap::Id*>(
      ::apollo::hdmap::Id::internal_default_instance());
  _ObjectOverlapInfo_default_instance_._instance.get_mutable()->id_ = const_cast< ::apollo::hdmap::Id*>(
      ::apollo::hdmap::Id::internal_default_instance());
  _ObjectOverlapInfo_default_instance_.lane_overlap_info_ = const_cast< ::apollo::hdmap::LaneOverlapInfo*>(
      ::apollo::hdmap::LaneOverlapInfo::internal_default_instance());
  _ObjectOverlapInfo_default_instance_.signal_overlap_info_ = const_cast< ::apollo::hdmap::SignalOverlapInfo*>(
      ::apollo::hdmap::SignalOverlapInfo::internal_default_instance());
  _ObjectOverlapInfo_default_instance_.stop_sign_overlap_info_ = const_cast< ::apollo::hdmap::StopSignOverlapInfo*>(
      ::apollo::hdmap::StopSignOverlapInfo::internal_default_instance());
  _ObjectOverlapInfo_default_instance_.crosswalk_overlap_info_ = const_cast< ::apollo::hdmap::CrosswalkOverlapInfo*>(
      ::apollo::hdmap::CrosswalkOverlapInfo::internal_default_instance());
  _ObjectOverlapInfo_default_instance_.junction_overlap_info_ = const_cast< ::apollo::hdmap::JunctionOverlapInfo*>(
      ::apollo::hdmap::JunctionOverlapInfo::internal_default_instance());
  _ObjectOverlapInfo_default_instance_.yield_sign_overlap_info_ = const_cast< ::apollo::hdmap::YieldOverlapInfo*>(
      ::apollo::hdmap::YieldOverlapInfo::internal_default_instance());
  _ObjectOverlapInfo_default_instance_.clear_area_overlap_info_ = const_cast< ::apollo::hdmap::ClearAreaOverlapInfo*>(
      ::apollo::hdmap::ClearAreaOverlapInfo::internal_default_instance());
  _ObjectOverlapInfo_default_instance_.speed_bump_overlap_info_ = const_cast< ::apollo::hdmap::SpeedBumpOverlapInfo*>(
      ::apollo::hdmap::SpeedBumpOverlapInfo::internal_default_instance());
  _ObjectOverlapInfo_default_instance_.parking_space_overlap_info_ = const_cast< ::apollo::hdmap::ParkingSpaceOverlapInfo*>(
      ::apollo::hdmap::ParkingSpaceOverlapInfo::internal_default_instance());
  _ObjectOverlapInfo_default_instance_.pnc_junction_overlap_info_ = const_cast< ::apollo::hdmap::PNCJunctionOverlapInfo*>(
      ::apollo::hdmap::PNCJunctionOverlapInfo::internal_default_instance());
  _ObjectOverlapInfo_default_instance_.rsu_overlap_info_ = const_cast< ::apollo::hdmap::RSUOverlapInfo*>(
      ::apollo::hdmap::RSUOverlapInfo::internal_default_instance());
  _Overlap_default_instance_._instance.get_mutable()->id_ = const_cast< ::apollo::hdmap::Id*>(
      ::apollo::hdmap::Id::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021map_overlap.proto\022\014apollo.hdmap\032\014map_i"
      "d.proto\032\022map_geometry.proto\"p\n\017LaneOverl"
      "apInfo\022\017\n\007start_s\030\001 \001(\001\022\r\n\005end_s\030\002 \001(\001\022\020"
      "\n\010is_merge\030\003 \001(\010\022+\n\021region_overlap_id\030\004 "
      "\001(\0132\020.apollo.hdmap.Id\"\023\n\021SignalOverlapIn"
      "fo\"\025\n\023StopSignOverlapInfo\"C\n\024CrosswalkOv"
      "erlapInfo\022+\n\021region_overlap_id\030\001 \001(\0132\020.a"
      "pollo.hdmap.Id\"\025\n\023JunctionOverlapInfo\"\022\n"
      "\020YieldOverlapInfo\"\026\n\024ClearAreaOverlapInf"
      "o\"\026\n\024SpeedBumpOverlapInfo\"\031\n\027ParkingSpac"
      "eOverlapInfo\"\030\n\026PNCJunctionOverlapInfo\"\020"
      "\n\016RSUOverlapInfo\"Y\n\021RegionOverlapInfo\022\034\n"
      "\002id\030\001 \001(\0132\020.apollo.hdmap.Id\022&\n\007polygon\030\002"
      " \003(\0132\025.apollo.hdmap.Polygon\"\257\006\n\021ObjectOv"
      "erlapInfo\022\034\n\002id\030\001 \001(\0132\020.apollo.hdmap.Id\022"
      ":\n\021lane_overlap_info\030\003 \001(\0132\035.apollo.hdma"
      "p.LaneOverlapInfoH\000\022>\n\023signal_overlap_in"
      "fo\030\004 \001(\0132\037.apollo.hdmap.SignalOverlapInf"
      "oH\000\022C\n\026stop_sign_overlap_info\030\005 \001(\0132!.ap"
      "ollo.hdmap.StopSignOverlapInfoH\000\022D\n\026cros"
      "swalk_overlap_info\030\006 \001(\0132\".apollo.hdmap."
      "CrosswalkOverlapInfoH\000\022B\n\025junction_overl"
      "ap_info\030\007 \001(\0132!.apollo.hdmap.JunctionOve"
      "rlapInfoH\000\022A\n\027yield_sign_overlap_info\030\010 "
      "\001(\0132\036.apollo.hdmap.YieldOverlapInfoH\000\022E\n"
      "\027clear_area_overlap_info\030\t \001(\0132\".apollo."
      "hdmap.ClearAreaOverlapInfoH\000\022E\n\027speed_bu"
      "mp_overlap_info\030\n \001(\0132\".apollo.hdmap.Spe"
      "edBumpOverlapInfoH\000\022K\n\032parking_space_ove"
      "rlap_info\030\013 \001(\0132%.apollo.hdmap.ParkingSp"
      "aceOverlapInfoH\000\022I\n\031pnc_junction_overlap"
      "_info\030\014 \001(\0132$.apollo.hdmap.PNCJunctionOv"
      "erlapInfoH\000\0228\n\020rsu_overlap_info\030\r \001(\0132\034."
      "apollo.hdmap.RSUOverlapInfoH\000B\016\n\014overlap"
      "_info\"\221\001\n\007Overlap\022\034\n\002id\030\001 \001(\0132\020.apollo.h"
      "dmap.Id\022/\n\006object\030\002 \003(\0132\037.apollo.hdmap.O"
      "bjectOverlapInfo\0227\n\016region_overlap\030\003 \003(\013"
      "2\037.apollo.hdmap.RegionOverlapInfo"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1513);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "map_overlap.proto", &protobuf_RegisterTypes);
  ::apollo::hdmap::protobuf_map_5fid_2eproto::AddDescriptors();
  ::apollo::hdmap::protobuf_map_5fgeometry_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_map_5foverlap_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneOverlapInfo::kStartSFieldNumber;
const int LaneOverlapInfo::kEndSFieldNumber;
const int LaneOverlapInfo::kIsMergeFieldNumber;
const int LaneOverlapInfo::kRegionOverlapIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneOverlapInfo::LaneOverlapInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_map_5foverlap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.LaneOverlapInfo)
}
LaneOverlapInfo::LaneOverlapInfo(const LaneOverlapInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_region_overlap_id()) {
    region_overlap_id_ = new ::apollo::hdmap::Id(*from.region_overlap_id_);
  } else {
    region_overlap_id_ = NULL;
  }
  ::memcpy(&start_s_, &from.start_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_merge_) -
    reinterpret_cast<char*>(&start_s_)) + sizeof(is_merge_));
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.LaneOverlapInfo)
}

void LaneOverlapInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&region_overlap_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_merge_) -
      reinterpret_cast<char*>(&region_overlap_id_)) + sizeof(is_merge_));
}

LaneOverlapInfo::~LaneOverlapInfo() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.LaneOverlapInfo)
  SharedDtor();
}

void LaneOverlapInfo::SharedDtor() {
  if (this != internal_default_instance()) delete region_overlap_id_;
}

void LaneOverlapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneOverlapInfo::descriptor() {
  protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneOverlapInfo& LaneOverlapInfo::default_instance() {
  protobuf_map_5foverlap_2eproto::InitDefaults();
  return *internal_default_instance();
}

LaneOverlapInfo* LaneOverlapInfo::New(::google::protobuf::Arena* arena) const {
  LaneOverlapInfo* n = new LaneOverlapInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneOverlapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.LaneOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_region_overlap_id()) {
    GOOGLE_DCHECK(region_overlap_id_ != NULL);
    region_overlap_id_->::apollo::hdmap::Id::Clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 14u) {
    ::memset(&start_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_merge_) -
        reinterpret_cast<char*>(&start_s_)) + sizeof(is_merge_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LaneOverlapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.LaneOverlapInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double start_s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_start_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double end_s = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_end_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_merge = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_is_merge();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_merge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.hdmap.Id region_overlap_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_overlap_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.LaneOverlapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.LaneOverlapInfo)
  return false;
#undef DO_
}

void LaneOverlapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.LaneOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double start_s = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->start_s(), output);
  }

  // optional double end_s = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->end_s(), output);
  }

  // optional bool is_merge = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_merge(), output);
  }

  // optional .apollo.hdmap.Id region_overlap_id = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->region_overlap_id_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.LaneOverlapInfo)
}

::google::protobuf::uint8* LaneOverlapInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.LaneOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double start_s = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->start_s(), target);
  }

  // optional double end_s = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->end_s(), target);
  }

  // optional bool is_merge = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_merge(), target);
  }

  // optional .apollo.hdmap.Id region_overlap_id = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->region_overlap_id_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.LaneOverlapInfo)
  return target;
}

size_t LaneOverlapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.LaneOverlapInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .apollo.hdmap.Id region_overlap_id = 4;
    if (has_region_overlap_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->region_overlap_id_);
    }

    // optional double start_s = 1;
    if (has_start_s()) {
      total_size += 1 + 8;
    }

    // optional double end_s = 2;
    if (has_end_s()) {
      total_size += 1 + 8;
    }

    // optional bool is_merge = 3;
    if (has_is_merge()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneOverlapInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.LaneOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneOverlapInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneOverlapInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.LaneOverlapInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.LaneOverlapInfo)
    MergeFrom(*source);
  }
}

void LaneOverlapInfo::MergeFrom(const LaneOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.LaneOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_region_overlap_id()->::apollo::hdmap::Id::MergeFrom(from.region_overlap_id());
    }
    if (cached_has_bits & 0x00000002u) {
      start_s_ = from.start_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      end_s_ = from.end_s_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_merge_ = from.is_merge_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaneOverlapInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.LaneOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneOverlapInfo::CopyFrom(const LaneOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.LaneOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneOverlapInfo::IsInitialized() const {
  return true;
}

void LaneOverlapInfo::Swap(LaneOverlapInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneOverlapInfo::InternalSwap(LaneOverlapInfo* other) {
  using std::swap;
  swap(region_overlap_id_, other->region_overlap_id_);
  swap(start_s_, other->start_s_);
  swap(end_s_, other->end_s_);
  swap(is_merge_, other->is_merge_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneOverlapInfo::GetMetadata() const {
  protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LaneOverlapInfo

// optional double start_s = 1;
bool LaneOverlapInfo::has_start_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LaneOverlapInfo::set_has_start_s() {
  _has_bits_[0] |= 0x00000002u;
}
void LaneOverlapInfo::clear_has_start_s() {
  _has_bits_[0] &= ~0x00000002u;
}
void LaneOverlapInfo::clear_start_s() {
  start_s_ = 0;
  clear_has_start_s();
}
double LaneOverlapInfo::start_s() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.LaneOverlapInfo.start_s)
  return start_s_;
}
void LaneOverlapInfo::set_start_s(double value) {
  set_has_start_s();
  start_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.hdmap.LaneOverlapInfo.start_s)
}

// optional double end_s = 2;
bool LaneOverlapInfo::has_end_s() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LaneOverlapInfo::set_has_end_s() {
  _has_bits_[0] |= 0x00000004u;
}
void LaneOverlapInfo::clear_has_end_s() {
  _has_bits_[0] &= ~0x00000004u;
}
void LaneOverlapInfo::clear_end_s() {
  end_s_ = 0;
  clear_has_end_s();
}
double LaneOverlapInfo::end_s() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.LaneOverlapInfo.end_s)
  return end_s_;
}
void LaneOverlapInfo::set_end_s(double value) {
  set_has_end_s();
  end_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.hdmap.LaneOverlapInfo.end_s)
}

// optional bool is_merge = 3;
bool LaneOverlapInfo::has_is_merge() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LaneOverlapInfo::set_has_is_merge() {
  _has_bits_[0] |= 0x00000008u;
}
void LaneOverlapInfo::clear_has_is_merge() {
  _has_bits_[0] &= ~0x00000008u;
}
void LaneOverlapInfo::clear_is_merge() {
  is_merge_ = false;
  clear_has_is_merge();
}
bool LaneOverlapInfo::is_merge() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.LaneOverlapInfo.is_merge)
  return is_merge_;
}
void LaneOverlapInfo::set_is_merge(bool value) {
  set_has_is_merge();
  is_merge_ = value;
  // @@protoc_insertion_point(field_set:apollo.hdmap.LaneOverlapInfo.is_merge)
}

// optional .apollo.hdmap.Id region_overlap_id = 4;
bool LaneOverlapInfo::has_region_overlap_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LaneOverlapInfo::set_has_region_overlap_id() {
  _has_bits_[0] |= 0x00000001u;
}
void LaneOverlapInfo::clear_has_region_overlap_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void LaneOverlapInfo::clear_region_overlap_id() {
  if (region_overlap_id_ != NULL) region_overlap_id_->::apollo::hdmap::Id::Clear();
  clear_has_region_overlap_id();
}
const ::apollo::hdmap::Id& LaneOverlapInfo::region_overlap_id() const {
  const ::apollo::hdmap::Id* p = region_overlap_id_;
  // @@protoc_insertion_point(field_get:apollo.hdmap.LaneOverlapInfo.region_overlap_id)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::hdmap::Id*>(
      &::apollo::hdmap::_Id_default_instance_);
}
::apollo::hdmap::Id* LaneOverlapInfo::mutable_region_overlap_id() {
  set_has_region_overlap_id();
  if (region_overlap_id_ == NULL) {
    region_overlap_id_ = new ::apollo::hdmap::Id;
  }
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.LaneOverlapInfo.region_overlap_id)
  return region_overlap_id_;
}
::apollo::hdmap::Id* LaneOverlapInfo::release_region_overlap_id() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.LaneOverlapInfo.region_overlap_id)
  clear_has_region_overlap_id();
  ::apollo::hdmap::Id* temp = region_overlap_id_;
  region_overlap_id_ = NULL;
  return temp;
}
void LaneOverlapInfo::set_allocated_region_overlap_id(::apollo::hdmap::Id* region_overlap_id) {
  delete region_overlap_id_;
  region_overlap_id_ = region_overlap_id;
  if (region_overlap_id) {
    set_has_region_overlap_id();
  } else {
    clear_has_region_overlap_id();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.LaneOverlapInfo.region_overlap_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignalOverlapInfo::SignalOverlapInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_map_5foverlap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.SignalOverlapInfo)
}
SignalOverlapInfo::SignalOverlapInfo(const SignalOverlapInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.SignalOverlapInfo)
}

void SignalOverlapInfo::SharedCtor() {
  _cached_size_ = 0;
}

SignalOverlapInfo::~SignalOverlapInfo() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.SignalOverlapInfo)
  SharedDtor();
}

void SignalOverlapInfo::SharedDtor() {
}

void SignalOverlapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignalOverlapInfo::descriptor() {
  protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SignalOverlapInfo& SignalOverlapInfo::default_instance() {
  protobuf_map_5foverlap_2eproto::InitDefaults();
  return *internal_default_instance();
}

SignalOverlapInfo* SignalOverlapInfo::New(::google::protobuf::Arena* arena) const {
  SignalOverlapInfo* n = new SignalOverlapInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SignalOverlapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.SignalOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SignalOverlapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.SignalOverlapInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.SignalOverlapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.SignalOverlapInfo)
  return false;
#undef DO_
}

void SignalOverlapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.SignalOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.SignalOverlapInfo)
}

::google::protobuf::uint8* SignalOverlapInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.SignalOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.SignalOverlapInfo)
  return target;
}

size_t SignalOverlapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.SignalOverlapInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignalOverlapInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.SignalOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalOverlapInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SignalOverlapInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.SignalOverlapInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.SignalOverlapInfo)
    MergeFrom(*source);
  }
}

void SignalOverlapInfo::MergeFrom(const SignalOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.SignalOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SignalOverlapInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.SignalOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalOverlapInfo::CopyFrom(const SignalOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.SignalOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalOverlapInfo::IsInitialized() const {
  return true;
}

void SignalOverlapInfo::Swap(SignalOverlapInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignalOverlapInfo::InternalSwap(SignalOverlapInfo* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SignalOverlapInfo::GetMetadata() const {
  protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SignalOverlapInfo

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopSignOverlapInfo::StopSignOverlapInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_map_5foverlap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.StopSignOverlapInfo)
}
StopSignOverlapInfo::StopSignOverlapInfo(const StopSignOverlapInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.StopSignOverlapInfo)
}

void StopSignOverlapInfo::SharedCtor() {
  _cached_size_ = 0;
}

StopSignOverlapInfo::~StopSignOverlapInfo() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.StopSignOverlapInfo)
  SharedDtor();
}

void StopSignOverlapInfo::SharedDtor() {
}

void StopSignOverlapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopSignOverlapInfo::descriptor() {
  protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StopSignOverlapInfo& StopSignOverlapInfo::default_instance() {
  protobuf_map_5foverlap_2eproto::InitDefaults();
  return *internal_default_instance();
}

StopSignOverlapInfo* StopSignOverlapInfo::New(::google::protobuf::Arena* arena) const {
  StopSignOverlapInfo* n = new StopSignOverlapInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StopSignOverlapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.StopSignOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StopSignOverlapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.StopSignOverlapInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.StopSignOverlapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.StopSignOverlapInfo)
  return false;
#undef DO_
}

void StopSignOverlapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.StopSignOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.StopSignOverlapInfo)
}

::google::protobuf::uint8* StopSignOverlapInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.StopSignOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.StopSignOverlapInfo)
  return target;
}

size_t StopSignOverlapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.StopSignOverlapInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopSignOverlapInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.StopSignOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const StopSignOverlapInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StopSignOverlapInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.StopSignOverlapInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.StopSignOverlapInfo)
    MergeFrom(*source);
  }
}

void StopSignOverlapInfo::MergeFrom(const StopSignOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.StopSignOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StopSignOverlapInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.StopSignOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopSignOverlapInfo::CopyFrom(const StopSignOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.StopSignOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopSignOverlapInfo::IsInitialized() const {
  return true;
}

void StopSignOverlapInfo::Swap(StopSignOverlapInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopSignOverlapInfo::InternalSwap(StopSignOverlapInfo* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StopSignOverlapInfo::GetMetadata() const {
  protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StopSignOverlapInfo

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CrosswalkOverlapInfo::kRegionOverlapIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CrosswalkOverlapInfo::CrosswalkOverlapInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_map_5foverlap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.CrosswalkOverlapInfo)
}
CrosswalkOverlapInfo::CrosswalkOverlapInfo(const CrosswalkOverlapInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_region_overlap_id()) {
    region_overlap_id_ = new ::apollo::hdmap::Id(*from.region_overlap_id_);
  } else {
    region_overlap_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.CrosswalkOverlapInfo)
}

void CrosswalkOverlapInfo::SharedCtor() {
  _cached_size_ = 0;
  region_overlap_id_ = NULL;
}

CrosswalkOverlapInfo::~CrosswalkOverlapInfo() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.CrosswalkOverlapInfo)
  SharedDtor();
}

void CrosswalkOverlapInfo::SharedDtor() {
  if (this != internal_default_instance()) delete region_overlap_id_;
}

void CrosswalkOverlapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CrosswalkOverlapInfo::descriptor() {
  protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CrosswalkOverlapInfo& CrosswalkOverlapInfo::default_instance() {
  protobuf_map_5foverlap_2eproto::InitDefaults();
  return *internal_default_instance();
}

CrosswalkOverlapInfo* CrosswalkOverlapInfo::New(::google::protobuf::Arena* arena) const {
  CrosswalkOverlapInfo* n = new CrosswalkOverlapInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CrosswalkOverlapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.CrosswalkOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_region_overlap_id()) {
    GOOGLE_DCHECK(region_overlap_id_ != NULL);
    region_overlap_id_->::apollo::hdmap::Id::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CrosswalkOverlapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.CrosswalkOverlapInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.hdmap.Id region_overlap_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_overlap_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.CrosswalkOverlapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.CrosswalkOverlapInfo)
  return false;
#undef DO_
}

void CrosswalkOverlapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.CrosswalkOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.Id region_overlap_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->region_overlap_id_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.CrosswalkOverlapInfo)
}

::google::protobuf::uint8* CrosswalkOverlapInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.CrosswalkOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.Id region_overlap_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->region_overlap_id_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.CrosswalkOverlapInfo)
  return target;
}

size_t CrosswalkOverlapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.CrosswalkOverlapInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .apollo.hdmap.Id region_overlap_id = 1;
  if (has_region_overlap_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_overlap_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CrosswalkOverlapInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.CrosswalkOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CrosswalkOverlapInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CrosswalkOverlapInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.CrosswalkOverlapInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.CrosswalkOverlapInfo)
    MergeFrom(*source);
  }
}

void CrosswalkOverlapInfo::MergeFrom(const CrosswalkOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.CrosswalkOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_region_overlap_id()) {
    mutable_region_overlap_id()->::apollo::hdmap::Id::MergeFrom(from.region_overlap_id());
  }
}

void CrosswalkOverlapInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.CrosswalkOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrosswalkOverlapInfo::CopyFrom(const CrosswalkOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.CrosswalkOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrosswalkOverlapInfo::IsInitialized() const {
  return true;
}

void CrosswalkOverlapInfo::Swap(CrosswalkOverlapInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CrosswalkOverlapInfo::InternalSwap(CrosswalkOverlapInfo* other) {
  using std::swap;
  swap(region_overlap_id_, other->region_overlap_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CrosswalkOverlapInfo::GetMetadata() const {
  protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CrosswalkOverlapInfo

// optional .apollo.hdmap.Id region_overlap_id = 1;
bool CrosswalkOverlapInfo::has_region_overlap_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CrosswalkOverlapInfo::set_has_region_overlap_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CrosswalkOverlapInfo::clear_has_region_overlap_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CrosswalkOverlapInfo::clear_region_overlap_id() {
  if (region_overlap_id_ != NULL) region_overlap_id_->::apollo::hdmap::Id::Clear();
  clear_has_region_overlap_id();
}
const ::apollo::hdmap::Id& CrosswalkOverlapInfo::region_overlap_id() const {
  const ::apollo::hdmap::Id* p = region_overlap_id_;
  // @@protoc_insertion_point(field_get:apollo.hdmap.CrosswalkOverlapInfo.region_overlap_id)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::hdmap::Id*>(
      &::apollo::hdmap::_Id_default_instance_);
}
::apollo::hdmap::Id* CrosswalkOverlapInfo::mutable_region_overlap_id() {
  set_has_region_overlap_id();
  if (region_overlap_id_ == NULL) {
    region_overlap_id_ = new ::apollo::hdmap::Id;
  }
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.CrosswalkOverlapInfo.region_overlap_id)
  return region_overlap_id_;
}
::apollo::hdmap::Id* CrosswalkOverlapInfo::release_region_overlap_id() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.CrosswalkOverlapInfo.region_overlap_id)
  clear_has_region_overlap_id();
  ::apollo::hdmap::Id* temp = region_overlap_id_;
  region_overlap_id_ = NULL;
  return temp;
}
void CrosswalkOverlapInfo::set_allocated_region_overlap_id(::apollo::hdmap::Id* region_overlap_id) {
  delete region_overlap_id_;
  region_overlap_id_ = region_overlap_id;
  if (region_overlap_id) {
    set_has_region_overlap_id();
  } else {
    clear_has_region_overlap_id();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.CrosswalkOverlapInfo.region_overlap_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JunctionOverlapInfo::JunctionOverlapInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_map_5foverlap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.JunctionOverlapInfo)
}
JunctionOverlapInfo::JunctionOverlapInfo(const JunctionOverlapInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.JunctionOverlapInfo)
}

void JunctionOverlapInfo::SharedCtor() {
  _cached_size_ = 0;
}

JunctionOverlapInfo::~JunctionOverlapInfo() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.JunctionOverlapInfo)
  SharedDtor();
}

void JunctionOverlapInfo::SharedDtor() {
}

void JunctionOverlapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JunctionOverlapInfo::descriptor() {
  protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JunctionOverlapInfo& JunctionOverlapInfo::default_instance() {
  protobuf_map_5foverlap_2eproto::InitDefaults();
  return *internal_default_instance();
}

JunctionOverlapInfo* JunctionOverlapInfo::New(::google::protobuf::Arena* arena) const {
  JunctionOverlapInfo* n = new JunctionOverlapInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JunctionOverlapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.JunctionOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool JunctionOverlapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.JunctionOverlapInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.JunctionOverlapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.JunctionOverlapInfo)
  return false;
#undef DO_
}

void JunctionOverlapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.JunctionOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.JunctionOverlapInfo)
}

::google::protobuf::uint8* JunctionOverlapInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.JunctionOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.JunctionOverlapInfo)
  return target;
}

size_t JunctionOverlapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.JunctionOverlapInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JunctionOverlapInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.JunctionOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const JunctionOverlapInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JunctionOverlapInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.JunctionOverlapInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.JunctionOverlapInfo)
    MergeFrom(*source);
  }
}

void JunctionOverlapInfo::MergeFrom(const JunctionOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.JunctionOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void JunctionOverlapInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.JunctionOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JunctionOverlapInfo::CopyFrom(const JunctionOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.JunctionOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JunctionOverlapInfo::IsInitialized() const {
  return true;
}

void JunctionOverlapInfo::Swap(JunctionOverlapInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JunctionOverlapInfo::InternalSwap(JunctionOverlapInfo* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JunctionOverlapInfo::GetMetadata() const {
  protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JunctionOverlapInfo

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

YieldOverlapInfo::YieldOverlapInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_map_5foverlap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.YieldOverlapInfo)
}
YieldOverlapInfo::YieldOverlapInfo(const YieldOverlapInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.YieldOverlapInfo)
}

void YieldOverlapInfo::SharedCtor() {
  _cached_size_ = 0;
}

YieldOverlapInfo::~YieldOverlapInfo() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.YieldOverlapInfo)
  SharedDtor();
}

void YieldOverlapInfo::SharedDtor() {
}

void YieldOverlapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YieldOverlapInfo::descriptor() {
  protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const YieldOverlapInfo& YieldOverlapInfo::default_instance() {
  protobuf_map_5foverlap_2eproto::InitDefaults();
  return *internal_default_instance();
}

YieldOverlapInfo* YieldOverlapInfo::New(::google::protobuf::Arena* arena) const {
  YieldOverlapInfo* n = new YieldOverlapInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YieldOverlapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.YieldOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool YieldOverlapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.YieldOverlapInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.YieldOverlapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.YieldOverlapInfo)
  return false;
#undef DO_
}

void YieldOverlapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.YieldOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.YieldOverlapInfo)
}

::google::protobuf::uint8* YieldOverlapInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.YieldOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.YieldOverlapInfo)
  return target;
}

size_t YieldOverlapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.YieldOverlapInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YieldOverlapInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.YieldOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const YieldOverlapInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const YieldOverlapInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.YieldOverlapInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.YieldOverlapInfo)
    MergeFrom(*source);
  }
}

void YieldOverlapInfo::MergeFrom(const YieldOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.YieldOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void YieldOverlapInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.YieldOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YieldOverlapInfo::CopyFrom(const YieldOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.YieldOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YieldOverlapInfo::IsInitialized() const {
  return true;
}

void YieldOverlapInfo::Swap(YieldOverlapInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YieldOverlapInfo::InternalSwap(YieldOverlapInfo* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata YieldOverlapInfo::GetMetadata() const {
  protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YieldOverlapInfo

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClearAreaOverlapInfo::ClearAreaOverlapInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_map_5foverlap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.ClearAreaOverlapInfo)
}
ClearAreaOverlapInfo::ClearAreaOverlapInfo(const ClearAreaOverlapInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.ClearAreaOverlapInfo)
}

void ClearAreaOverlapInfo::SharedCtor() {
  _cached_size_ = 0;
}

ClearAreaOverlapInfo::~ClearAreaOverlapInfo() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.ClearAreaOverlapInfo)
  SharedDtor();
}

void ClearAreaOverlapInfo::SharedDtor() {
}

void ClearAreaOverlapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClearAreaOverlapInfo::descriptor() {
  protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClearAreaOverlapInfo& ClearAreaOverlapInfo::default_instance() {
  protobuf_map_5foverlap_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClearAreaOverlapInfo* ClearAreaOverlapInfo::New(::google::protobuf::Arena* arena) const {
  ClearAreaOverlapInfo* n = new ClearAreaOverlapInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClearAreaOverlapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.ClearAreaOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ClearAreaOverlapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.ClearAreaOverlapInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.ClearAreaOverlapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.ClearAreaOverlapInfo)
  return false;
#undef DO_
}

void ClearAreaOverlapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.ClearAreaOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.ClearAreaOverlapInfo)
}

::google::protobuf::uint8* ClearAreaOverlapInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.ClearAreaOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.ClearAreaOverlapInfo)
  return target;
}

size_t ClearAreaOverlapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.ClearAreaOverlapInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClearAreaOverlapInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.ClearAreaOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ClearAreaOverlapInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClearAreaOverlapInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.ClearAreaOverlapInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.ClearAreaOverlapInfo)
    MergeFrom(*source);
  }
}

void ClearAreaOverlapInfo::MergeFrom(const ClearAreaOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.ClearAreaOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ClearAreaOverlapInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.ClearAreaOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearAreaOverlapInfo::CopyFrom(const ClearAreaOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.ClearAreaOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearAreaOverlapInfo::IsInitialized() const {
  return true;
}

void ClearAreaOverlapInfo::Swap(ClearAreaOverlapInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClearAreaOverlapInfo::InternalSwap(ClearAreaOverlapInfo* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClearAreaOverlapInfo::GetMetadata() const {
  protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClearAreaOverlapInfo

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeedBumpOverlapInfo::SpeedBumpOverlapInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_map_5foverlap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.SpeedBumpOverlapInfo)
}
SpeedBumpOverlapInfo::SpeedBumpOverlapInfo(const SpeedBumpOverlapInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.SpeedBumpOverlapInfo)
}

void SpeedBumpOverlapInfo::SharedCtor() {
  _cached_size_ = 0;
}

SpeedBumpOverlapInfo::~SpeedBumpOverlapInfo() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.SpeedBumpOverlapInfo)
  SharedDtor();
}

void SpeedBumpOverlapInfo::SharedDtor() {
}

void SpeedBumpOverlapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeedBumpOverlapInfo::descriptor() {
  protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeedBumpOverlapInfo& SpeedBumpOverlapInfo::default_instance() {
  protobuf_map_5foverlap_2eproto::InitDefaults();
  return *internal_default_instance();
}

SpeedBumpOverlapInfo* SpeedBumpOverlapInfo::New(::google::protobuf::Arena* arena) const {
  SpeedBumpOverlapInfo* n = new SpeedBumpOverlapInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpeedBumpOverlapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.SpeedBumpOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SpeedBumpOverlapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.SpeedBumpOverlapInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.SpeedBumpOverlapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.SpeedBumpOverlapInfo)
  return false;
#undef DO_
}

void SpeedBumpOverlapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.SpeedBumpOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.SpeedBumpOverlapInfo)
}

::google::protobuf::uint8* SpeedBumpOverlapInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.SpeedBumpOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.SpeedBumpOverlapInfo)
  return target;
}

size_t SpeedBumpOverlapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.SpeedBumpOverlapInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeedBumpOverlapInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.SpeedBumpOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedBumpOverlapInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeedBumpOverlapInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.SpeedBumpOverlapInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.SpeedBumpOverlapInfo)
    MergeFrom(*source);
  }
}

void SpeedBumpOverlapInfo::MergeFrom(const SpeedBumpOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.SpeedBumpOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SpeedBumpOverlapInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.SpeedBumpOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedBumpOverlapInfo::CopyFrom(const SpeedBumpOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.SpeedBumpOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedBumpOverlapInfo::IsInitialized() const {
  return true;
}

void SpeedBumpOverlapInfo::Swap(SpeedBumpOverlapInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeedBumpOverlapInfo::InternalSwap(SpeedBumpOverlapInfo* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpeedBumpOverlapInfo::GetMetadata() const {
  protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpeedBumpOverlapInfo

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParkingSpaceOverlapInfo::ParkingSpaceOverlapInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_map_5foverlap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.ParkingSpaceOverlapInfo)
}
ParkingSpaceOverlapInfo::ParkingSpaceOverlapInfo(const ParkingSpaceOverlapInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.ParkingSpaceOverlapInfo)
}

void ParkingSpaceOverlapInfo::SharedCtor() {
  _cached_size_ = 0;
}

ParkingSpaceOverlapInfo::~ParkingSpaceOverlapInfo() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.ParkingSpaceOverlapInfo)
  SharedDtor();
}

void ParkingSpaceOverlapInfo::SharedDtor() {
}

void ParkingSpaceOverlapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParkingSpaceOverlapInfo::descriptor() {
  protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ParkingSpaceOverlapInfo& ParkingSpaceOverlapInfo::default_instance() {
  protobuf_map_5foverlap_2eproto::InitDefaults();
  return *internal_default_instance();
}

ParkingSpaceOverlapInfo* ParkingSpaceOverlapInfo::New(::google::protobuf::Arena* arena) const {
  ParkingSpaceOverlapInfo* n = new ParkingSpaceOverlapInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParkingSpaceOverlapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.ParkingSpaceOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ParkingSpaceOverlapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.ParkingSpaceOverlapInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.ParkingSpaceOverlapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.ParkingSpaceOverlapInfo)
  return false;
#undef DO_
}

void ParkingSpaceOverlapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.ParkingSpaceOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.ParkingSpaceOverlapInfo)
}

::google::protobuf::uint8* ParkingSpaceOverlapInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.ParkingSpaceOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.ParkingSpaceOverlapInfo)
  return target;
}

size_t ParkingSpaceOverlapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.ParkingSpaceOverlapInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParkingSpaceOverlapInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.ParkingSpaceOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ParkingSpaceOverlapInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParkingSpaceOverlapInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.ParkingSpaceOverlapInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.ParkingSpaceOverlapInfo)
    MergeFrom(*source);
  }
}

void ParkingSpaceOverlapInfo::MergeFrom(const ParkingSpaceOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.ParkingSpaceOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ParkingSpaceOverlapInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.ParkingSpaceOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParkingSpaceOverlapInfo::CopyFrom(const ParkingSpaceOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.ParkingSpaceOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkingSpaceOverlapInfo::IsInitialized() const {
  return true;
}

void ParkingSpaceOverlapInfo::Swap(ParkingSpaceOverlapInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParkingSpaceOverlapInfo::InternalSwap(ParkingSpaceOverlapInfo* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParkingSpaceOverlapInfo::GetMetadata() const {
  protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ParkingSpaceOverlapInfo

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PNCJunctionOverlapInfo::PNCJunctionOverlapInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_map_5foverlap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.PNCJunctionOverlapInfo)
}
PNCJunctionOverlapInfo::PNCJunctionOverlapInfo(const PNCJunctionOverlapInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.PNCJunctionOverlapInfo)
}

void PNCJunctionOverlapInfo::SharedCtor() {
  _cached_size_ = 0;
}

PNCJunctionOverlapInfo::~PNCJunctionOverlapInfo() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.PNCJunctionOverlapInfo)
  SharedDtor();
}

void PNCJunctionOverlapInfo::SharedDtor() {
}

void PNCJunctionOverlapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PNCJunctionOverlapInfo::descriptor() {
  protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PNCJunctionOverlapInfo& PNCJunctionOverlapInfo::default_instance() {
  protobuf_map_5foverlap_2eproto::InitDefaults();
  return *internal_default_instance();
}

PNCJunctionOverlapInfo* PNCJunctionOverlapInfo::New(::google::protobuf::Arena* arena) const {
  PNCJunctionOverlapInfo* n = new PNCJunctionOverlapInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PNCJunctionOverlapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.PNCJunctionOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PNCJunctionOverlapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.PNCJunctionOverlapInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.PNCJunctionOverlapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.PNCJunctionOverlapInfo)
  return false;
#undef DO_
}

void PNCJunctionOverlapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.PNCJunctionOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.PNCJunctionOverlapInfo)
}

::google::protobuf::uint8* PNCJunctionOverlapInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.PNCJunctionOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.PNCJunctionOverlapInfo)
  return target;
}

size_t PNCJunctionOverlapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.PNCJunctionOverlapInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PNCJunctionOverlapInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.PNCJunctionOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PNCJunctionOverlapInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PNCJunctionOverlapInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.PNCJunctionOverlapInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.PNCJunctionOverlapInfo)
    MergeFrom(*source);
  }
}

void PNCJunctionOverlapInfo::MergeFrom(const PNCJunctionOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.PNCJunctionOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PNCJunctionOverlapInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.PNCJunctionOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PNCJunctionOverlapInfo::CopyFrom(const PNCJunctionOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.PNCJunctionOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PNCJunctionOverlapInfo::IsInitialized() const {
  return true;
}

void PNCJunctionOverlapInfo::Swap(PNCJunctionOverlapInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PNCJunctionOverlapInfo::InternalSwap(PNCJunctionOverlapInfo* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PNCJunctionOverlapInfo::GetMetadata() const {
  protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PNCJunctionOverlapInfo

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RSUOverlapInfo::RSUOverlapInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_map_5foverlap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.RSUOverlapInfo)
}
RSUOverlapInfo::RSUOverlapInfo(const RSUOverlapInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.RSUOverlapInfo)
}

void RSUOverlapInfo::SharedCtor() {
  _cached_size_ = 0;
}

RSUOverlapInfo::~RSUOverlapInfo() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.RSUOverlapInfo)
  SharedDtor();
}

void RSUOverlapInfo::SharedDtor() {
}

void RSUOverlapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RSUOverlapInfo::descriptor() {
  protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RSUOverlapInfo& RSUOverlapInfo::default_instance() {
  protobuf_map_5foverlap_2eproto::InitDefaults();
  return *internal_default_instance();
}

RSUOverlapInfo* RSUOverlapInfo::New(::google::protobuf::Arena* arena) const {
  RSUOverlapInfo* n = new RSUOverlapInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RSUOverlapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.RSUOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RSUOverlapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.RSUOverlapInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.RSUOverlapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.RSUOverlapInfo)
  return false;
#undef DO_
}

void RSUOverlapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.RSUOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.RSUOverlapInfo)
}

::google::protobuf::uint8* RSUOverlapInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.RSUOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.RSUOverlapInfo)
  return target;
}

size_t RSUOverlapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.RSUOverlapInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RSUOverlapInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.RSUOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RSUOverlapInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RSUOverlapInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.RSUOverlapInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.RSUOverlapInfo)
    MergeFrom(*source);
  }
}

void RSUOverlapInfo::MergeFrom(const RSUOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.RSUOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RSUOverlapInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.RSUOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RSUOverlapInfo::CopyFrom(const RSUOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.RSUOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RSUOverlapInfo::IsInitialized() const {
  return true;
}

void RSUOverlapInfo::Swap(RSUOverlapInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RSUOverlapInfo::InternalSwap(RSUOverlapInfo* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RSUOverlapInfo::GetMetadata() const {
  protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RSUOverlapInfo

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegionOverlapInfo::kIdFieldNumber;
const int RegionOverlapInfo::kPolygonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegionOverlapInfo::RegionOverlapInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_map_5foverlap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.RegionOverlapInfo)
}
RegionOverlapInfo::RegionOverlapInfo(const RegionOverlapInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      polygon_(from.polygon_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::apollo::hdmap::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.RegionOverlapInfo)
}

void RegionOverlapInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
}

RegionOverlapInfo::~RegionOverlapInfo() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.RegionOverlapInfo)
  SharedDtor();
}

void RegionOverlapInfo::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void RegionOverlapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionOverlapInfo::descriptor() {
  protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegionOverlapInfo& RegionOverlapInfo::default_instance() {
  protobuf_map_5foverlap_2eproto::InitDefaults();
  return *internal_default_instance();
}

RegionOverlapInfo* RegionOverlapInfo::New(::google::protobuf::Arena* arena) const {
  RegionOverlapInfo* n = new RegionOverlapInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegionOverlapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.RegionOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  polygon_.Clear();
  if (has_id()) {
    GOOGLE_DCHECK(id_ != NULL);
    id_->::apollo::hdmap::Id::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RegionOverlapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.RegionOverlapInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.hdmap.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.Polygon polygon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.RegionOverlapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.RegionOverlapInfo)
  return false;
#undef DO_
}

void RegionOverlapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.RegionOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // repeated .apollo.hdmap.Polygon polygon = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polygon_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->polygon(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.RegionOverlapInfo)
}

::google::protobuf::uint8* RegionOverlapInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.RegionOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, deterministic, target);
  }

  // repeated .apollo.hdmap.Polygon polygon = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polygon_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->polygon(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.RegionOverlapInfo)
  return target;
}

size_t RegionOverlapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.RegionOverlapInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.hdmap.Polygon polygon = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->polygon_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->polygon(static_cast<int>(i)));
    }
  }

  // optional .apollo.hdmap.Id id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionOverlapInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.RegionOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionOverlapInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegionOverlapInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.RegionOverlapInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.RegionOverlapInfo)
    MergeFrom(*source);
  }
}

void RegionOverlapInfo::MergeFrom(const RegionOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.RegionOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polygon_.MergeFrom(from.polygon_);
  if (from.has_id()) {
    mutable_id()->::apollo::hdmap::Id::MergeFrom(from.id());
  }
}

void RegionOverlapInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.RegionOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionOverlapInfo::CopyFrom(const RegionOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.RegionOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionOverlapInfo::IsInitialized() const {
  return true;
}

void RegionOverlapInfo::Swap(RegionOverlapInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegionOverlapInfo::InternalSwap(RegionOverlapInfo* other) {
  using std::swap;
  polygon_.InternalSwap(&other->polygon_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegionOverlapInfo::GetMetadata() const {
  protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegionOverlapInfo

// optional .apollo.hdmap.Id id = 1;
bool RegionOverlapInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RegionOverlapInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RegionOverlapInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RegionOverlapInfo::clear_id() {
  if (id_ != NULL) id_->::apollo::hdmap::Id::Clear();
  clear_has_id();
}
const ::apollo::hdmap::Id& RegionOverlapInfo::id() const {
  const ::apollo::hdmap::Id* p = id_;
  // @@protoc_insertion_point(field_get:apollo.hdmap.RegionOverlapInfo.id)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::hdmap::Id*>(
      &::apollo::hdmap::_Id_default_instance_);
}
::apollo::hdmap::Id* RegionOverlapInfo::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::apollo::hdmap::Id;
  }
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.RegionOverlapInfo.id)
  return id_;
}
::apollo::hdmap::Id* RegionOverlapInfo::release_id() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.RegionOverlapInfo.id)
  clear_has_id();
  ::apollo::hdmap::Id* temp = id_;
  id_ = NULL;
  return temp;
}
void RegionOverlapInfo::set_allocated_id(::apollo::hdmap::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.RegionOverlapInfo.id)
}

// repeated .apollo.hdmap.Polygon polygon = 2;
int RegionOverlapInfo::polygon_size() const {
  return polygon_.size();
}
void RegionOverlapInfo::clear_polygon() {
  polygon_.Clear();
}
const ::apollo::hdmap::Polygon& RegionOverlapInfo::polygon(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.RegionOverlapInfo.polygon)
  return polygon_.Get(index);
}
::apollo::hdmap::Polygon* RegionOverlapInfo::mutable_polygon(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.RegionOverlapInfo.polygon)
  return polygon_.Mutable(index);
}
::apollo::hdmap::Polygon* RegionOverlapInfo::add_polygon() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.RegionOverlapInfo.polygon)
  return polygon_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Polygon >*
RegionOverlapInfo::mutable_polygon() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.RegionOverlapInfo.polygon)
  return &polygon_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Polygon >&
RegionOverlapInfo::polygon() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.RegionOverlapInfo.polygon)
  return polygon_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectOverlapInfo::kIdFieldNumber;
const int ObjectOverlapInfo::kLaneOverlapInfoFieldNumber;
const int ObjectOverlapInfo::kSignalOverlapInfoFieldNumber;
const int ObjectOverlapInfo::kStopSignOverlapInfoFieldNumber;
const int ObjectOverlapInfo::kCrosswalkOverlapInfoFieldNumber;
const int ObjectOverlapInfo::kJunctionOverlapInfoFieldNumber;
const int ObjectOverlapInfo::kYieldSignOverlapInfoFieldNumber;
const int ObjectOverlapInfo::kClearAreaOverlapInfoFieldNumber;
const int ObjectOverlapInfo::kSpeedBumpOverlapInfoFieldNumber;
const int ObjectOverlapInfo::kParkingSpaceOverlapInfoFieldNumber;
const int ObjectOverlapInfo::kPncJunctionOverlapInfoFieldNumber;
const int ObjectOverlapInfo::kRsuOverlapInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectOverlapInfo::ObjectOverlapInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_map_5foverlap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.ObjectOverlapInfo)
}
ObjectOverlapInfo::ObjectOverlapInfo(const ObjectOverlapInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::apollo::hdmap::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  clear_has_overlap_info();
  switch (from.overlap_info_case()) {
    case kLaneOverlapInfo: {
      mutable_lane_overlap_info()->::apollo::hdmap::LaneOverlapInfo::MergeFrom(from.lane_overlap_info());
      break;
    }
    case kSignalOverlapInfo: {
      mutable_signal_overlap_info()->::apollo::hdmap::SignalOverlapInfo::MergeFrom(from.signal_overlap_info());
      break;
    }
    case kStopSignOverlapInfo: {
      mutable_stop_sign_overlap_info()->::apollo::hdmap::StopSignOverlapInfo::MergeFrom(from.stop_sign_overlap_info());
      break;
    }
    case kCrosswalkOverlapInfo: {
      mutable_crosswalk_overlap_info()->::apollo::hdmap::CrosswalkOverlapInfo::MergeFrom(from.crosswalk_overlap_info());
      break;
    }
    case kJunctionOverlapInfo: {
      mutable_junction_overlap_info()->::apollo::hdmap::JunctionOverlapInfo::MergeFrom(from.junction_overlap_info());
      break;
    }
    case kYieldSignOverlapInfo: {
      mutable_yield_sign_overlap_info()->::apollo::hdmap::YieldOverlapInfo::MergeFrom(from.yield_sign_overlap_info());
      break;
    }
    case kClearAreaOverlapInfo: {
      mutable_clear_area_overlap_info()->::apollo::hdmap::ClearAreaOverlapInfo::MergeFrom(from.clear_area_overlap_info());
      break;
    }
    case kSpeedBumpOverlapInfo: {
      mutable_speed_bump_overlap_info()->::apollo::hdmap::SpeedBumpOverlapInfo::MergeFrom(from.speed_bump_overlap_info());
      break;
    }
    case kParkingSpaceOverlapInfo: {
      mutable_parking_space_overlap_info()->::apollo::hdmap::ParkingSpaceOverlapInfo::MergeFrom(from.parking_space_overlap_info());
      break;
    }
    case kPncJunctionOverlapInfo: {
      mutable_pnc_junction_overlap_info()->::apollo::hdmap::PNCJunctionOverlapInfo::MergeFrom(from.pnc_junction_overlap_info());
      break;
    }
    case kRsuOverlapInfo: {
      mutable_rsu_overlap_info()->::apollo::hdmap::RSUOverlapInfo::MergeFrom(from.rsu_overlap_info());
      break;
    }
    case OVERLAP_INFO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.ObjectOverlapInfo)
}

void ObjectOverlapInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  clear_has_overlap_info();
}

ObjectOverlapInfo::~ObjectOverlapInfo() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.ObjectOverlapInfo)
  SharedDtor();
}

void ObjectOverlapInfo::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (has_overlap_info()) {
    clear_overlap_info();
  }
}

void ObjectOverlapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectOverlapInfo::descriptor() {
  protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectOverlapInfo& ObjectOverlapInfo::default_instance() {
  protobuf_map_5foverlap_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObjectOverlapInfo* ObjectOverlapInfo::New(::google::protobuf::Arena* arena) const {
  ObjectOverlapInfo* n = new ObjectOverlapInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectOverlapInfo::clear_overlap_info() {
// @@protoc_insertion_point(one_of_clear_start:apollo.hdmap.ObjectOverlapInfo)
  switch (overlap_info_case()) {
    case kLaneOverlapInfo: {
      delete overlap_info_.lane_overlap_info_;
      break;
    }
    case kSignalOverlapInfo: {
      delete overlap_info_.signal_overlap_info_;
      break;
    }
    case kStopSignOverlapInfo: {
      delete overlap_info_.stop_sign_overlap_info_;
      break;
    }
    case kCrosswalkOverlapInfo: {
      delete overlap_info_.crosswalk_overlap_info_;
      break;
    }
    case kJunctionOverlapInfo: {
      delete overlap_info_.junction_overlap_info_;
      break;
    }
    case kYieldSignOverlapInfo: {
      delete overlap_info_.yield_sign_overlap_info_;
      break;
    }
    case kClearAreaOverlapInfo: {
      delete overlap_info_.clear_area_overlap_info_;
      break;
    }
    case kSpeedBumpOverlapInfo: {
      delete overlap_info_.speed_bump_overlap_info_;
      break;
    }
    case kParkingSpaceOverlapInfo: {
      delete overlap_info_.parking_space_overlap_info_;
      break;
    }
    case kPncJunctionOverlapInfo: {
      delete overlap_info_.pnc_junction_overlap_info_;
      break;
    }
    case kRsuOverlapInfo: {
      delete overlap_info_.rsu_overlap_info_;
      break;
    }
    case OVERLAP_INFO_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OVERLAP_INFO_NOT_SET;
}


void ObjectOverlapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.ObjectOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_id()) {
    GOOGLE_DCHECK(id_ != NULL);
    id_->::apollo::hdmap::Id::Clear();
  }
  clear_overlap_info();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectOverlapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.ObjectOverlapInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.hdmap.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.hdmap.LaneOverlapInfo lane_overlap_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lane_overlap_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.hdmap.SignalOverlapInfo signal_overlap_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signal_overlap_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.hdmap.StopSignOverlapInfo stop_sign_overlap_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop_sign_overlap_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.hdmap.CrosswalkOverlapInfo crosswalk_overlap_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crosswalk_overlap_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.hdmap.JunctionOverlapInfo junction_overlap_info = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_junction_overlap_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.hdmap.YieldOverlapInfo yield_sign_overlap_info = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yield_sign_overlap_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.hdmap.ClearAreaOverlapInfo clear_area_overlap_info = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clear_area_overlap_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.hdmap.SpeedBumpOverlapInfo speed_bump_overlap_info = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_speed_bump_overlap_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.hdmap.ParkingSpaceOverlapInfo parking_space_overlap_info = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parking_space_overlap_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.hdmap.PNCJunctionOverlapInfo pnc_junction_overlap_info = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pnc_junction_overlap_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.hdmap.RSUOverlapInfo rsu_overlap_info = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsu_overlap_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.ObjectOverlapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.ObjectOverlapInfo)
  return false;
#undef DO_
}

void ObjectOverlapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.ObjectOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  switch (overlap_info_case()) {
    case kLaneOverlapInfo:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, *overlap_info_.lane_overlap_info_, output);
      break;
    case kSignalOverlapInfo:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, *overlap_info_.signal_overlap_info_, output);
      break;
    case kStopSignOverlapInfo:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, *overlap_info_.stop_sign_overlap_info_, output);
      break;
    case kCrosswalkOverlapInfo:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, *overlap_info_.crosswalk_overlap_info_, output);
      break;
    case kJunctionOverlapInfo:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, *overlap_info_.junction_overlap_info_, output);
      break;
    case kYieldSignOverlapInfo:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        8, *overlap_info_.yield_sign_overlap_info_, output);
      break;
    case kClearAreaOverlapInfo:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        9, *overlap_info_.clear_area_overlap_info_, output);
      break;
    case kSpeedBumpOverlapInfo:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        10, *overlap_info_.speed_bump_overlap_info_, output);
      break;
    case kParkingSpaceOverlapInfo:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        11, *overlap_info_.parking_space_overlap_info_, output);
      break;
    case kPncJunctionOverlapInfo:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        12, *overlap_info_.pnc_junction_overlap_info_, output);
      break;
    case kRsuOverlapInfo:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        13, *overlap_info_.rsu_overlap_info_, output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.ObjectOverlapInfo)
}

::google::protobuf::uint8* ObjectOverlapInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.ObjectOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, deterministic, target);
  }

  switch (overlap_info_case()) {
    case kLaneOverlapInfo:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          3, *overlap_info_.lane_overlap_info_, deterministic, target);
      break;
    case kSignalOverlapInfo:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          4, *overlap_info_.signal_overlap_info_, deterministic, target);
      break;
    case kStopSignOverlapInfo:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          5, *overlap_info_.stop_sign_overlap_info_, deterministic, target);
      break;
    case kCrosswalkOverlapInfo:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          6, *overlap_info_.crosswalk_overlap_info_, deterministic, target);
      break;
    case kJunctionOverlapInfo:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          7, *overlap_info_.junction_overlap_info_, deterministic, target);
      break;
    case kYieldSignOverlapInfo:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          8, *overlap_info_.yield_sign_overlap_info_, deterministic, target);
      break;
    case kClearAreaOverlapInfo:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          9, *overlap_info_.clear_area_overlap_info_, deterministic, target);
      break;
    case kSpeedBumpOverlapInfo:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          10, *overlap_info_.speed_bump_overlap_info_, deterministic, target);
      break;
    case kParkingSpaceOverlapInfo:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          11, *overlap_info_.parking_space_overlap_info_, deterministic, target);
      break;
    case kPncJunctionOverlapInfo:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          12, *overlap_info_.pnc_junction_overlap_info_, deterministic, target);
      break;
    case kRsuOverlapInfo:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          13, *overlap_info_.rsu_overlap_info_, deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.ObjectOverlapInfo)
  return target;
}

size_t ObjectOverlapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.ObjectOverlapInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .apollo.hdmap.Id id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->id_);
  }

  switch (overlap_info_case()) {
    // optional .apollo.hdmap.LaneOverlapInfo lane_overlap_info = 3;
    case kLaneOverlapInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *overlap_info_.lane_overlap_info_);
      break;
    }
    // optional .apollo.hdmap.SignalOverlapInfo signal_overlap_info = 4;
    case kSignalOverlapInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *overlap_info_.signal_overlap_info_);
      break;
    }
    // optional .apollo.hdmap.StopSignOverlapInfo stop_sign_overlap_info = 5;
    case kStopSignOverlapInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *overlap_info_.stop_sign_overlap_info_);
      break;
    }
    // optional .apollo.hdmap.CrosswalkOverlapInfo crosswalk_overlap_info = 6;
    case kCrosswalkOverlapInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *overlap_info_.crosswalk_overlap_info_);
      break;
    }
    // optional .apollo.hdmap.JunctionOverlapInfo junction_overlap_info = 7;
    case kJunctionOverlapInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *overlap_info_.junction_overlap_info_);
      break;
    }
    // optional .apollo.hdmap.YieldOverlapInfo yield_sign_overlap_info = 8;
    case kYieldSignOverlapInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *overlap_info_.yield_sign_overlap_info_);
      break;
    }
    // optional .apollo.hdmap.ClearAreaOverlapInfo clear_area_overlap_info = 9;
    case kClearAreaOverlapInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *overlap_info_.clear_area_overlap_info_);
      break;
    }
    // optional .apollo.hdmap.SpeedBumpOverlapInfo speed_bump_overlap_info = 10;
    case kSpeedBumpOverlapInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *overlap_info_.speed_bump_overlap_info_);
      break;
    }
    // optional .apollo.hdmap.ParkingSpaceOverlapInfo parking_space_overlap_info = 11;
    case kParkingSpaceOverlapInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *overlap_info_.parking_space_overlap_info_);
      break;
    }
    // optional .apollo.hdmap.PNCJunctionOverlapInfo pnc_junction_overlap_info = 12;
    case kPncJunctionOverlapInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *overlap_info_.pnc_junction_overlap_info_);
      break;
    }
    // optional .apollo.hdmap.RSUOverlapInfo rsu_overlap_info = 13;
    case kRsuOverlapInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *overlap_info_.rsu_overlap_info_);
      break;
    }
    case OVERLAP_INFO_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectOverlapInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.ObjectOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectOverlapInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectOverlapInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.ObjectOverlapInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.ObjectOverlapInfo)
    MergeFrom(*source);
  }
}

void ObjectOverlapInfo::MergeFrom(const ObjectOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.ObjectOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::apollo::hdmap::Id::MergeFrom(from.id());
  }
  switch (from.overlap_info_case()) {
    case kLaneOverlapInfo: {
      mutable_lane_overlap_info()->::apollo::hdmap::LaneOverlapInfo::MergeFrom(from.lane_overlap_info());
      break;
    }
    case kSignalOverlapInfo: {
      mutable_signal_overlap_info()->::apollo::hdmap::SignalOverlapInfo::MergeFrom(from.signal_overlap_info());
      break;
    }
    case kStopSignOverlapInfo: {
      mutable_stop_sign_overlap_info()->::apollo::hdmap::StopSignOverlapInfo::MergeFrom(from.stop_sign_overlap_info());
      break;
    }
    case kCrosswalkOverlapInfo: {
      mutable_crosswalk_overlap_info()->::apollo::hdmap::CrosswalkOverlapInfo::MergeFrom(from.crosswalk_overlap_info());
      break;
    }
    case kJunctionOverlapInfo: {
      mutable_junction_overlap_info()->::apollo::hdmap::JunctionOverlapInfo::MergeFrom(from.junction_overlap_info());
      break;
    }
    case kYieldSignOverlapInfo: {
      mutable_yield_sign_overlap_info()->::apollo::hdmap::YieldOverlapInfo::MergeFrom(from.yield_sign_overlap_info());
      break;
    }
    case kClearAreaOverlapInfo: {
      mutable_clear_area_overlap_info()->::apollo::hdmap::ClearAreaOverlapInfo::MergeFrom(from.clear_area_overlap_info());
      break;
    }
    case kSpeedBumpOverlapInfo: {
      mutable_speed_bump_overlap_info()->::apollo::hdmap::SpeedBumpOverlapInfo::MergeFrom(from.speed_bump_overlap_info());
      break;
    }
    case kParkingSpaceOverlapInfo: {
      mutable_parking_space_overlap_info()->::apollo::hdmap::ParkingSpaceOverlapInfo::MergeFrom(from.parking_space_overlap_info());
      break;
    }
    case kPncJunctionOverlapInfo: {
      mutable_pnc_junction_overlap_info()->::apollo::hdmap::PNCJunctionOverlapInfo::MergeFrom(from.pnc_junction_overlap_info());
      break;
    }
    case kRsuOverlapInfo: {
      mutable_rsu_overlap_info()->::apollo::hdmap::RSUOverlapInfo::MergeFrom(from.rsu_overlap_info());
      break;
    }
    case OVERLAP_INFO_NOT_SET: {
      break;
    }
  }
}

void ObjectOverlapInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.ObjectOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectOverlapInfo::CopyFrom(const ObjectOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.ObjectOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectOverlapInfo::IsInitialized() const {
  return true;
}

void ObjectOverlapInfo::Swap(ObjectOverlapInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectOverlapInfo::InternalSwap(ObjectOverlapInfo* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(overlap_info_, other->overlap_info_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectOverlapInfo::GetMetadata() const {
  protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectOverlapInfo

// optional .apollo.hdmap.Id id = 1;
bool ObjectOverlapInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObjectOverlapInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ObjectOverlapInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObjectOverlapInfo::clear_id() {
  if (id_ != NULL) id_->::apollo::hdmap::Id::Clear();
  clear_has_id();
}
const ::apollo::hdmap::Id& ObjectOverlapInfo::id() const {
  const ::apollo::hdmap::Id* p = id_;
  // @@protoc_insertion_point(field_get:apollo.hdmap.ObjectOverlapInfo.id)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::hdmap::Id*>(
      &::apollo::hdmap::_Id_default_instance_);
}
::apollo::hdmap::Id* ObjectOverlapInfo::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::apollo::hdmap::Id;
  }
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.ObjectOverlapInfo.id)
  return id_;
}
::apollo::hdmap::Id* ObjectOverlapInfo::release_id() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.ObjectOverlapInfo.id)
  clear_has_id();
  ::apollo::hdmap::Id* temp = id_;
  id_ = NULL;
  return temp;
}
void ObjectOverlapInfo::set_allocated_id(::apollo::hdmap::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.ObjectOverlapInfo.id)
}

// optional .apollo.hdmap.LaneOverlapInfo lane_overlap_info = 3;
bool ObjectOverlapInfo::has_lane_overlap_info() const {
  return overlap_info_case() == kLaneOverlapInfo;
}
void ObjectOverlapInfo::set_has_lane_overlap_info() {
  _oneof_case_[0] = kLaneOverlapInfo;
}
void ObjectOverlapInfo::clear_lane_overlap_info() {
  if (has_lane_overlap_info()) {
    delete overlap_info_.lane_overlap_info_;
    clear_has_overlap_info();
  }
}
 const ::apollo::hdmap::LaneOverlapInfo& ObjectOverlapInfo::lane_overlap_info() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.ObjectOverlapInfo.lane_overlap_info)
  return has_lane_overlap_info()
      ? *overlap_info_.lane_overlap_info_
      : ::apollo::hdmap::LaneOverlapInfo::default_instance();
}
::apollo::hdmap::LaneOverlapInfo* ObjectOverlapInfo::mutable_lane_overlap_info() {
  if (!has_lane_overlap_info()) {
    clear_overlap_info();
    set_has_lane_overlap_info();
    overlap_info_.lane_overlap_info_ = new ::apollo::hdmap::LaneOverlapInfo;
  }
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.ObjectOverlapInfo.lane_overlap_info)
  return overlap_info_.lane_overlap_info_;
}
::apollo::hdmap::LaneOverlapInfo* ObjectOverlapInfo::release_lane_overlap_info() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.ObjectOverlapInfo.lane_overlap_info)
  if (has_lane_overlap_info()) {
    clear_has_overlap_info();
    ::apollo::hdmap::LaneOverlapInfo* temp = overlap_info_.lane_overlap_info_;
    overlap_info_.lane_overlap_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ObjectOverlapInfo::set_allocated_lane_overlap_info(::apollo::hdmap::LaneOverlapInfo* lane_overlap_info) {
  clear_overlap_info();
  if (lane_overlap_info) {
    set_has_lane_overlap_info();
    overlap_info_.lane_overlap_info_ = lane_overlap_info;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.ObjectOverlapInfo.lane_overlap_info)
}

// optional .apollo.hdmap.SignalOverlapInfo signal_overlap_info = 4;
bool ObjectOverlapInfo::has_signal_overlap_info() const {
  return overlap_info_case() == kSignalOverlapInfo;
}
void ObjectOverlapInfo::set_has_signal_overlap_info() {
  _oneof_case_[0] = kSignalOverlapInfo;
}
void ObjectOverlapInfo::clear_signal_overlap_info() {
  if (has_signal_overlap_info()) {
    delete overlap_info_.signal_overlap_info_;
    clear_has_overlap_info();
  }
}
 const ::apollo::hdmap::SignalOverlapInfo& ObjectOverlapInfo::signal_overlap_info() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.ObjectOverlapInfo.signal_overlap_info)
  return has_signal_overlap_info()
      ? *overlap_info_.signal_overlap_info_
      : ::apollo::hdmap::SignalOverlapInfo::default_instance();
}
::apollo::hdmap::SignalOverlapInfo* ObjectOverlapInfo::mutable_signal_overlap_info() {
  if (!has_signal_overlap_info()) {
    clear_overlap_info();
    set_has_signal_overlap_info();
    overlap_info_.signal_overlap_info_ = new ::apollo::hdmap::SignalOverlapInfo;
  }
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.ObjectOverlapInfo.signal_overlap_info)
  return overlap_info_.signal_overlap_info_;
}
::apollo::hdmap::SignalOverlapInfo* ObjectOverlapInfo::release_signal_overlap_info() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.ObjectOverlapInfo.signal_overlap_info)
  if (has_signal_overlap_info()) {
    clear_has_overlap_info();
    ::apollo::hdmap::SignalOverlapInfo* temp = overlap_info_.signal_overlap_info_;
    overlap_info_.signal_overlap_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ObjectOverlapInfo::set_allocated_signal_overlap_info(::apollo::hdmap::SignalOverlapInfo* signal_overlap_info) {
  clear_overlap_info();
  if (signal_overlap_info) {
    set_has_signal_overlap_info();
    overlap_info_.signal_overlap_info_ = signal_overlap_info;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.ObjectOverlapInfo.signal_overlap_info)
}

// optional .apollo.hdmap.StopSignOverlapInfo stop_sign_overlap_info = 5;
bool ObjectOverlapInfo::has_stop_sign_overlap_info() const {
  return overlap_info_case() == kStopSignOverlapInfo;
}
void ObjectOverlapInfo::set_has_stop_sign_overlap_info() {
  _oneof_case_[0] = kStopSignOverlapInfo;
}
void ObjectOverlapInfo::clear_stop_sign_overlap_info() {
  if (has_stop_sign_overlap_info()) {
    delete overlap_info_.stop_sign_overlap_info_;
    clear_has_overlap_info();
  }
}
 const ::apollo::hdmap::StopSignOverlapInfo& ObjectOverlapInfo::stop_sign_overlap_info() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.ObjectOverlapInfo.stop_sign_overlap_info)
  return has_stop_sign_overlap_info()
      ? *overlap_info_.stop_sign_overlap_info_
      : ::apollo::hdmap::StopSignOverlapInfo::default_instance();
}
::apollo::hdmap::StopSignOverlapInfo* ObjectOverlapInfo::mutable_stop_sign_overlap_info() {
  if (!has_stop_sign_overlap_info()) {
    clear_overlap_info();
    set_has_stop_sign_overlap_info();
    overlap_info_.stop_sign_overlap_info_ = new ::apollo::hdmap::StopSignOverlapInfo;
  }
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.ObjectOverlapInfo.stop_sign_overlap_info)
  return overlap_info_.stop_sign_overlap_info_;
}
::apollo::hdmap::StopSignOverlapInfo* ObjectOverlapInfo::release_stop_sign_overlap_info() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.ObjectOverlapInfo.stop_sign_overlap_info)
  if (has_stop_sign_overlap_info()) {
    clear_has_overlap_info();
    ::apollo::hdmap::StopSignOverlapInfo* temp = overlap_info_.stop_sign_overlap_info_;
    overlap_info_.stop_sign_overlap_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ObjectOverlapInfo::set_allocated_stop_sign_overlap_info(::apollo::hdmap::StopSignOverlapInfo* stop_sign_overlap_info) {
  clear_overlap_info();
  if (stop_sign_overlap_info) {
    set_has_stop_sign_overlap_info();
    overlap_info_.stop_sign_overlap_info_ = stop_sign_overlap_info;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.ObjectOverlapInfo.stop_sign_overlap_info)
}

// optional .apollo.hdmap.CrosswalkOverlapInfo crosswalk_overlap_info = 6;
bool ObjectOverlapInfo::has_crosswalk_overlap_info() const {
  return overlap_info_case() == kCrosswalkOverlapInfo;
}
void ObjectOverlapInfo::set_has_crosswalk_overlap_info() {
  _oneof_case_[0] = kCrosswalkOverlapInfo;
}
void ObjectOverlapInfo::clear_crosswalk_overlap_info() {
  if (has_crosswalk_overlap_info()) {
    delete overlap_info_.crosswalk_overlap_info_;
    clear_has_overlap_info();
  }
}
 const ::apollo::hdmap::CrosswalkOverlapInfo& ObjectOverlapInfo::crosswalk_overlap_info() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.ObjectOverlapInfo.crosswalk_overlap_info)
  return has_crosswalk_overlap_info()
      ? *overlap_info_.crosswalk_overlap_info_
      : ::apollo::hdmap::CrosswalkOverlapInfo::default_instance();
}
::apollo::hdmap::CrosswalkOverlapInfo* ObjectOverlapInfo::mutable_crosswalk_overlap_info() {
  if (!has_crosswalk_overlap_info()) {
    clear_overlap_info();
    set_has_crosswalk_overlap_info();
    overlap_info_.crosswalk_overlap_info_ = new ::apollo::hdmap::CrosswalkOverlapInfo;
  }
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.ObjectOverlapInfo.crosswalk_overlap_info)
  return overlap_info_.crosswalk_overlap_info_;
}
::apollo::hdmap::CrosswalkOverlapInfo* ObjectOverlapInfo::release_crosswalk_overlap_info() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.ObjectOverlapInfo.crosswalk_overlap_info)
  if (has_crosswalk_overlap_info()) {
    clear_has_overlap_info();
    ::apollo::hdmap::CrosswalkOverlapInfo* temp = overlap_info_.crosswalk_overlap_info_;
    overlap_info_.crosswalk_overlap_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ObjectOverlapInfo::set_allocated_crosswalk_overlap_info(::apollo::hdmap::CrosswalkOverlapInfo* crosswalk_overlap_info) {
  clear_overlap_info();
  if (crosswalk_overlap_info) {
    set_has_crosswalk_overlap_info();
    overlap_info_.crosswalk_overlap_info_ = crosswalk_overlap_info;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.ObjectOverlapInfo.crosswalk_overlap_info)
}

// optional .apollo.hdmap.JunctionOverlapInfo junction_overlap_info = 7;
bool ObjectOverlapInfo::has_junction_overlap_info() const {
  return overlap_info_case() == kJunctionOverlapInfo;
}
void ObjectOverlapInfo::set_has_junction_overlap_info() {
  _oneof_case_[0] = kJunctionOverlapInfo;
}
void ObjectOverlapInfo::clear_junction_overlap_info() {
  if (has_junction_overlap_info()) {
    delete overlap_info_.junction_overlap_info_;
    clear_has_overlap_info();
  }
}
 const ::apollo::hdmap::JunctionOverlapInfo& ObjectOverlapInfo::junction_overlap_info() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.ObjectOverlapInfo.junction_overlap_info)
  return has_junction_overlap_info()
      ? *overlap_info_.junction_overlap_info_
      : ::apollo::hdmap::JunctionOverlapInfo::default_instance();
}
::apollo::hdmap::JunctionOverlapInfo* ObjectOverlapInfo::mutable_junction_overlap_info() {
  if (!has_junction_overlap_info()) {
    clear_overlap_info();
    set_has_junction_overlap_info();
    overlap_info_.junction_overlap_info_ = new ::apollo::hdmap::JunctionOverlapInfo;
  }
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.ObjectOverlapInfo.junction_overlap_info)
  return overlap_info_.junction_overlap_info_;
}
::apollo::hdmap::JunctionOverlapInfo* ObjectOverlapInfo::release_junction_overlap_info() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.ObjectOverlapInfo.junction_overlap_info)
  if (has_junction_overlap_info()) {
    clear_has_overlap_info();
    ::apollo::hdmap::JunctionOverlapInfo* temp = overlap_info_.junction_overlap_info_;
    overlap_info_.junction_overlap_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ObjectOverlapInfo::set_allocated_junction_overlap_info(::apollo::hdmap::JunctionOverlapInfo* junction_overlap_info) {
  clear_overlap_info();
  if (junction_overlap_info) {
    set_has_junction_overlap_info();
    overlap_info_.junction_overlap_info_ = junction_overlap_info;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.ObjectOverlapInfo.junction_overlap_info)
}

// optional .apollo.hdmap.YieldOverlapInfo yield_sign_overlap_info = 8;
bool ObjectOverlapInfo::has_yield_sign_overlap_info() const {
  return overlap_info_case() == kYieldSignOverlapInfo;
}
void ObjectOverlapInfo::set_has_yield_sign_overlap_info() {
  _oneof_case_[0] = kYieldSignOverlapInfo;
}
void ObjectOverlapInfo::clear_yield_sign_overlap_info() {
  if (has_yield_sign_overlap_info()) {
    delete overlap_info_.yield_sign_overlap_info_;
    clear_has_overlap_info();
  }
}
 const ::apollo::hdmap::YieldOverlapInfo& ObjectOverlapInfo::yield_sign_overlap_info() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.ObjectOverlapInfo.yield_sign_overlap_info)
  return has_yield_sign_overlap_info()
      ? *overlap_info_.yield_sign_overlap_info_
      : ::apollo::hdmap::YieldOverlapInfo::default_instance();
}
::apollo::hdmap::YieldOverlapInfo* ObjectOverlapInfo::mutable_yield_sign_overlap_info() {
  if (!has_yield_sign_overlap_info()) {
    clear_overlap_info();
    set_has_yield_sign_overlap_info();
    overlap_info_.yield_sign_overlap_info_ = new ::apollo::hdmap::YieldOverlapInfo;
  }
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.ObjectOverlapInfo.yield_sign_overlap_info)
  return overlap_info_.yield_sign_overlap_info_;
}
::apollo::hdmap::YieldOverlapInfo* ObjectOverlapInfo::release_yield_sign_overlap_info() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.ObjectOverlapInfo.yield_sign_overlap_info)
  if (has_yield_sign_overlap_info()) {
    clear_has_overlap_info();
    ::apollo::hdmap::YieldOverlapInfo* temp = overlap_info_.yield_sign_overlap_info_;
    overlap_info_.yield_sign_overlap_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ObjectOverlapInfo::set_allocated_yield_sign_overlap_info(::apollo::hdmap::YieldOverlapInfo* yield_sign_overlap_info) {
  clear_overlap_info();
  if (yield_sign_overlap_info) {
    set_has_yield_sign_overlap_info();
    overlap_info_.yield_sign_overlap_info_ = yield_sign_overlap_info;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.ObjectOverlapInfo.yield_sign_overlap_info)
}

// optional .apollo.hdmap.ClearAreaOverlapInfo clear_area_overlap_info = 9;
bool ObjectOverlapInfo::has_clear_area_overlap_info() const {
  return overlap_info_case() == kClearAreaOverlapInfo;
}
void ObjectOverlapInfo::set_has_clear_area_overlap_info() {
  _oneof_case_[0] = kClearAreaOverlapInfo;
}
void ObjectOverlapInfo::clear_clear_area_overlap_info() {
  if (has_clear_area_overlap_info()) {
    delete overlap_info_.clear_area_overlap_info_;
    clear_has_overlap_info();
  }
}
 const ::apollo::hdmap::ClearAreaOverlapInfo& ObjectOverlapInfo::clear_area_overlap_info() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.ObjectOverlapInfo.clear_area_overlap_info)
  return has_clear_area_overlap_info()
      ? *overlap_info_.clear_area_overlap_info_
      : ::apollo::hdmap::ClearAreaOverlapInfo::default_instance();
}
::apollo::hdmap::ClearAreaOverlapInfo* ObjectOverlapInfo::mutable_clear_area_overlap_info() {
  if (!has_clear_area_overlap_info()) {
    clear_overlap_info();
    set_has_clear_area_overlap_info();
    overlap_info_.clear_area_overlap_info_ = new ::apollo::hdmap::ClearAreaOverlapInfo;
  }
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.ObjectOverlapInfo.clear_area_overlap_info)
  return overlap_info_.clear_area_overlap_info_;
}
::apollo::hdmap::ClearAreaOverlapInfo* ObjectOverlapInfo::release_clear_area_overlap_info() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.ObjectOverlapInfo.clear_area_overlap_info)
  if (has_clear_area_overlap_info()) {
    clear_has_overlap_info();
    ::apollo::hdmap::ClearAreaOverlapInfo* temp = overlap_info_.clear_area_overlap_info_;
    overlap_info_.clear_area_overlap_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ObjectOverlapInfo::set_allocated_clear_area_overlap_info(::apollo::hdmap::ClearAreaOverlapInfo* clear_area_overlap_info) {
  clear_overlap_info();
  if (clear_area_overlap_info) {
    set_has_clear_area_overlap_info();
    overlap_info_.clear_area_overlap_info_ = clear_area_overlap_info;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.ObjectOverlapInfo.clear_area_overlap_info)
}

// optional .apollo.hdmap.SpeedBumpOverlapInfo speed_bump_overlap_info = 10;
bool ObjectOverlapInfo::has_speed_bump_overlap_info() const {
  return overlap_info_case() == kSpeedBumpOverlapInfo;
}
void ObjectOverlapInfo::set_has_speed_bump_overlap_info() {
  _oneof_case_[0] = kSpeedBumpOverlapInfo;
}
void ObjectOverlapInfo::clear_speed_bump_overlap_info() {
  if (has_speed_bump_overlap_info()) {
    delete overlap_info_.speed_bump_overlap_info_;
    clear_has_overlap_info();
  }
}
 const ::apollo::hdmap::SpeedBumpOverlapInfo& ObjectOverlapInfo::speed_bump_overlap_info() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.ObjectOverlapInfo.speed_bump_overlap_info)
  return has_speed_bump_overlap_info()
      ? *overlap_info_.speed_bump_overlap_info_
      : ::apollo::hdmap::SpeedBumpOverlapInfo::default_instance();
}
::apollo::hdmap::SpeedBumpOverlapInfo* ObjectOverlapInfo::mutable_speed_bump_overlap_info() {
  if (!has_speed_bump_overlap_info()) {
    clear_overlap_info();
    set_has_speed_bump_overlap_info();
    overlap_info_.speed_bump_overlap_info_ = new ::apollo::hdmap::SpeedBumpOverlapInfo;
  }
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.ObjectOverlapInfo.speed_bump_overlap_info)
  return overlap_info_.speed_bump_overlap_info_;
}
::apollo::hdmap::SpeedBumpOverlapInfo* ObjectOverlapInfo::release_speed_bump_overlap_info() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.ObjectOverlapInfo.speed_bump_overlap_info)
  if (has_speed_bump_overlap_info()) {
    clear_has_overlap_info();
    ::apollo::hdmap::SpeedBumpOverlapInfo* temp = overlap_info_.speed_bump_overlap_info_;
    overlap_info_.speed_bump_overlap_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ObjectOverlapInfo::set_allocated_speed_bump_overlap_info(::apollo::hdmap::SpeedBumpOverlapInfo* speed_bump_overlap_info) {
  clear_overlap_info();
  if (speed_bump_overlap_info) {
    set_has_speed_bump_overlap_info();
    overlap_info_.speed_bump_overlap_info_ = speed_bump_overlap_info;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.ObjectOverlapInfo.speed_bump_overlap_info)
}

// optional .apollo.hdmap.ParkingSpaceOverlapInfo parking_space_overlap_info = 11;
bool ObjectOverlapInfo::has_parking_space_overlap_info() const {
  return overlap_info_case() == kParkingSpaceOverlapInfo;
}
void ObjectOverlapInfo::set_has_parking_space_overlap_info() {
  _oneof_case_[0] = kParkingSpaceOverlapInfo;
}
void ObjectOverlapInfo::clear_parking_space_overlap_info() {
  if (has_parking_space_overlap_info()) {
    delete overlap_info_.parking_space_overlap_info_;
    clear_has_overlap_info();
  }
}
 const ::apollo::hdmap::ParkingSpaceOverlapInfo& ObjectOverlapInfo::parking_space_overlap_info() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.ObjectOverlapInfo.parking_space_overlap_info)
  return has_parking_space_overlap_info()
      ? *overlap_info_.parking_space_overlap_info_
      : ::apollo::hdmap::ParkingSpaceOverlapInfo::default_instance();
}
::apollo::hdmap::ParkingSpaceOverlapInfo* ObjectOverlapInfo::mutable_parking_space_overlap_info() {
  if (!has_parking_space_overlap_info()) {
    clear_overlap_info();
    set_has_parking_space_overlap_info();
    overlap_info_.parking_space_overlap_info_ = new ::apollo::hdmap::ParkingSpaceOverlapInfo;
  }
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.ObjectOverlapInfo.parking_space_overlap_info)
  return overlap_info_.parking_space_overlap_info_;
}
::apollo::hdmap::ParkingSpaceOverlapInfo* ObjectOverlapInfo::release_parking_space_overlap_info() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.ObjectOverlapInfo.parking_space_overlap_info)
  if (has_parking_space_overlap_info()) {
    clear_has_overlap_info();
    ::apollo::hdmap::ParkingSpaceOverlapInfo* temp = overlap_info_.parking_space_overlap_info_;
    overlap_info_.parking_space_overlap_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ObjectOverlapInfo::set_allocated_parking_space_overlap_info(::apollo::hdmap::ParkingSpaceOverlapInfo* parking_space_overlap_info) {
  clear_overlap_info();
  if (parking_space_overlap_info) {
    set_has_parking_space_overlap_info();
    overlap_info_.parking_space_overlap_info_ = parking_space_overlap_info;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.ObjectOverlapInfo.parking_space_overlap_info)
}

// optional .apollo.hdmap.PNCJunctionOverlapInfo pnc_junction_overlap_info = 12;
bool ObjectOverlapInfo::has_pnc_junction_overlap_info() const {
  return overlap_info_case() == kPncJunctionOverlapInfo;
}
void ObjectOverlapInfo::set_has_pnc_junction_overlap_info() {
  _oneof_case_[0] = kPncJunctionOverlapInfo;
}
void ObjectOverlapInfo::clear_pnc_junction_overlap_info() {
  if (has_pnc_junction_overlap_info()) {
    delete overlap_info_.pnc_junction_overlap_info_;
    clear_has_overlap_info();
  }
}
 const ::apollo::hdmap::PNCJunctionOverlapInfo& ObjectOverlapInfo::pnc_junction_overlap_info() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.ObjectOverlapInfo.pnc_junction_overlap_info)
  return has_pnc_junction_overlap_info()
      ? *overlap_info_.pnc_junction_overlap_info_
      : ::apollo::hdmap::PNCJunctionOverlapInfo::default_instance();
}
::apollo::hdmap::PNCJunctionOverlapInfo* ObjectOverlapInfo::mutable_pnc_junction_overlap_info() {
  if (!has_pnc_junction_overlap_info()) {
    clear_overlap_info();
    set_has_pnc_junction_overlap_info();
    overlap_info_.pnc_junction_overlap_info_ = new ::apollo::hdmap::PNCJunctionOverlapInfo;
  }
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.ObjectOverlapInfo.pnc_junction_overlap_info)
  return overlap_info_.pnc_junction_overlap_info_;
}
::apollo::hdmap::PNCJunctionOverlapInfo* ObjectOverlapInfo::release_pnc_junction_overlap_info() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.ObjectOverlapInfo.pnc_junction_overlap_info)
  if (has_pnc_junction_overlap_info()) {
    clear_has_overlap_info();
    ::apollo::hdmap::PNCJunctionOverlapInfo* temp = overlap_info_.pnc_junction_overlap_info_;
    overlap_info_.pnc_junction_overlap_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ObjectOverlapInfo::set_allocated_pnc_junction_overlap_info(::apollo::hdmap::PNCJunctionOverlapInfo* pnc_junction_overlap_info) {
  clear_overlap_info();
  if (pnc_junction_overlap_info) {
    set_has_pnc_junction_overlap_info();
    overlap_info_.pnc_junction_overlap_info_ = pnc_junction_overlap_info;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.ObjectOverlapInfo.pnc_junction_overlap_info)
}

// optional .apollo.hdmap.RSUOverlapInfo rsu_overlap_info = 13;
bool ObjectOverlapInfo::has_rsu_overlap_info() const {
  return overlap_info_case() == kRsuOverlapInfo;
}
void ObjectOverlapInfo::set_has_rsu_overlap_info() {
  _oneof_case_[0] = kRsuOverlapInfo;
}
void ObjectOverlapInfo::clear_rsu_overlap_info() {
  if (has_rsu_overlap_info()) {
    delete overlap_info_.rsu_overlap_info_;
    clear_has_overlap_info();
  }
}
 const ::apollo::hdmap::RSUOverlapInfo& ObjectOverlapInfo::rsu_overlap_info() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.ObjectOverlapInfo.rsu_overlap_info)
  return has_rsu_overlap_info()
      ? *overlap_info_.rsu_overlap_info_
      : ::apollo::hdmap::RSUOverlapInfo::default_instance();
}
::apollo::hdmap::RSUOverlapInfo* ObjectOverlapInfo::mutable_rsu_overlap_info() {
  if (!has_rsu_overlap_info()) {
    clear_overlap_info();
    set_has_rsu_overlap_info();
    overlap_info_.rsu_overlap_info_ = new ::apollo::hdmap::RSUOverlapInfo;
  }
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.ObjectOverlapInfo.rsu_overlap_info)
  return overlap_info_.rsu_overlap_info_;
}
::apollo::hdmap::RSUOverlapInfo* ObjectOverlapInfo::release_rsu_overlap_info() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.ObjectOverlapInfo.rsu_overlap_info)
  if (has_rsu_overlap_info()) {
    clear_has_overlap_info();
    ::apollo::hdmap::RSUOverlapInfo* temp = overlap_info_.rsu_overlap_info_;
    overlap_info_.rsu_overlap_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ObjectOverlapInfo::set_allocated_rsu_overlap_info(::apollo::hdmap::RSUOverlapInfo* rsu_overlap_info) {
  clear_overlap_info();
  if (rsu_overlap_info) {
    set_has_rsu_overlap_info();
    overlap_info_.rsu_overlap_info_ = rsu_overlap_info;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.ObjectOverlapInfo.rsu_overlap_info)
}

bool ObjectOverlapInfo::has_overlap_info() const {
  return overlap_info_case() != OVERLAP_INFO_NOT_SET;
}
void ObjectOverlapInfo::clear_has_overlap_info() {
  _oneof_case_[0] = OVERLAP_INFO_NOT_SET;
}
ObjectOverlapInfo::OverlapInfoCase ObjectOverlapInfo::overlap_info_case() const {
  return ObjectOverlapInfo::OverlapInfoCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Overlap::kIdFieldNumber;
const int Overlap::kObjectFieldNumber;
const int Overlap::kRegionOverlapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Overlap::Overlap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_map_5foverlap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.Overlap)
}
Overlap::Overlap(const Overlap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      object_(from.object_),
      region_overlap_(from.region_overlap_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::apollo::hdmap::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.Overlap)
}

void Overlap::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
}

Overlap::~Overlap() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.Overlap)
  SharedDtor();
}

void Overlap::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void Overlap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Overlap::descriptor() {
  protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Overlap& Overlap::default_instance() {
  protobuf_map_5foverlap_2eproto::InitDefaults();
  return *internal_default_instance();
}

Overlap* Overlap::New(::google::protobuf::Arena* arena) const {
  Overlap* n = new Overlap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Overlap::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.Overlap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_.Clear();
  region_overlap_.Clear();
  if (has_id()) {
    GOOGLE_DCHECK(id_ != NULL);
    id_->::apollo::hdmap::Id::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Overlap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.Overlap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.hdmap.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.ObjectOverlapInfo object = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_object()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.RegionOverlapInfo region_overlap = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_region_overlap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.Overlap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.Overlap)
  return false;
#undef DO_
}

void Overlap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.Overlap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // repeated .apollo.hdmap.ObjectOverlapInfo object = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->object(static_cast<int>(i)), output);
  }

  // repeated .apollo.hdmap.RegionOverlapInfo region_overlap = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->region_overlap_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->region_overlap(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.Overlap)
}

::google::protobuf::uint8* Overlap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.Overlap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, deterministic, target);
  }

  // repeated .apollo.hdmap.ObjectOverlapInfo object = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->object(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.hdmap.RegionOverlapInfo region_overlap = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->region_overlap_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->region_overlap(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.Overlap)
  return target;
}

size_t Overlap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.Overlap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.hdmap.ObjectOverlapInfo object = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->object_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->object(static_cast<int>(i)));
    }
  }

  // repeated .apollo.hdmap.RegionOverlapInfo region_overlap = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->region_overlap_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region_overlap(static_cast<int>(i)));
    }
  }

  // optional .apollo.hdmap.Id id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Overlap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.Overlap)
  GOOGLE_DCHECK_NE(&from, this);
  const Overlap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Overlap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.Overlap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.Overlap)
    MergeFrom(*source);
  }
}

void Overlap::MergeFrom(const Overlap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.Overlap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_.MergeFrom(from.object_);
  region_overlap_.MergeFrom(from.region_overlap_);
  if (from.has_id()) {
    mutable_id()->::apollo::hdmap::Id::MergeFrom(from.id());
  }
}

void Overlap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.Overlap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Overlap::CopyFrom(const Overlap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.Overlap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Overlap::IsInitialized() const {
  return true;
}

void Overlap::Swap(Overlap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Overlap::InternalSwap(Overlap* other) {
  using std::swap;
  object_.InternalSwap(&other->object_);
  region_overlap_.InternalSwap(&other->region_overlap_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Overlap::GetMetadata() const {
  protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Overlap

// optional .apollo.hdmap.Id id = 1;
bool Overlap::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Overlap::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Overlap::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Overlap::clear_id() {
  if (id_ != NULL) id_->::apollo::hdmap::Id::Clear();
  clear_has_id();
}
const ::apollo::hdmap::Id& Overlap::id() const {
  const ::apollo::hdmap::Id* p = id_;
  // @@protoc_insertion_point(field_get:apollo.hdmap.Overlap.id)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::hdmap::Id*>(
      &::apollo::hdmap::_Id_default_instance_);
}
::apollo::hdmap::Id* Overlap::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::apollo::hdmap::Id;
  }
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Overlap.id)
  return id_;
}
::apollo::hdmap::Id* Overlap::release_id() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.Overlap.id)
  clear_has_id();
  ::apollo::hdmap::Id* temp = id_;
  id_ = NULL;
  return temp;
}
void Overlap::set_allocated_id(::apollo::hdmap::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.Overlap.id)
}

// repeated .apollo.hdmap.ObjectOverlapInfo object = 2;
int Overlap::object_size() const {
  return object_.size();
}
void Overlap::clear_object() {
  object_.Clear();
}
const ::apollo::hdmap::ObjectOverlapInfo& Overlap::object(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Overlap.object)
  return object_.Get(index);
}
::apollo::hdmap::ObjectOverlapInfo* Overlap::mutable_object(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Overlap.object)
  return object_.Mutable(index);
}
::apollo::hdmap::ObjectOverlapInfo* Overlap::add_object() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.Overlap.object)
  return object_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::hdmap::ObjectOverlapInfo >*
Overlap::mutable_object() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Overlap.object)
  return &object_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::ObjectOverlapInfo >&
Overlap::object() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Overlap.object)
  return object_;
}

// repeated .apollo.hdmap.RegionOverlapInfo region_overlap = 3;
int Overlap::region_overlap_size() const {
  return region_overlap_.size();
}
void Overlap::clear_region_overlap() {
  region_overlap_.Clear();
}
const ::apollo::hdmap::RegionOverlapInfo& Overlap::region_overlap(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Overlap.region_overlap)
  return region_overlap_.Get(index);
}
::apollo::hdmap::RegionOverlapInfo* Overlap::mutable_region_overlap(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Overlap.region_overlap)
  return region_overlap_.Mutable(index);
}
::apollo::hdmap::RegionOverlapInfo* Overlap::add_region_overlap() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.Overlap.region_overlap)
  return region_overlap_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::hdmap::RegionOverlapInfo >*
Overlap::mutable_region_overlap() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Overlap.region_overlap)
  return &region_overlap_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::RegionOverlapInfo >&
Overlap::region_overlap() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Overlap.region_overlap)
  return region_overlap_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmap
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
