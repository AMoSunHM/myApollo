// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception_obstacle.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "perception_obstacle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace perception {
class BBox2DDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BBox2D>
     _instance;
} _BBox2D_default_instance_;
class LightStatusDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LightStatus>
     _instance;
} _LightStatus_default_instance_;
class V2XInformationDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<V2XInformation>
     _instance;
} _V2XInformation_default_instance_;
class SensorMeasurementDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SensorMeasurement>
     _instance;
} _SensorMeasurement_default_instance_;
class TrajectoryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Trajectory>
     _instance;
} _Trajectory_default_instance_;
class DebugMessageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DebugMessage>
     _instance;
} _DebugMessage_default_instance_;
class PerceptionObstacleDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PerceptionObstacle>
     _instance;
} _PerceptionObstacle_default_instance_;
class LaneMarkerDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LaneMarker>
     _instance;
} _LaneMarker_default_instance_;
class LaneMarkersDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LaneMarkers>
     _instance;
} _LaneMarkers_default_instance_;
class CIPVInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CIPVInfo>
     _instance;
} _CIPVInfo_default_instance_;
class PerceptionObstaclesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PerceptionObstacles>
     _instance;
} _PerceptionObstacles_default_instance_;

namespace protobuf_perception_5fobstacle_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[11];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBox2D, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBox2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBox2D, xmin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBox2D, ymin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBox2D, xmax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBox2D, ymax_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightStatus, brake_visible_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightStatus, brake_switch_on_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightStatus, left_turn_visible_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightStatus, left_turn_switch_on_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightStatus, right_turn_visible_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightStatus, right_turn_switch_on_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V2XInformation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V2XInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V2XInformation, v2x_type_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorMeasurement, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorMeasurement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorMeasurement, sensor_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorMeasurement, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorMeasurement, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorMeasurement, theta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorMeasurement, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorMeasurement, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorMeasurement, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorMeasurement, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorMeasurement, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorMeasurement, sub_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorMeasurement, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorMeasurement, box_),
  0,
  6,
  1,
  4,
  5,
  8,
  9,
  2,
  7,
  11,
  10,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, trajectory_point_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugMessage, trajectory_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, theta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, polygon_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, tracking_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, point_cloud_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, confidence_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, drops_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, anchor_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, bbox2d_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, sub_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, measurements_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, height_above_ground_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, position_covariance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, velocity_covariance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, acceleration_covariance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, light_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, v2x_info_),
  10,
  0,
  8,
  1,
  9,
  12,
  13,
  ~0u,
  14,
  11,
  15,
  ~0u,
  16,
  17,
  ~0u,
  2,
  3,
  4,
  18,
  ~0u,
  20,
  ~0u,
  ~0u,
  ~0u,
  5,
  6,
  19,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarker, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarker, lane_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarker, quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarker, model_degree_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarker, c0_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarker, c1_heading_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarker, c2_curvature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarker, c3_curvature_derivative_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarker, view_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarker, longitude_start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarker, longitude_end_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarkers, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarkers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarkers, left_lane_marker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarkers, right_lane_marker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarkers, next_left_lane_marker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarkers, next_right_lane_marker_),
  0,
  1,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CIPVInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CIPVInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CIPVInfo, cipv_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CIPVInfo, potential_cipv_id_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacles, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacles, perception_obstacle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacles, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacles, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacles, lane_marker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacles, cipv_info_),
  ~0u,
  0,
  3,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(BBox2D)},
  { 13, 24, sizeof(LightStatus)},
  { 30, 36, sizeof(V2XInformation)},
  { 37, 54, sizeof(SensorMeasurement)},
  { 66, 73, sizeof(Trajectory)},
  { 75, 81, sizeof(DebugMessage)},
  { 82, 115, sizeof(PerceptionObstacle)},
  { 143, 158, sizeof(LaneMarker)},
  { 168, 177, sizeof(LaneMarkers)},
  { 181, 188, sizeof(CIPVInfo)},
  { 190, 200, sizeof(PerceptionObstacles)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_BBox2D_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LightStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_V2XInformation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SensorMeasurement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Trajectory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DebugMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PerceptionObstacle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LaneMarker_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LaneMarkers_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CIPVInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PerceptionObstacles_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "perception_obstacle.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 11);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::apollo::common::protobuf_error_5fcode_2eproto::InitDefaults();
  ::apollo::common::protobuf_geometry_2eproto::InitDefaults();
  ::apollo::common::protobuf_header_2eproto::InitDefaults();
  ::apollo::common::protobuf_pnc_5fpoint_2eproto::InitDefaults();
  ::apollo::hdmap::protobuf_map_5flane_2eproto::InitDefaults();
  _BBox2D_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BBox2D_default_instance_);_LightStatus_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LightStatus_default_instance_);_V2XInformation_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_V2XInformation_default_instance_);_SensorMeasurement_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SensorMeasurement_default_instance_);_Trajectory_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Trajectory_default_instance_);_DebugMessage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DebugMessage_default_instance_);_PerceptionObstacle_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PerceptionObstacle_default_instance_);_LaneMarker_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LaneMarker_default_instance_);_LaneMarkers_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LaneMarkers_default_instance_);_CIPVInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CIPVInfo_default_instance_);_PerceptionObstacles_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PerceptionObstacles_default_instance_);_SensorMeasurement_default_instance_._instance.get_mutable()->position_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  _SensorMeasurement_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  _SensorMeasurement_default_instance_._instance.get_mutable()->box_ = const_cast< ::apollo::perception::BBox2D*>(
      ::apollo::perception::BBox2D::internal_default_instance());
  _PerceptionObstacle_default_instance_._instance.get_mutable()->position_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  _PerceptionObstacle_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  _PerceptionObstacle_default_instance_._instance.get_mutable()->acceleration_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  _PerceptionObstacle_default_instance_._instance.get_mutable()->anchor_point_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  _PerceptionObstacle_default_instance_._instance.get_mutable()->bbox2d_ = const_cast< ::apollo::perception::BBox2D*>(
      ::apollo::perception::BBox2D::internal_default_instance());
  _PerceptionObstacle_default_instance_._instance.get_mutable()->light_status_ = const_cast< ::apollo::perception::LightStatus*>(
      ::apollo::perception::LightStatus::internal_default_instance());
  _PerceptionObstacle_default_instance_._instance.get_mutable()->msg_ = const_cast< ::apollo::perception::DebugMessage*>(
      ::apollo::perception::DebugMessage::internal_default_instance());
  _PerceptionObstacle_default_instance_._instance.get_mutable()->v2x_info_ = const_cast< ::apollo::perception::V2XInformation*>(
      ::apollo::perception::V2XInformation::internal_default_instance());
  _LaneMarkers_default_instance_._instance.get_mutable()->left_lane_marker_ = const_cast< ::apollo::perception::LaneMarker*>(
      ::apollo::perception::LaneMarker::internal_default_instance());
  _LaneMarkers_default_instance_._instance.get_mutable()->right_lane_marker_ = const_cast< ::apollo::perception::LaneMarker*>(
      ::apollo::perception::LaneMarker::internal_default_instance());
  _PerceptionObstacles_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  _PerceptionObstacles_default_instance_._instance.get_mutable()->lane_marker_ = const_cast< ::apollo::perception::LaneMarkers*>(
      ::apollo::perception::LaneMarkers::internal_default_instance());
  _PerceptionObstacles_default_instance_._instance.get_mutable()->cipv_info_ = const_cast< ::apollo::perception::CIPVInfo*>(
      ::apollo::perception::CIPVInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\031perception_obstacle.proto\022\021apollo.perc"
      "eption\032\020error_code.proto\032\016geometry.proto"
      "\032\014header.proto\032\017pnc_point.proto\032\016map_lan"
      "e.proto\"@\n\006BBox2D\022\014\n\004xmin\030\001 \001(\001\022\014\n\004ymin\030"
      "\002 \001(\001\022\014\n\004xmax\030\003 \001(\001\022\014\n\004ymax\030\004 \001(\001\"\257\001\n\013Li"
      "ghtStatus\022\025\n\rbrake_visible\030\001 \001(\001\022\027\n\017brak"
      "e_switch_on\030\002 \001(\001\022\031\n\021left_turn_visible\030\003"
      " \001(\001\022\033\n\023left_turn_switch_on\030\004 \001(\001\022\032\n\022rig"
      "ht_turn_visible\030\005 \001(\001\022\034\n\024right_turn_swit"
      "ch_on\030\006 \001(\001\"\203\001\n\016V2XInformation\022;\n\010v2x_ty"
      "pe\030\001 \003(\0162).apollo.perception.V2XInformat"
      "ion.V2XType\"4\n\007V2XType\022\010\n\004NONE\020\000\022\017\n\013ZOMB"
      "IES_CAR\020\001\022\016\n\nBLIND_ZONE\020\002\"\372\002\n\021SensorMeas"
      "urement\022\021\n\tsensor_id\030\001 \001(\t\022\n\n\002id\030\002 \001(\005\022("
      "\n\010position\030\003 \001(\0132\026.apollo.common.Point3D"
      "\022\r\n\005theta\030\004 \001(\001\022\016\n\006length\030\005 \001(\001\022\r\n\005width"
      "\030\006 \001(\001\022\016\n\006height\030\007 \001(\001\022(\n\010velocity\030\010 \001(\013"
      "2\026.apollo.common.Point3D\0228\n\004type\030\t \001(\0162*"
      ".apollo.perception.PerceptionObstacle.Ty"
      "pe\022\?\n\010sub_type\030\n \001(\0162-.apollo.perception"
      ".PerceptionObstacle.SubType\022\021\n\ttimestamp"
      "\030\013 \001(\001\022&\n\003box\030\014 \001(\0132\031.apollo.perception."
      "BBox2D\"[\n\nTrajectory\022\023\n\013probability\030\001 \001("
      "\001\0228\n\020trajectory_point\030\002 \003(\0132\036.apollo.com"
      "mon.TrajectoryPoint\"A\n\014DebugMessage\0221\n\nt"
      "rajectory\030\001 \003(\0132\035.apollo.perception.Traj"
      "ectory\"\251\014\n\022PerceptionObstacle\022\n\n\002id\030\001 \001("
      "\005\022(\n\010position\030\002 \001(\0132\026.apollo.common.Poin"
      "t3D\022\r\n\005theta\030\003 \001(\001\022(\n\010velocity\030\004 \001(\0132\026.a"
      "pollo.common.Point3D\022\016\n\006length\030\005 \001(\001\022\r\n\005"
      "width\030\006 \001(\001\022\016\n\006height\030\007 \001(\001\022-\n\rpolygon_p"
      "oint\030\010 \003(\0132\026.apollo.common.Point3D\022\025\n\rtr"
      "acking_time\030\t \001(\001\0228\n\004type\030\n \001(\0162*.apollo"
      ".perception.PerceptionObstacle.Type\022\021\n\tt"
      "imestamp\030\013 \001(\001\022\027\n\013point_cloud\030\014 \003(\001B\002\020\001\022"
      "\026\n\nconfidence\030\r \001(\001B\002\030\001\022Q\n\017confidence_ty"
      "pe\030\016 \001(\01624.apollo.perception.PerceptionO"
      "bstacle.ConfidenceTypeB\002\030\001\022)\n\005drops\030\017 \003("
      "\0132\026.apollo.common.Point3DB\002\030\001\022,\n\014acceler"
      "ation\030\020 \001(\0132\026.apollo.common.Point3D\022,\n\014a"
      "nchor_point\030\021 \001(\0132\026.apollo.common.Point3"
      "D\022)\n\006bbox2d\030\022 \001(\0132\031.apollo.perception.BB"
      "ox2D\022\?\n\010sub_type\030\023 \001(\0162-.apollo.percepti"
      "on.PerceptionObstacle.SubType\022:\n\014measure"
      "ments\030\024 \003(\0132$.apollo.perception.SensorMe"
      "asurement\022 \n\023height_above_ground\030\025 \001(\001:\003"
      "nan\022\037\n\023position_covariance\030\026 \003(\001B\002\020\001\022\037\n\023"
      "velocity_covariance\030\027 \003(\001B\002\020\001\022#\n\027acceler"
      "ation_covariance\030\030 \003(\001B\002\020\001\0224\n\014light_stat"
      "us\030\031 \001(\0132\036.apollo.perception.LightStatus"
      "\022,\n\003msg\030\032 \001(\0132\037.apollo.perception.DebugM"
      "essage\022J\n\006source\030\033 \001(\0162,.apollo.percepti"
      "on.PerceptionObstacle.Source:\014HOST_VEHIC"
      "LE\0223\n\010v2x_info\030\034 \001(\0132!.apollo.perception"
      ".V2XInformation\"i\n\004Type\022\013\n\007UNKNOWN\020\000\022\023\n\017"
      "UNKNOWN_MOVABLE\020\001\022\025\n\021UNKNOWN_UNMOVABLE\020\002"
      "\022\016\n\nPEDESTRIAN\020\003\022\013\n\007BICYCLE\020\004\022\013\n\007VEHICLE"
      "\020\005\"R\n\016ConfidenceType\022\026\n\022CONFIDENCE_UNKNO"
      "WN\020\000\022\022\n\016CONFIDENCE_CNN\020\001\022\024\n\020CONFIDENCE_R"
      "ADAR\020\002\"\334\001\n\007SubType\022\016\n\nST_UNKNOWN\020\000\022\026\n\022ST"
      "_UNKNOWN_MOVABLE\020\001\022\030\n\024ST_UNKNOWN_UNMOVAB"
      "LE\020\002\022\n\n\006ST_CAR\020\003\022\n\n\006ST_VAN\020\004\022\014\n\010ST_TRUCK"
      "\020\005\022\n\n\006ST_BUS\020\006\022\016\n\nST_CYCLIST\020\007\022\023\n\017ST_MOT"
      "ORCYCLIST\020\010\022\021\n\rST_TRICYCLIST\020\t\022\021\n\rST_PED"
      "ESTRIAN\020\n\022\022\n\016ST_TRAFFICCONE\020\013\"#\n\006Source\022"
      "\020\n\014HOST_VEHICLE\020\000\022\007\n\003V2X\020\001\"\225\002\n\nLaneMarke"
      "r\0226\n\tlane_type\030\001 \001(\0162#.apollo.hdmap.Lane"
      "BoundaryType.Type\022\017\n\007quality\030\002 \001(\001\022\024\n\014mo"
      "del_degree\030\003 \001(\005\022\023\n\013c0_position\030\004 \001(\001\022\030\n"
      "\020c1_heading_angle\030\005 \001(\001\022\024\n\014c2_curvature\030"
      "\006 \001(\001\022\037\n\027c3_curvature_derivative\030\007 \001(\001\022\022"
      "\n\nview_range\030\010 \001(\001\022\027\n\017longitude_start\030\t "
      "\001(\001\022\025\n\rlongitude_end\030\n \001(\001\"\375\001\n\013LaneMarke"
      "rs\0227\n\020left_lane_marker\030\001 \001(\0132\035.apollo.pe"
      "rception.LaneMarker\0228\n\021right_lane_marker"
      "\030\002 \001(\0132\035.apollo.perception.LaneMarker\022<\n"
      "\025next_left_lane_marker\030\003 \003(\0132\035.apollo.pe"
      "rception.LaneMarker\022=\n\026next_right_lane_m"
      "arker\030\004 \003(\0132\035.apollo.perception.LaneMark"
      "er\"6\n\010CIPVInfo\022\017\n\007cipv_id\030\001 \001(\005\022\031\n\021poten"
      "tial_cipv_id\030\002 \003(\005\"\227\002\n\023PerceptionObstacl"
      "es\022B\n\023perception_obstacle\030\001 \003(\0132%.apollo"
      ".perception.PerceptionObstacle\022%\n\006header"
      "\030\002 \001(\0132\025.apollo.common.Header\0220\n\nerror_c"
      "ode\030\003 \001(\0162\030.apollo.common.ErrorCode:\002OK\022"
      "3\n\013lane_marker\030\004 \001(\0132\036.apollo.perception"
      ".LaneMarkers\022.\n\tcipv_info\030\005 \001(\0132\033.apollo"
      ".perception.CIPVInfo"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3500);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "perception_obstacle.proto", &protobuf_RegisterTypes);
  ::apollo::common::protobuf_error_5fcode_2eproto::AddDescriptors();
  ::apollo::common::protobuf_geometry_2eproto::AddDescriptors();
  ::apollo::common::protobuf_header_2eproto::AddDescriptors();
  ::apollo::common::protobuf_pnc_5fpoint_2eproto::AddDescriptors();
  ::apollo::hdmap::protobuf_map_5flane_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_perception_5fobstacle_2eproto

const ::google::protobuf::EnumDescriptor* V2XInformation_V2XType_descriptor() {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_enum_descriptors[0];
}
bool V2XInformation_V2XType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const V2XInformation_V2XType V2XInformation::NONE;
const V2XInformation_V2XType V2XInformation::ZOMBIES_CAR;
const V2XInformation_V2XType V2XInformation::BLIND_ZONE;
const V2XInformation_V2XType V2XInformation::V2XType_MIN;
const V2XInformation_V2XType V2XInformation::V2XType_MAX;
const int V2XInformation::V2XType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PerceptionObstacle_Type_descriptor() {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_enum_descriptors[1];
}
bool PerceptionObstacle_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PerceptionObstacle_Type PerceptionObstacle::UNKNOWN;
const PerceptionObstacle_Type PerceptionObstacle::UNKNOWN_MOVABLE;
const PerceptionObstacle_Type PerceptionObstacle::UNKNOWN_UNMOVABLE;
const PerceptionObstacle_Type PerceptionObstacle::PEDESTRIAN;
const PerceptionObstacle_Type PerceptionObstacle::BICYCLE;
const PerceptionObstacle_Type PerceptionObstacle::VEHICLE;
const PerceptionObstacle_Type PerceptionObstacle::Type_MIN;
const PerceptionObstacle_Type PerceptionObstacle::Type_MAX;
const int PerceptionObstacle::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PerceptionObstacle_ConfidenceType_descriptor() {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_enum_descriptors[2];
}
bool PerceptionObstacle_ConfidenceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PerceptionObstacle_ConfidenceType PerceptionObstacle::CONFIDENCE_UNKNOWN;
const PerceptionObstacle_ConfidenceType PerceptionObstacle::CONFIDENCE_CNN;
const PerceptionObstacle_ConfidenceType PerceptionObstacle::CONFIDENCE_RADAR;
const PerceptionObstacle_ConfidenceType PerceptionObstacle::ConfidenceType_MIN;
const PerceptionObstacle_ConfidenceType PerceptionObstacle::ConfidenceType_MAX;
const int PerceptionObstacle::ConfidenceType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PerceptionObstacle_SubType_descriptor() {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_enum_descriptors[3];
}
bool PerceptionObstacle_SubType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PerceptionObstacle_SubType PerceptionObstacle::ST_UNKNOWN;
const PerceptionObstacle_SubType PerceptionObstacle::ST_UNKNOWN_MOVABLE;
const PerceptionObstacle_SubType PerceptionObstacle::ST_UNKNOWN_UNMOVABLE;
const PerceptionObstacle_SubType PerceptionObstacle::ST_CAR;
const PerceptionObstacle_SubType PerceptionObstacle::ST_VAN;
const PerceptionObstacle_SubType PerceptionObstacle::ST_TRUCK;
const PerceptionObstacle_SubType PerceptionObstacle::ST_BUS;
const PerceptionObstacle_SubType PerceptionObstacle::ST_CYCLIST;
const PerceptionObstacle_SubType PerceptionObstacle::ST_MOTORCYCLIST;
const PerceptionObstacle_SubType PerceptionObstacle::ST_TRICYCLIST;
const PerceptionObstacle_SubType PerceptionObstacle::ST_PEDESTRIAN;
const PerceptionObstacle_SubType PerceptionObstacle::ST_TRAFFICCONE;
const PerceptionObstacle_SubType PerceptionObstacle::SubType_MIN;
const PerceptionObstacle_SubType PerceptionObstacle::SubType_MAX;
const int PerceptionObstacle::SubType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PerceptionObstacle_Source_descriptor() {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_enum_descriptors[4];
}
bool PerceptionObstacle_Source_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PerceptionObstacle_Source PerceptionObstacle::HOST_VEHICLE;
const PerceptionObstacle_Source PerceptionObstacle::V2X;
const PerceptionObstacle_Source PerceptionObstacle::Source_MIN;
const PerceptionObstacle_Source PerceptionObstacle::Source_MAX;
const int PerceptionObstacle::Source_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BBox2D::kXminFieldNumber;
const int BBox2D::kYminFieldNumber;
const int BBox2D::kXmaxFieldNumber;
const int BBox2D::kYmaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BBox2D::BBox2D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_perception_5fobstacle_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.BBox2D)
}
BBox2D::BBox2D(const BBox2D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&xmin_, &from.xmin_,
    static_cast<size_t>(reinterpret_cast<char*>(&ymax_) -
    reinterpret_cast<char*>(&xmin_)) + sizeof(ymax_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.BBox2D)
}

void BBox2D::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&xmin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ymax_) -
      reinterpret_cast<char*>(&xmin_)) + sizeof(ymax_));
}

BBox2D::~BBox2D() {
  // @@protoc_insertion_point(destructor:apollo.perception.BBox2D)
  SharedDtor();
}

void BBox2D::SharedDtor() {
}

void BBox2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BBox2D::descriptor() {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BBox2D& BBox2D::default_instance() {
  protobuf_perception_5fobstacle_2eproto::InitDefaults();
  return *internal_default_instance();
}

BBox2D* BBox2D::New(::google::protobuf::Arena* arena) const {
  BBox2D* n = new BBox2D;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BBox2D::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.BBox2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&xmin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ymax_) -
        reinterpret_cast<char*>(&xmin_)) + sizeof(ymax_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BBox2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.BBox2D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double xmin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_xmin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xmin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ymin = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_ymin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ymin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double xmax = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_xmax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xmax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ymax = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_ymax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ymax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.BBox2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.BBox2D)
  return false;
#undef DO_
}

void BBox2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.BBox2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double xmin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->xmin(), output);
  }

  // optional double ymin = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->ymin(), output);
  }

  // optional double xmax = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->xmax(), output);
  }

  // optional double ymax = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->ymax(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.BBox2D)
}

::google::protobuf::uint8* BBox2D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.BBox2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double xmin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->xmin(), target);
  }

  // optional double ymin = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->ymin(), target);
  }

  // optional double xmax = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->xmax(), target);
  }

  // optional double ymax = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->ymax(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.BBox2D)
  return target;
}

size_t BBox2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.BBox2D)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional double xmin = 1;
    if (has_xmin()) {
      total_size += 1 + 8;
    }

    // optional double ymin = 2;
    if (has_ymin()) {
      total_size += 1 + 8;
    }

    // optional double xmax = 3;
    if (has_xmax()) {
      total_size += 1 + 8;
    }

    // optional double ymax = 4;
    if (has_ymax()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BBox2D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.BBox2D)
  GOOGLE_DCHECK_NE(&from, this);
  const BBox2D* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BBox2D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.BBox2D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.BBox2D)
    MergeFrom(*source);
  }
}

void BBox2D::MergeFrom(const BBox2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.BBox2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      xmin_ = from.xmin_;
    }
    if (cached_has_bits & 0x00000002u) {
      ymin_ = from.ymin_;
    }
    if (cached_has_bits & 0x00000004u) {
      xmax_ = from.xmax_;
    }
    if (cached_has_bits & 0x00000008u) {
      ymax_ = from.ymax_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BBox2D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.BBox2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BBox2D::CopyFrom(const BBox2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.BBox2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BBox2D::IsInitialized() const {
  return true;
}

void BBox2D::Swap(BBox2D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BBox2D::InternalSwap(BBox2D* other) {
  using std::swap;
  swap(xmin_, other->xmin_);
  swap(ymin_, other->ymin_);
  swap(xmax_, other->xmax_);
  swap(ymax_, other->ymax_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BBox2D::GetMetadata() const {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BBox2D

// optional double xmin = 1;
bool BBox2D::has_xmin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BBox2D::set_has_xmin() {
  _has_bits_[0] |= 0x00000001u;
}
void BBox2D::clear_has_xmin() {
  _has_bits_[0] &= ~0x00000001u;
}
void BBox2D::clear_xmin() {
  xmin_ = 0;
  clear_has_xmin();
}
double BBox2D::xmin() const {
  // @@protoc_insertion_point(field_get:apollo.perception.BBox2D.xmin)
  return xmin_;
}
void BBox2D::set_xmin(double value) {
  set_has_xmin();
  xmin_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.BBox2D.xmin)
}

// optional double ymin = 2;
bool BBox2D::has_ymin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BBox2D::set_has_ymin() {
  _has_bits_[0] |= 0x00000002u;
}
void BBox2D::clear_has_ymin() {
  _has_bits_[0] &= ~0x00000002u;
}
void BBox2D::clear_ymin() {
  ymin_ = 0;
  clear_has_ymin();
}
double BBox2D::ymin() const {
  // @@protoc_insertion_point(field_get:apollo.perception.BBox2D.ymin)
  return ymin_;
}
void BBox2D::set_ymin(double value) {
  set_has_ymin();
  ymin_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.BBox2D.ymin)
}

// optional double xmax = 3;
bool BBox2D::has_xmax() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BBox2D::set_has_xmax() {
  _has_bits_[0] |= 0x00000004u;
}
void BBox2D::clear_has_xmax() {
  _has_bits_[0] &= ~0x00000004u;
}
void BBox2D::clear_xmax() {
  xmax_ = 0;
  clear_has_xmax();
}
double BBox2D::xmax() const {
  // @@protoc_insertion_point(field_get:apollo.perception.BBox2D.xmax)
  return xmax_;
}
void BBox2D::set_xmax(double value) {
  set_has_xmax();
  xmax_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.BBox2D.xmax)
}

// optional double ymax = 4;
bool BBox2D::has_ymax() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BBox2D::set_has_ymax() {
  _has_bits_[0] |= 0x00000008u;
}
void BBox2D::clear_has_ymax() {
  _has_bits_[0] &= ~0x00000008u;
}
void BBox2D::clear_ymax() {
  ymax_ = 0;
  clear_has_ymax();
}
double BBox2D::ymax() const {
  // @@protoc_insertion_point(field_get:apollo.perception.BBox2D.ymax)
  return ymax_;
}
void BBox2D::set_ymax(double value) {
  set_has_ymax();
  ymax_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.BBox2D.ymax)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LightStatus::kBrakeVisibleFieldNumber;
const int LightStatus::kBrakeSwitchOnFieldNumber;
const int LightStatus::kLeftTurnVisibleFieldNumber;
const int LightStatus::kLeftTurnSwitchOnFieldNumber;
const int LightStatus::kRightTurnVisibleFieldNumber;
const int LightStatus::kRightTurnSwitchOnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LightStatus::LightStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_perception_5fobstacle_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.LightStatus)
}
LightStatus::LightStatus(const LightStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&brake_visible_, &from.brake_visible_,
    static_cast<size_t>(reinterpret_cast<char*>(&right_turn_switch_on_) -
    reinterpret_cast<char*>(&brake_visible_)) + sizeof(right_turn_switch_on_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.LightStatus)
}

void LightStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&brake_visible_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_turn_switch_on_) -
      reinterpret_cast<char*>(&brake_visible_)) + sizeof(right_turn_switch_on_));
}

LightStatus::~LightStatus() {
  // @@protoc_insertion_point(destructor:apollo.perception.LightStatus)
  SharedDtor();
}

void LightStatus::SharedDtor() {
}

void LightStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LightStatus::descriptor() {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LightStatus& LightStatus::default_instance() {
  protobuf_perception_5fobstacle_2eproto::InitDefaults();
  return *internal_default_instance();
}

LightStatus* LightStatus::New(::google::protobuf::Arena* arena) const {
  LightStatus* n = new LightStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LightStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.LightStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&brake_visible_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&right_turn_switch_on_) -
        reinterpret_cast<char*>(&brake_visible_)) + sizeof(right_turn_switch_on_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LightStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.LightStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double brake_visible = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_brake_visible();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_visible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double brake_switch_on = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_brake_switch_on();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_switch_on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double left_turn_visible = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_left_turn_visible();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &left_turn_visible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double left_turn_switch_on = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_left_turn_switch_on();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &left_turn_switch_on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double right_turn_visible = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_right_turn_visible();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &right_turn_visible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double right_turn_switch_on = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_right_turn_switch_on();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &right_turn_switch_on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.LightStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.LightStatus)
  return false;
#undef DO_
}

void LightStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.LightStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double brake_visible = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->brake_visible(), output);
  }

  // optional double brake_switch_on = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->brake_switch_on(), output);
  }

  // optional double left_turn_visible = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->left_turn_visible(), output);
  }

  // optional double left_turn_switch_on = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->left_turn_switch_on(), output);
  }

  // optional double right_turn_visible = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->right_turn_visible(), output);
  }

  // optional double right_turn_switch_on = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->right_turn_switch_on(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.LightStatus)
}

::google::protobuf::uint8* LightStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.LightStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double brake_visible = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->brake_visible(), target);
  }

  // optional double brake_switch_on = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->brake_switch_on(), target);
  }

  // optional double left_turn_visible = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->left_turn_visible(), target);
  }

  // optional double left_turn_switch_on = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->left_turn_switch_on(), target);
  }

  // optional double right_turn_visible = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->right_turn_visible(), target);
  }

  // optional double right_turn_switch_on = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->right_turn_switch_on(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.LightStatus)
  return target;
}

size_t LightStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.LightStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional double brake_visible = 1;
    if (has_brake_visible()) {
      total_size += 1 + 8;
    }

    // optional double brake_switch_on = 2;
    if (has_brake_switch_on()) {
      total_size += 1 + 8;
    }

    // optional double left_turn_visible = 3;
    if (has_left_turn_visible()) {
      total_size += 1 + 8;
    }

    // optional double left_turn_switch_on = 4;
    if (has_left_turn_switch_on()) {
      total_size += 1 + 8;
    }

    // optional double right_turn_visible = 5;
    if (has_right_turn_visible()) {
      total_size += 1 + 8;
    }

    // optional double right_turn_switch_on = 6;
    if (has_right_turn_switch_on()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LightStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.LightStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const LightStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LightStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.LightStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.LightStatus)
    MergeFrom(*source);
  }
}

void LightStatus::MergeFrom(const LightStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.LightStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      brake_visible_ = from.brake_visible_;
    }
    if (cached_has_bits & 0x00000002u) {
      brake_switch_on_ = from.brake_switch_on_;
    }
    if (cached_has_bits & 0x00000004u) {
      left_turn_visible_ = from.left_turn_visible_;
    }
    if (cached_has_bits & 0x00000008u) {
      left_turn_switch_on_ = from.left_turn_switch_on_;
    }
    if (cached_has_bits & 0x00000010u) {
      right_turn_visible_ = from.right_turn_visible_;
    }
    if (cached_has_bits & 0x00000020u) {
      right_turn_switch_on_ = from.right_turn_switch_on_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LightStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.LightStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LightStatus::CopyFrom(const LightStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.LightStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LightStatus::IsInitialized() const {
  return true;
}

void LightStatus::Swap(LightStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LightStatus::InternalSwap(LightStatus* other) {
  using std::swap;
  swap(brake_visible_, other->brake_visible_);
  swap(brake_switch_on_, other->brake_switch_on_);
  swap(left_turn_visible_, other->left_turn_visible_);
  swap(left_turn_switch_on_, other->left_turn_switch_on_);
  swap(right_turn_visible_, other->right_turn_visible_);
  swap(right_turn_switch_on_, other->right_turn_switch_on_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LightStatus::GetMetadata() const {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LightStatus

// optional double brake_visible = 1;
bool LightStatus::has_brake_visible() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LightStatus::set_has_brake_visible() {
  _has_bits_[0] |= 0x00000001u;
}
void LightStatus::clear_has_brake_visible() {
  _has_bits_[0] &= ~0x00000001u;
}
void LightStatus::clear_brake_visible() {
  brake_visible_ = 0;
  clear_has_brake_visible();
}
double LightStatus::brake_visible() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LightStatus.brake_visible)
  return brake_visible_;
}
void LightStatus::set_brake_visible(double value) {
  set_has_brake_visible();
  brake_visible_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.LightStatus.brake_visible)
}

// optional double brake_switch_on = 2;
bool LightStatus::has_brake_switch_on() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LightStatus::set_has_brake_switch_on() {
  _has_bits_[0] |= 0x00000002u;
}
void LightStatus::clear_has_brake_switch_on() {
  _has_bits_[0] &= ~0x00000002u;
}
void LightStatus::clear_brake_switch_on() {
  brake_switch_on_ = 0;
  clear_has_brake_switch_on();
}
double LightStatus::brake_switch_on() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LightStatus.brake_switch_on)
  return brake_switch_on_;
}
void LightStatus::set_brake_switch_on(double value) {
  set_has_brake_switch_on();
  brake_switch_on_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.LightStatus.brake_switch_on)
}

// optional double left_turn_visible = 3;
bool LightStatus::has_left_turn_visible() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LightStatus::set_has_left_turn_visible() {
  _has_bits_[0] |= 0x00000004u;
}
void LightStatus::clear_has_left_turn_visible() {
  _has_bits_[0] &= ~0x00000004u;
}
void LightStatus::clear_left_turn_visible() {
  left_turn_visible_ = 0;
  clear_has_left_turn_visible();
}
double LightStatus::left_turn_visible() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LightStatus.left_turn_visible)
  return left_turn_visible_;
}
void LightStatus::set_left_turn_visible(double value) {
  set_has_left_turn_visible();
  left_turn_visible_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.LightStatus.left_turn_visible)
}

// optional double left_turn_switch_on = 4;
bool LightStatus::has_left_turn_switch_on() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LightStatus::set_has_left_turn_switch_on() {
  _has_bits_[0] |= 0x00000008u;
}
void LightStatus::clear_has_left_turn_switch_on() {
  _has_bits_[0] &= ~0x00000008u;
}
void LightStatus::clear_left_turn_switch_on() {
  left_turn_switch_on_ = 0;
  clear_has_left_turn_switch_on();
}
double LightStatus::left_turn_switch_on() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LightStatus.left_turn_switch_on)
  return left_turn_switch_on_;
}
void LightStatus::set_left_turn_switch_on(double value) {
  set_has_left_turn_switch_on();
  left_turn_switch_on_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.LightStatus.left_turn_switch_on)
}

// optional double right_turn_visible = 5;
bool LightStatus::has_right_turn_visible() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LightStatus::set_has_right_turn_visible() {
  _has_bits_[0] |= 0x00000010u;
}
void LightStatus::clear_has_right_turn_visible() {
  _has_bits_[0] &= ~0x00000010u;
}
void LightStatus::clear_right_turn_visible() {
  right_turn_visible_ = 0;
  clear_has_right_turn_visible();
}
double LightStatus::right_turn_visible() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LightStatus.right_turn_visible)
  return right_turn_visible_;
}
void LightStatus::set_right_turn_visible(double value) {
  set_has_right_turn_visible();
  right_turn_visible_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.LightStatus.right_turn_visible)
}

// optional double right_turn_switch_on = 6;
bool LightStatus::has_right_turn_switch_on() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LightStatus::set_has_right_turn_switch_on() {
  _has_bits_[0] |= 0x00000020u;
}
void LightStatus::clear_has_right_turn_switch_on() {
  _has_bits_[0] &= ~0x00000020u;
}
void LightStatus::clear_right_turn_switch_on() {
  right_turn_switch_on_ = 0;
  clear_has_right_turn_switch_on();
}
double LightStatus::right_turn_switch_on() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LightStatus.right_turn_switch_on)
  return right_turn_switch_on_;
}
void LightStatus::set_right_turn_switch_on(double value) {
  set_has_right_turn_switch_on();
  right_turn_switch_on_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.LightStatus.right_turn_switch_on)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int V2XInformation::kV2XTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

V2XInformation::V2XInformation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_perception_5fobstacle_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.V2XInformation)
}
V2XInformation::V2XInformation(const V2XInformation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      v2x_type_(from.v2x_type_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.V2XInformation)
}

void V2XInformation::SharedCtor() {
  _cached_size_ = 0;
}

V2XInformation::~V2XInformation() {
  // @@protoc_insertion_point(destructor:apollo.perception.V2XInformation)
  SharedDtor();
}

void V2XInformation::SharedDtor() {
}

void V2XInformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* V2XInformation::descriptor() {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const V2XInformation& V2XInformation::default_instance() {
  protobuf_perception_5fobstacle_2eproto::InitDefaults();
  return *internal_default_instance();
}

V2XInformation* V2XInformation::New(::google::protobuf::Arena* arena) const {
  V2XInformation* n = new V2XInformation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void V2XInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.V2XInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  v2x_type_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool V2XInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.V2XInformation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.perception.V2XInformation.V2XType v2x_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::perception::V2XInformation_V2XType_IsValid(value)) {
            add_v2x_type(static_cast< ::apollo::perception::V2XInformation_V2XType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 1,
                 ::apollo::perception::V2XInformation_V2XType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_v2x_type())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.V2XInformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.V2XInformation)
  return false;
#undef DO_
}

void V2XInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.V2XInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.perception.V2XInformation.V2XType v2x_type = 1;
  for (int i = 0, n = this->v2x_type_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->v2x_type(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.V2XInformation)
}

::google::protobuf::uint8* V2XInformation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.V2XInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.perception.V2XInformation.V2XType v2x_type = 1;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    1, this->v2x_type_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.V2XInformation)
  return target;
}

size_t V2XInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.V2XInformation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.perception.V2XInformation.V2XType v2x_type = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->v2x_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->v2x_type(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void V2XInformation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.V2XInformation)
  GOOGLE_DCHECK_NE(&from, this);
  const V2XInformation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const V2XInformation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.V2XInformation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.V2XInformation)
    MergeFrom(*source);
  }
}

void V2XInformation::MergeFrom(const V2XInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.V2XInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  v2x_type_.MergeFrom(from.v2x_type_);
}

void V2XInformation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.V2XInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void V2XInformation::CopyFrom(const V2XInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.V2XInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool V2XInformation::IsInitialized() const {
  return true;
}

void V2XInformation::Swap(V2XInformation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void V2XInformation::InternalSwap(V2XInformation* other) {
  using std::swap;
  v2x_type_.InternalSwap(&other->v2x_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata V2XInformation::GetMetadata() const {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// V2XInformation

// repeated .apollo.perception.V2XInformation.V2XType v2x_type = 1;
int V2XInformation::v2x_type_size() const {
  return v2x_type_.size();
}
void V2XInformation::clear_v2x_type() {
  v2x_type_.Clear();
}
::apollo::perception::V2XInformation_V2XType V2XInformation::v2x_type(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.V2XInformation.v2x_type)
  return static_cast< ::apollo::perception::V2XInformation_V2XType >(v2x_type_.Get(index));
}
void V2XInformation::set_v2x_type(int index, ::apollo::perception::V2XInformation_V2XType value) {
  assert(::apollo::perception::V2XInformation_V2XType_IsValid(value));
  v2x_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.V2XInformation.v2x_type)
}
void V2XInformation::add_v2x_type(::apollo::perception::V2XInformation_V2XType value) {
  assert(::apollo::perception::V2XInformation_V2XType_IsValid(value));
  v2x_type_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.V2XInformation.v2x_type)
}
const ::google::protobuf::RepeatedField<int>&
V2XInformation::v2x_type() const {
  // @@protoc_insertion_point(field_list:apollo.perception.V2XInformation.v2x_type)
  return v2x_type_;
}
::google::protobuf::RepeatedField<int>*
V2XInformation::mutable_v2x_type() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.V2XInformation.v2x_type)
  return &v2x_type_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorMeasurement::kSensorIdFieldNumber;
const int SensorMeasurement::kIdFieldNumber;
const int SensorMeasurement::kPositionFieldNumber;
const int SensorMeasurement::kThetaFieldNumber;
const int SensorMeasurement::kLengthFieldNumber;
const int SensorMeasurement::kWidthFieldNumber;
const int SensorMeasurement::kHeightFieldNumber;
const int SensorMeasurement::kVelocityFieldNumber;
const int SensorMeasurement::kTypeFieldNumber;
const int SensorMeasurement::kSubTypeFieldNumber;
const int SensorMeasurement::kTimestampFieldNumber;
const int SensorMeasurement::kBoxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorMeasurement::SensorMeasurement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_perception_5fobstacle_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.SensorMeasurement)
}
SensorMeasurement::SensorMeasurement(const SensorMeasurement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sensor_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sensor_id()) {
    sensor_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensor_id_);
  }
  if (from.has_position()) {
    position_ = new ::apollo::common::Point3D(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_velocity()) {
    velocity_ = new ::apollo::common::Point3D(*from.velocity_);
  } else {
    velocity_ = NULL;
  }
  if (from.has_box()) {
    box_ = new ::apollo::perception::BBox2D(*from.box_);
  } else {
    box_ = NULL;
  }
  ::memcpy(&theta_, &from.theta_,
    static_cast<size_t>(reinterpret_cast<char*>(&sub_type_) -
    reinterpret_cast<char*>(&theta_)) + sizeof(sub_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.SensorMeasurement)
}

void SensorMeasurement::SharedCtor() {
  _cached_size_ = 0;
  sensor_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sub_type_) -
      reinterpret_cast<char*>(&position_)) + sizeof(sub_type_));
}

SensorMeasurement::~SensorMeasurement() {
  // @@protoc_insertion_point(destructor:apollo.perception.SensorMeasurement)
  SharedDtor();
}

void SensorMeasurement::SharedDtor() {
  sensor_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete box_;
}

void SensorMeasurement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorMeasurement::descriptor() {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorMeasurement& SensorMeasurement::default_instance() {
  protobuf_perception_5fobstacle_2eproto::InitDefaults();
  return *internal_default_instance();
}

SensorMeasurement* SensorMeasurement::New(::google::protobuf::Arena* arena) const {
  SensorMeasurement* n = new SensorMeasurement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SensorMeasurement::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.SensorMeasurement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!sensor_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sensor_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(position_ != NULL);
      position_->::apollo::common::Point3D::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(velocity_ != NULL);
      velocity_->::apollo::common::Point3D::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(box_ != NULL);
      box_->::apollo::perception::BBox2D::Clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&theta_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&theta_)) + sizeof(type_));
  }
  if (cached_has_bits & 3840u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sub_type_) -
        reinterpret_cast<char*>(&width_)) + sizeof(sub_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SensorMeasurement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.SensorMeasurement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sensor_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensor_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sensor_id().data(), static_cast<int>(this->sensor_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.SensorMeasurement.sensor_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point3D position = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double theta = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_theta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double length = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double width = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double height = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point3D velocity = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.perception.PerceptionObstacle.Type type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::perception::PerceptionObstacle_Type_IsValid(value)) {
            set_type(static_cast< ::apollo::perception::PerceptionObstacle_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.perception.PerceptionObstacle.SubType sub_type = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::perception::PerceptionObstacle_SubType_IsValid(value)) {
            set_sub_type(static_cast< ::apollo::perception::PerceptionObstacle_SubType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                10, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double timestamp = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.perception.BBox2D box = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_box()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.SensorMeasurement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.SensorMeasurement)
  return false;
#undef DO_
}

void SensorMeasurement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.SensorMeasurement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string sensor_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sensor_id().data(), static_cast<int>(this->sensor_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.SensorMeasurement.sensor_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sensor_id(), output);
  }

  // optional int32 id = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional .apollo.common.Point3D position = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->position_, output);
  }

  // optional double theta = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->theta(), output);
  }

  // optional double length = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->length(), output);
  }

  // optional double width = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->width(), output);
  }

  // optional double height = 7;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->height(), output);
  }

  // optional .apollo.common.Point3D velocity = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->velocity_, output);
  }

  // optional .apollo.perception.PerceptionObstacle.Type type = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->type(), output);
  }

  // optional .apollo.perception.PerceptionObstacle.SubType sub_type = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->sub_type(), output);
  }

  // optional double timestamp = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->timestamp(), output);
  }

  // optional .apollo.perception.BBox2D box = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->box_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.SensorMeasurement)
}

::google::protobuf::uint8* SensorMeasurement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.SensorMeasurement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string sensor_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sensor_id().data(), static_cast<int>(this->sensor_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.SensorMeasurement.sensor_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sensor_id(), target);
  }

  // optional int32 id = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional .apollo.common.Point3D position = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->position_, deterministic, target);
  }

  // optional double theta = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->theta(), target);
  }

  // optional double length = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->length(), target);
  }

  // optional double width = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->width(), target);
  }

  // optional double height = 7;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->height(), target);
  }

  // optional .apollo.common.Point3D velocity = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->velocity_, deterministic, target);
  }

  // optional .apollo.perception.PerceptionObstacle.Type type = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->type(), target);
  }

  // optional .apollo.perception.PerceptionObstacle.SubType sub_type = 10;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->sub_type(), target);
  }

  // optional double timestamp = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->timestamp(), target);
  }

  // optional .apollo.perception.BBox2D box = 12;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->box_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.SensorMeasurement)
  return target;
}

size_t SensorMeasurement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.SensorMeasurement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string sensor_id = 1;
    if (has_sensor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sensor_id());
    }

    // optional .apollo.common.Point3D position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->position_);
    }

    // optional .apollo.common.Point3D velocity = 8;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->velocity_);
    }

    // optional .apollo.perception.BBox2D box = 12;
    if (has_box()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->box_);
    }

    // optional double theta = 4;
    if (has_theta()) {
      total_size += 1 + 8;
    }

    // optional double length = 5;
    if (has_length()) {
      total_size += 1 + 8;
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .apollo.perception.PerceptionObstacle.Type type = 9;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional double width = 6;
    if (has_width()) {
      total_size += 1 + 8;
    }

    // optional double height = 7;
    if (has_height()) {
      total_size += 1 + 8;
    }

    // optional double timestamp = 11;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // optional .apollo.perception.PerceptionObstacle.SubType sub_type = 10;
    if (has_sub_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sub_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorMeasurement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.SensorMeasurement)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorMeasurement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorMeasurement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.SensorMeasurement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.SensorMeasurement)
    MergeFrom(*source);
  }
}

void SensorMeasurement::MergeFrom(const SensorMeasurement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.SensorMeasurement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sensor_id();
      sensor_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensor_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_position()->::apollo::common::Point3D::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_velocity()->::apollo::common::Point3D::MergeFrom(from.velocity());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_box()->::apollo::perception::BBox2D::MergeFrom(from.box());
    }
    if (cached_has_bits & 0x00000010u) {
      theta_ = from.theta_;
    }
    if (cached_has_bits & 0x00000020u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000040u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000080u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000200u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000400u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000800u) {
      sub_type_ = from.sub_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SensorMeasurement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.SensorMeasurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorMeasurement::CopyFrom(const SensorMeasurement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.SensorMeasurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorMeasurement::IsInitialized() const {
  return true;
}

void SensorMeasurement::Swap(SensorMeasurement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorMeasurement::InternalSwap(SensorMeasurement* other) {
  using std::swap;
  sensor_id_.Swap(&other->sensor_id_);
  swap(position_, other->position_);
  swap(velocity_, other->velocity_);
  swap(box_, other->box_);
  swap(theta_, other->theta_);
  swap(length_, other->length_);
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(timestamp_, other->timestamp_);
  swap(sub_type_, other->sub_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SensorMeasurement::GetMetadata() const {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SensorMeasurement

// optional string sensor_id = 1;
bool SensorMeasurement::has_sensor_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SensorMeasurement::set_has_sensor_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SensorMeasurement::clear_has_sensor_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SensorMeasurement::clear_sensor_id() {
  sensor_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sensor_id();
}
const ::std::string& SensorMeasurement::sensor_id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.SensorMeasurement.sensor_id)
  return sensor_id_.GetNoArena();
}
void SensorMeasurement::set_sensor_id(const ::std::string& value) {
  set_has_sensor_id();
  sensor_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.SensorMeasurement.sensor_id)
}
#if LANG_CXX11
void SensorMeasurement::set_sensor_id(::std::string&& value) {
  set_has_sensor_id();
  sensor_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.SensorMeasurement.sensor_id)
}
#endif
void SensorMeasurement::set_sensor_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sensor_id();
  sensor_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.SensorMeasurement.sensor_id)
}
void SensorMeasurement::set_sensor_id(const char* value, size_t size) {
  set_has_sensor_id();
  sensor_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.SensorMeasurement.sensor_id)
}
::std::string* SensorMeasurement::mutable_sensor_id() {
  set_has_sensor_id();
  // @@protoc_insertion_point(field_mutable:apollo.perception.SensorMeasurement.sensor_id)
  return sensor_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SensorMeasurement::release_sensor_id() {
  // @@protoc_insertion_point(field_release:apollo.perception.SensorMeasurement.sensor_id)
  clear_has_sensor_id();
  return sensor_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SensorMeasurement::set_allocated_sensor_id(::std::string* sensor_id) {
  if (sensor_id != NULL) {
    set_has_sensor_id();
  } else {
    clear_has_sensor_id();
  }
  sensor_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sensor_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.SensorMeasurement.sensor_id)
}

// optional int32 id = 2;
bool SensorMeasurement::has_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SensorMeasurement::set_has_id() {
  _has_bits_[0] |= 0x00000040u;
}
void SensorMeasurement::clear_has_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void SensorMeasurement::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 SensorMeasurement::id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.SensorMeasurement.id)
  return id_;
}
void SensorMeasurement::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.SensorMeasurement.id)
}

// optional .apollo.common.Point3D position = 3;
bool SensorMeasurement::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SensorMeasurement::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
void SensorMeasurement::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
void SensorMeasurement::clear_position() {
  if (position_ != NULL) position_->::apollo::common::Point3D::Clear();
  clear_has_position();
}
const ::apollo::common::Point3D& SensorMeasurement::position() const {
  const ::apollo::common::Point3D* p = position_;
  // @@protoc_insertion_point(field_get:apollo.perception.SensorMeasurement.position)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Point3D*>(
      &::apollo::common::_Point3D_default_instance_);
}
::apollo::common::Point3D* SensorMeasurement::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.SensorMeasurement.position)
  return position_;
}
::apollo::common::Point3D* SensorMeasurement::release_position() {
  // @@protoc_insertion_point(field_release:apollo.perception.SensorMeasurement.position)
  clear_has_position();
  ::apollo::common::Point3D* temp = position_;
  position_ = NULL;
  return temp;
}
void SensorMeasurement::set_allocated_position(::apollo::common::Point3D* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.SensorMeasurement.position)
}

// optional double theta = 4;
bool SensorMeasurement::has_theta() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SensorMeasurement::set_has_theta() {
  _has_bits_[0] |= 0x00000010u;
}
void SensorMeasurement::clear_has_theta() {
  _has_bits_[0] &= ~0x00000010u;
}
void SensorMeasurement::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
double SensorMeasurement::theta() const {
  // @@protoc_insertion_point(field_get:apollo.perception.SensorMeasurement.theta)
  return theta_;
}
void SensorMeasurement::set_theta(double value) {
  set_has_theta();
  theta_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.SensorMeasurement.theta)
}

// optional double length = 5;
bool SensorMeasurement::has_length() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SensorMeasurement::set_has_length() {
  _has_bits_[0] |= 0x00000020u;
}
void SensorMeasurement::clear_has_length() {
  _has_bits_[0] &= ~0x00000020u;
}
void SensorMeasurement::clear_length() {
  length_ = 0;
  clear_has_length();
}
double SensorMeasurement::length() const {
  // @@protoc_insertion_point(field_get:apollo.perception.SensorMeasurement.length)
  return length_;
}
void SensorMeasurement::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.SensorMeasurement.length)
}

// optional double width = 6;
bool SensorMeasurement::has_width() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SensorMeasurement::set_has_width() {
  _has_bits_[0] |= 0x00000100u;
}
void SensorMeasurement::clear_has_width() {
  _has_bits_[0] &= ~0x00000100u;
}
void SensorMeasurement::clear_width() {
  width_ = 0;
  clear_has_width();
}
double SensorMeasurement::width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.SensorMeasurement.width)
  return width_;
}
void SensorMeasurement::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.SensorMeasurement.width)
}

// optional double height = 7;
bool SensorMeasurement::has_height() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SensorMeasurement::set_has_height() {
  _has_bits_[0] |= 0x00000200u;
}
void SensorMeasurement::clear_has_height() {
  _has_bits_[0] &= ~0x00000200u;
}
void SensorMeasurement::clear_height() {
  height_ = 0;
  clear_has_height();
}
double SensorMeasurement::height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.SensorMeasurement.height)
  return height_;
}
void SensorMeasurement::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.SensorMeasurement.height)
}

// optional .apollo.common.Point3D velocity = 8;
bool SensorMeasurement::has_velocity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SensorMeasurement::set_has_velocity() {
  _has_bits_[0] |= 0x00000004u;
}
void SensorMeasurement::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000004u;
}
void SensorMeasurement::clear_velocity() {
  if (velocity_ != NULL) velocity_->::apollo::common::Point3D::Clear();
  clear_has_velocity();
}
const ::apollo::common::Point3D& SensorMeasurement::velocity() const {
  const ::apollo::common::Point3D* p = velocity_;
  // @@protoc_insertion_point(field_get:apollo.perception.SensorMeasurement.velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Point3D*>(
      &::apollo::common::_Point3D_default_instance_);
}
::apollo::common::Point3D* SensorMeasurement::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) {
    velocity_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.SensorMeasurement.velocity)
  return velocity_;
}
::apollo::common::Point3D* SensorMeasurement::release_velocity() {
  // @@protoc_insertion_point(field_release:apollo.perception.SensorMeasurement.velocity)
  clear_has_velocity();
  ::apollo::common::Point3D* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
void SensorMeasurement::set_allocated_velocity(::apollo::common::Point3D* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.SensorMeasurement.velocity)
}

// optional .apollo.perception.PerceptionObstacle.Type type = 9;
bool SensorMeasurement::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SensorMeasurement::set_has_type() {
  _has_bits_[0] |= 0x00000080u;
}
void SensorMeasurement::clear_has_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void SensorMeasurement::clear_type() {
  type_ = 0;
  clear_has_type();
}
::apollo::perception::PerceptionObstacle_Type SensorMeasurement::type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.SensorMeasurement.type)
  return static_cast< ::apollo::perception::PerceptionObstacle_Type >(type_);
}
void SensorMeasurement::set_type(::apollo::perception::PerceptionObstacle_Type value) {
  assert(::apollo::perception::PerceptionObstacle_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.SensorMeasurement.type)
}

// optional .apollo.perception.PerceptionObstacle.SubType sub_type = 10;
bool SensorMeasurement::has_sub_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SensorMeasurement::set_has_sub_type() {
  _has_bits_[0] |= 0x00000800u;
}
void SensorMeasurement::clear_has_sub_type() {
  _has_bits_[0] &= ~0x00000800u;
}
void SensorMeasurement::clear_sub_type() {
  sub_type_ = 0;
  clear_has_sub_type();
}
::apollo::perception::PerceptionObstacle_SubType SensorMeasurement::sub_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.SensorMeasurement.sub_type)
  return static_cast< ::apollo::perception::PerceptionObstacle_SubType >(sub_type_);
}
void SensorMeasurement::set_sub_type(::apollo::perception::PerceptionObstacle_SubType value) {
  assert(::apollo::perception::PerceptionObstacle_SubType_IsValid(value));
  set_has_sub_type();
  sub_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.SensorMeasurement.sub_type)
}

// optional double timestamp = 11;
bool SensorMeasurement::has_timestamp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SensorMeasurement::set_has_timestamp() {
  _has_bits_[0] |= 0x00000400u;
}
void SensorMeasurement::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000400u;
}
void SensorMeasurement::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
double SensorMeasurement::timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.perception.SensorMeasurement.timestamp)
  return timestamp_;
}
void SensorMeasurement::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.SensorMeasurement.timestamp)
}

// optional .apollo.perception.BBox2D box = 12;
bool SensorMeasurement::has_box() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SensorMeasurement::set_has_box() {
  _has_bits_[0] |= 0x00000008u;
}
void SensorMeasurement::clear_has_box() {
  _has_bits_[0] &= ~0x00000008u;
}
void SensorMeasurement::clear_box() {
  if (box_ != NULL) box_->::apollo::perception::BBox2D::Clear();
  clear_has_box();
}
const ::apollo::perception::BBox2D& SensorMeasurement::box() const {
  const ::apollo::perception::BBox2D* p = box_;
  // @@protoc_insertion_point(field_get:apollo.perception.SensorMeasurement.box)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::perception::BBox2D*>(
      &::apollo::perception::_BBox2D_default_instance_);
}
::apollo::perception::BBox2D* SensorMeasurement::mutable_box() {
  set_has_box();
  if (box_ == NULL) {
    box_ = new ::apollo::perception::BBox2D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.SensorMeasurement.box)
  return box_;
}
::apollo::perception::BBox2D* SensorMeasurement::release_box() {
  // @@protoc_insertion_point(field_release:apollo.perception.SensorMeasurement.box)
  clear_has_box();
  ::apollo::perception::BBox2D* temp = box_;
  box_ = NULL;
  return temp;
}
void SensorMeasurement::set_allocated_box(::apollo::perception::BBox2D* box) {
  delete box_;
  box_ = box;
  if (box) {
    set_has_box();
  } else {
    clear_has_box();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.SensorMeasurement.box)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Trajectory::kProbabilityFieldNumber;
const int Trajectory::kTrajectoryPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Trajectory::Trajectory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_perception_5fobstacle_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.Trajectory)
}
Trajectory::Trajectory(const Trajectory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      trajectory_point_(from.trajectory_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  probability_ = from.probability_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.Trajectory)
}

void Trajectory::SharedCtor() {
  _cached_size_ = 0;
  probability_ = 0;
}

Trajectory::~Trajectory() {
  // @@protoc_insertion_point(destructor:apollo.perception.Trajectory)
  SharedDtor();
}

void Trajectory::SharedDtor() {
}

void Trajectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trajectory::descriptor() {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Trajectory& Trajectory::default_instance() {
  protobuf_perception_5fobstacle_2eproto::InitDefaults();
  return *internal_default_instance();
}

Trajectory* Trajectory::New(::google::protobuf::Arena* arena) const {
  Trajectory* n = new Trajectory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Trajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.Trajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_point_.Clear();
  probability_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Trajectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.Trajectory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double probability = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.common.TrajectoryPoint trajectory_point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trajectory_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.Trajectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.Trajectory)
  return false;
#undef DO_
}

void Trajectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.Trajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double probability = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->probability(), output);
  }

  // repeated .apollo.common.TrajectoryPoint trajectory_point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectory_point_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->trajectory_point(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.Trajectory)
}

::google::protobuf::uint8* Trajectory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.Trajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double probability = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->probability(), target);
  }

  // repeated .apollo.common.TrajectoryPoint trajectory_point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectory_point_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->trajectory_point(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.Trajectory)
  return target;
}

size_t Trajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.Trajectory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.common.TrajectoryPoint trajectory_point = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->trajectory_point_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trajectory_point(static_cast<int>(i)));
    }
  }

  // optional double probability = 1;
  if (has_probability()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trajectory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  const Trajectory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Trajectory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.Trajectory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.Trajectory)
    MergeFrom(*source);
  }
}

void Trajectory::MergeFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectory_point_.MergeFrom(from.trajectory_point_);
  if (from.has_probability()) {
    set_probability(from.probability());
  }
}

void Trajectory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectory::CopyFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory::IsInitialized() const {
  return true;
}

void Trajectory::Swap(Trajectory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Trajectory::InternalSwap(Trajectory* other) {
  using std::swap;
  trajectory_point_.InternalSwap(&other->trajectory_point_);
  swap(probability_, other->probability_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Trajectory::GetMetadata() const {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Trajectory

// optional double probability = 1;
bool Trajectory::has_probability() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Trajectory::set_has_probability() {
  _has_bits_[0] |= 0x00000001u;
}
void Trajectory::clear_has_probability() {
  _has_bits_[0] &= ~0x00000001u;
}
void Trajectory::clear_probability() {
  probability_ = 0;
  clear_has_probability();
}
double Trajectory::probability() const {
  // @@protoc_insertion_point(field_get:apollo.perception.Trajectory.probability)
  return probability_;
}
void Trajectory::set_probability(double value) {
  set_has_probability();
  probability_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.Trajectory.probability)
}

// repeated .apollo.common.TrajectoryPoint trajectory_point = 2;
int Trajectory::trajectory_point_size() const {
  return trajectory_point_.size();
}
void Trajectory::clear_trajectory_point() {
  trajectory_point_.Clear();
}
const ::apollo::common::TrajectoryPoint& Trajectory::trajectory_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.Trajectory.trajectory_point)
  return trajectory_point_.Get(index);
}
::apollo::common::TrajectoryPoint* Trajectory::mutable_trajectory_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.Trajectory.trajectory_point)
  return trajectory_point_.Mutable(index);
}
::apollo::common::TrajectoryPoint* Trajectory::add_trajectory_point() {
  // @@protoc_insertion_point(field_add:apollo.perception.Trajectory.trajectory_point)
  return trajectory_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::common::TrajectoryPoint >*
Trajectory::mutable_trajectory_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.Trajectory.trajectory_point)
  return &trajectory_point_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::common::TrajectoryPoint >&
Trajectory::trajectory_point() const {
  // @@protoc_insertion_point(field_list:apollo.perception.Trajectory.trajectory_point)
  return trajectory_point_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugMessage::kTrajectoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugMessage::DebugMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_perception_5fobstacle_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.DebugMessage)
}
DebugMessage::DebugMessage(const DebugMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      trajectory_(from.trajectory_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.DebugMessage)
}

void DebugMessage::SharedCtor() {
  _cached_size_ = 0;
}

DebugMessage::~DebugMessage() {
  // @@protoc_insertion_point(destructor:apollo.perception.DebugMessage)
  SharedDtor();
}

void DebugMessage::SharedDtor() {
}

void DebugMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugMessage::descriptor() {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DebugMessage& DebugMessage::default_instance() {
  protobuf_perception_5fobstacle_2eproto::InitDefaults();
  return *internal_default_instance();
}

DebugMessage* DebugMessage::New(::google::protobuf::Arena* arena) const {
  DebugMessage* n = new DebugMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DebugMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.DebugMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DebugMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.DebugMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.perception.Trajectory trajectory = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trajectory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.DebugMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.DebugMessage)
  return false;
#undef DO_
}

void DebugMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.DebugMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.perception.Trajectory trajectory = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectory_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->trajectory(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.DebugMessage)
}

::google::protobuf::uint8* DebugMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.DebugMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.perception.Trajectory trajectory = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectory_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->trajectory(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.DebugMessage)
  return target;
}

size_t DebugMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.DebugMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.perception.Trajectory trajectory = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->trajectory_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trajectory(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.DebugMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.DebugMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.DebugMessage)
    MergeFrom(*source);
  }
}

void DebugMessage::MergeFrom(const DebugMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.DebugMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectory_.MergeFrom(from.trajectory_);
}

void DebugMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.DebugMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugMessage::CopyFrom(const DebugMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.DebugMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugMessage::IsInitialized() const {
  return true;
}

void DebugMessage::Swap(DebugMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugMessage::InternalSwap(DebugMessage* other) {
  using std::swap;
  trajectory_.InternalSwap(&other->trajectory_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugMessage::GetMetadata() const {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DebugMessage

// repeated .apollo.perception.Trajectory trajectory = 1;
int DebugMessage::trajectory_size() const {
  return trajectory_.size();
}
void DebugMessage::clear_trajectory() {
  trajectory_.Clear();
}
const ::apollo::perception::Trajectory& DebugMessage::trajectory(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.DebugMessage.trajectory)
  return trajectory_.Get(index);
}
::apollo::perception::Trajectory* DebugMessage::mutable_trajectory(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.DebugMessage.trajectory)
  return trajectory_.Mutable(index);
}
::apollo::perception::Trajectory* DebugMessage::add_trajectory() {
  // @@protoc_insertion_point(field_add:apollo.perception.DebugMessage.trajectory)
  return trajectory_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::perception::Trajectory >*
DebugMessage::mutable_trajectory() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.DebugMessage.trajectory)
  return &trajectory_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::perception::Trajectory >&
DebugMessage::trajectory() const {
  // @@protoc_insertion_point(field_list:apollo.perception.DebugMessage.trajectory)
  return trajectory_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerceptionObstacle::kIdFieldNumber;
const int PerceptionObstacle::kPositionFieldNumber;
const int PerceptionObstacle::kThetaFieldNumber;
const int PerceptionObstacle::kVelocityFieldNumber;
const int PerceptionObstacle::kLengthFieldNumber;
const int PerceptionObstacle::kWidthFieldNumber;
const int PerceptionObstacle::kHeightFieldNumber;
const int PerceptionObstacle::kPolygonPointFieldNumber;
const int PerceptionObstacle::kTrackingTimeFieldNumber;
const int PerceptionObstacle::kTypeFieldNumber;
const int PerceptionObstacle::kTimestampFieldNumber;
const int PerceptionObstacle::kPointCloudFieldNumber;
const int PerceptionObstacle::kConfidenceFieldNumber;
const int PerceptionObstacle::kConfidenceTypeFieldNumber;
const int PerceptionObstacle::kDropsFieldNumber;
const int PerceptionObstacle::kAccelerationFieldNumber;
const int PerceptionObstacle::kAnchorPointFieldNumber;
const int PerceptionObstacle::kBbox2DFieldNumber;
const int PerceptionObstacle::kSubTypeFieldNumber;
const int PerceptionObstacle::kMeasurementsFieldNumber;
const int PerceptionObstacle::kHeightAboveGroundFieldNumber;
const int PerceptionObstacle::kPositionCovarianceFieldNumber;
const int PerceptionObstacle::kVelocityCovarianceFieldNumber;
const int PerceptionObstacle::kAccelerationCovarianceFieldNumber;
const int PerceptionObstacle::kLightStatusFieldNumber;
const int PerceptionObstacle::kMsgFieldNumber;
const int PerceptionObstacle::kSourceFieldNumber;
const int PerceptionObstacle::kV2XInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerceptionObstacle::PerceptionObstacle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_perception_5fobstacle_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.PerceptionObstacle)
}
PerceptionObstacle::PerceptionObstacle(const PerceptionObstacle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      polygon_point_(from.polygon_point_),
      point_cloud_(from.point_cloud_),
      drops_(from.drops_),
      measurements_(from.measurements_),
      position_covariance_(from.position_covariance_),
      velocity_covariance_(from.velocity_covariance_),
      acceleration_covariance_(from.acceleration_covariance_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::apollo::common::Point3D(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_velocity()) {
    velocity_ = new ::apollo::common::Point3D(*from.velocity_);
  } else {
    velocity_ = NULL;
  }
  if (from.has_acceleration()) {
    acceleration_ = new ::apollo::common::Point3D(*from.acceleration_);
  } else {
    acceleration_ = NULL;
  }
  if (from.has_anchor_point()) {
    anchor_point_ = new ::apollo::common::Point3D(*from.anchor_point_);
  } else {
    anchor_point_ = NULL;
  }
  if (from.has_bbox2d()) {
    bbox2d_ = new ::apollo::perception::BBox2D(*from.bbox2d_);
  } else {
    bbox2d_ = NULL;
  }
  if (from.has_light_status()) {
    light_status_ = new ::apollo::perception::LightStatus(*from.light_status_);
  } else {
    light_status_ = NULL;
  }
  if (from.has_msg()) {
    msg_ = new ::apollo::perception::DebugMessage(*from.msg_);
  } else {
    msg_ = NULL;
  }
  if (from.has_v2x_info()) {
    v2x_info_ = new ::apollo::perception::V2XInformation(*from.v2x_info_);
  } else {
    v2x_info_ = NULL;
  }
  ::memcpy(&theta_, &from.theta_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_above_ground_) -
    reinterpret_cast<char*>(&theta_)) + sizeof(height_above_ground_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.PerceptionObstacle)
}

void PerceptionObstacle::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_) -
      reinterpret_cast<char*>(&position_)) + sizeof(source_));
  height_above_ground_ = ::google::protobuf::internal::NaN();
}

PerceptionObstacle::~PerceptionObstacle() {
  // @@protoc_insertion_point(destructor:apollo.perception.PerceptionObstacle)
  SharedDtor();
}

void PerceptionObstacle::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete acceleration_;
  if (this != internal_default_instance()) delete anchor_point_;
  if (this != internal_default_instance()) delete bbox2d_;
  if (this != internal_default_instance()) delete light_status_;
  if (this != internal_default_instance()) delete msg_;
  if (this != internal_default_instance()) delete v2x_info_;
}

void PerceptionObstacle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PerceptionObstacle::descriptor() {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PerceptionObstacle& PerceptionObstacle::default_instance() {
  protobuf_perception_5fobstacle_2eproto::InitDefaults();
  return *internal_default_instance();
}

PerceptionObstacle* PerceptionObstacle::New(::google::protobuf::Arena* arena) const {
  PerceptionObstacle* n = new PerceptionObstacle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PerceptionObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.PerceptionObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  polygon_point_.Clear();
  point_cloud_.Clear();
  drops_.Clear();
  measurements_.Clear();
  position_covariance_.Clear();
  velocity_covariance_.Clear();
  acceleration_covariance_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(position_ != NULL);
      position_->::apollo::common::Point3D::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(velocity_ != NULL);
      velocity_->::apollo::common::Point3D::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(acceleration_ != NULL);
      acceleration_->::apollo::common::Point3D::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(anchor_point_ != NULL);
      anchor_point_->::apollo::common::Point3D::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(bbox2d_ != NULL);
      bbox2d_->::apollo::perception::BBox2D::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(light_status_ != NULL);
      light_status_->::apollo::perception::LightStatus::Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(msg_ != NULL);
      msg_->::apollo::perception::DebugMessage::Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(v2x_info_ != NULL);
      v2x_info_->::apollo::perception::V2XInformation::Clear();
    }
  }
  if (cached_has_bits & 65280u) {
    ::memset(&theta_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&theta_)) + sizeof(timestamp_));
  }
  if (cached_has_bits & 2031616u) {
    ::memset(&confidence_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&source_) -
        reinterpret_cast<char*>(&confidence_)) + sizeof(source_));
    height_above_ground_ = ::google::protobuf::internal::NaN();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PerceptionObstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.PerceptionObstacle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point3D position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double theta = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_theta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point3D velocity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double length = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double width = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double height = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.common.Point3D polygon_point = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_polygon_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double tracking_time = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_tracking_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tracking_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.perception.PerceptionObstacle.Type type = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::perception::PerceptionObstacle_Type_IsValid(value)) {
            set_type(static_cast< ::apollo::perception::PerceptionObstacle_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                10, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double timestamp = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double point_cloud = 12 [packed = true];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_point_cloud())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 98u, input, this->mutable_point_cloud())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double confidence = 13 [deprecated = true];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_confidence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.perception.PerceptionObstacle.ConfidenceType confidence_type = 14 [deprecated = true];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::perception::PerceptionObstacle_ConfidenceType_IsValid(value)) {
            set_confidence_type(static_cast< ::apollo::perception::PerceptionObstacle_ConfidenceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                14, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.common.Point3D drops = 15 [deprecated = true];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drops()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point3D acceleration = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point3D anchor_point = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_anchor_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.perception.BBox2D bbox2d = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bbox2d()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.perception.PerceptionObstacle.SubType sub_type = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::perception::PerceptionObstacle_SubType_IsValid(value)) {
            set_sub_type(static_cast< ::apollo::perception::PerceptionObstacle_SubType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                19, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.perception.SensorMeasurement measurements = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_measurements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double height_above_ground = 21 [default = nan];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {
          set_has_height_above_ground();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_above_ground_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double position_covariance = 22 [packed = true];
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_position_covariance())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(177u /* 177 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 178u, input, this->mutable_position_covariance())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double velocity_covariance = 23 [packed = true];
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_velocity_covariance())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u /* 185 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 186u, input, this->mutable_velocity_covariance())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double acceleration_covariance = 24 [packed = true];
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_acceleration_covariance())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u /* 193 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 194u, input, this->mutable_acceleration_covariance())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.perception.LightStatus light_status = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_light_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.perception.DebugMessage msg = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.perception.PerceptionObstacle.Source source = 27 [default = HOST_VEHICLE];
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::perception::PerceptionObstacle_Source_IsValid(value)) {
            set_source(static_cast< ::apollo::perception::PerceptionObstacle_Source >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                27, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.perception.V2XInformation v2x_info = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_v2x_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.PerceptionObstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.PerceptionObstacle)
  return false;
#undef DO_
}

void PerceptionObstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.PerceptionObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .apollo.common.Point3D position = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->position_, output);
  }

  // optional double theta = 3;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->theta(), output);
  }

  // optional .apollo.common.Point3D velocity = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->velocity_, output);
  }

  // optional double length = 5;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->length(), output);
  }

  // optional double width = 6;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->width(), output);
  }

  // optional double height = 7;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->height(), output);
  }

  // repeated .apollo.common.Point3D polygon_point = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polygon_point_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->polygon_point(static_cast<int>(i)), output);
  }

  // optional double tracking_time = 9;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->tracking_time(), output);
  }

  // optional .apollo.perception.PerceptionObstacle.Type type = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->type(), output);
  }

  // optional double timestamp = 11;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->timestamp(), output);
  }

  // repeated double point_cloud = 12 [packed = true];
  if (this->point_cloud_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _point_cloud_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->point_cloud().data(), this->point_cloud_size(), output);
  }

  // optional double confidence = 13 [deprecated = true];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->confidence(), output);
  }

  // optional .apollo.perception.PerceptionObstacle.ConfidenceType confidence_type = 14 [deprecated = true];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->confidence_type(), output);
  }

  // repeated .apollo.common.Point3D drops = 15 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->drops_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->drops(static_cast<int>(i)), output);
  }

  // optional .apollo.common.Point3D acceleration = 16;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->acceleration_, output);
  }

  // optional .apollo.common.Point3D anchor_point = 17;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->anchor_point_, output);
  }

  // optional .apollo.perception.BBox2D bbox2d = 18;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->bbox2d_, output);
  }

  // optional .apollo.perception.PerceptionObstacle.SubType sub_type = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->sub_type(), output);
  }

  // repeated .apollo.perception.SensorMeasurement measurements = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->measurements_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->measurements(static_cast<int>(i)), output);
  }

  // optional double height_above_ground = 21 [default = nan];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->height_above_ground(), output);
  }

  // repeated double position_covariance = 22 [packed = true];
  if (this->position_covariance_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(22, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _position_covariance_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->position_covariance().data(), this->position_covariance_size(), output);
  }

  // repeated double velocity_covariance = 23 [packed = true];
  if (this->velocity_covariance_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(23, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _velocity_covariance_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->velocity_covariance().data(), this->velocity_covariance_size(), output);
  }

  // repeated double acceleration_covariance = 24 [packed = true];
  if (this->acceleration_covariance_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(24, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _acceleration_covariance_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->acceleration_covariance().data(), this->acceleration_covariance_size(), output);
  }

  // optional .apollo.perception.LightStatus light_status = 25;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *this->light_status_, output);
  }

  // optional .apollo.perception.DebugMessage msg = 26;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *this->msg_, output);
  }

  // optional .apollo.perception.PerceptionObstacle.Source source = 27 [default = HOST_VEHICLE];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      27, this->source(), output);
  }

  // optional .apollo.perception.V2XInformation v2x_info = 28;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, *this->v2x_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.PerceptionObstacle)
}

::google::protobuf::uint8* PerceptionObstacle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.PerceptionObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .apollo.common.Point3D position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->position_, deterministic, target);
  }

  // optional double theta = 3;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->theta(), target);
  }

  // optional .apollo.common.Point3D velocity = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->velocity_, deterministic, target);
  }

  // optional double length = 5;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->length(), target);
  }

  // optional double width = 6;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->width(), target);
  }

  // optional double height = 7;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->height(), target);
  }

  // repeated .apollo.common.Point3D polygon_point = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polygon_point_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->polygon_point(static_cast<int>(i)), deterministic, target);
  }

  // optional double tracking_time = 9;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->tracking_time(), target);
  }

  // optional .apollo.perception.PerceptionObstacle.Type type = 10;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->type(), target);
  }

  // optional double timestamp = 11;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->timestamp(), target);
  }

  // repeated double point_cloud = 12 [packed = true];
  if (this->point_cloud_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _point_cloud_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->point_cloud_, target);
  }

  // optional double confidence = 13 [deprecated = true];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->confidence(), target);
  }

  // optional .apollo.perception.PerceptionObstacle.ConfidenceType confidence_type = 14 [deprecated = true];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->confidence_type(), target);
  }

  // repeated .apollo.common.Point3D drops = 15 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->drops_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->drops(static_cast<int>(i)), deterministic, target);
  }

  // optional .apollo.common.Point3D acceleration = 16;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->acceleration_, deterministic, target);
  }

  // optional .apollo.common.Point3D anchor_point = 17;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->anchor_point_, deterministic, target);
  }

  // optional .apollo.perception.BBox2D bbox2d = 18;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->bbox2d_, deterministic, target);
  }

  // optional .apollo.perception.PerceptionObstacle.SubType sub_type = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->sub_type(), target);
  }

  // repeated .apollo.perception.SensorMeasurement measurements = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->measurements_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, this->measurements(static_cast<int>(i)), deterministic, target);
  }

  // optional double height_above_ground = 21 [default = nan];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->height_above_ground(), target);
  }

  // repeated double position_covariance = 22 [packed = true];
  if (this->position_covariance_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      22,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _position_covariance_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->position_covariance_, target);
  }

  // repeated double velocity_covariance = 23 [packed = true];
  if (this->velocity_covariance_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      23,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _velocity_covariance_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->velocity_covariance_, target);
  }

  // repeated double acceleration_covariance = 24 [packed = true];
  if (this->acceleration_covariance_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      24,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _acceleration_covariance_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->acceleration_covariance_, target);
  }

  // optional .apollo.perception.LightStatus light_status = 25;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, *this->light_status_, deterministic, target);
  }

  // optional .apollo.perception.DebugMessage msg = 26;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        26, *this->msg_, deterministic, target);
  }

  // optional .apollo.perception.PerceptionObstacle.Source source = 27 [default = HOST_VEHICLE];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      27, this->source(), target);
  }

  // optional .apollo.perception.V2XInformation v2x_info = 28;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        28, *this->v2x_info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.PerceptionObstacle)
  return target;
}

size_t PerceptionObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.PerceptionObstacle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.common.Point3D polygon_point = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->polygon_point_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->polygon_point(static_cast<int>(i)));
    }
  }

  // repeated double point_cloud = 12 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->point_cloud_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _point_cloud_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .apollo.common.Point3D drops = 15 [deprecated = true];
  {
    unsigned int count = static_cast<unsigned int>(this->drops_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->drops(static_cast<int>(i)));
    }
  }

  // repeated .apollo.perception.SensorMeasurement measurements = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->measurements_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->measurements(static_cast<int>(i)));
    }
  }

  // repeated double position_covariance = 22 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->position_covariance_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _position_covariance_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double velocity_covariance = 23 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->velocity_covariance_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _velocity_covariance_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double acceleration_covariance = 24 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->acceleration_covariance_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _acceleration_covariance_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.common.Point3D position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->position_);
    }

    // optional .apollo.common.Point3D velocity = 4;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->velocity_);
    }

    // optional .apollo.common.Point3D acceleration = 16;
    if (has_acceleration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->acceleration_);
    }

    // optional .apollo.common.Point3D anchor_point = 17;
    if (has_anchor_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->anchor_point_);
    }

    // optional .apollo.perception.BBox2D bbox2d = 18;
    if (has_bbox2d()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bbox2d_);
    }

    // optional .apollo.perception.LightStatus light_status = 25;
    if (has_light_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->light_status_);
    }

    // optional .apollo.perception.DebugMessage msg = 26;
    if (has_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->msg_);
    }

    // optional .apollo.perception.V2XInformation v2x_info = 28;
    if (has_v2x_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->v2x_info_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double theta = 3;
    if (has_theta()) {
      total_size += 1 + 8;
    }

    // optional double length = 5;
    if (has_length()) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .apollo.perception.PerceptionObstacle.Type type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional double width = 6;
    if (has_width()) {
      total_size += 1 + 8;
    }

    // optional double height = 7;
    if (has_height()) {
      total_size += 1 + 8;
    }

    // optional double tracking_time = 9;
    if (has_tracking_time()) {
      total_size += 1 + 8;
    }

    // optional double timestamp = 11;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 2031616u) {
    // optional double confidence = 13 [deprecated = true];
    if (has_confidence()) {
      total_size += 1 + 8;
    }

    // optional .apollo.perception.PerceptionObstacle.ConfidenceType confidence_type = 14 [deprecated = true];
    if (has_confidence_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->confidence_type());
    }

    // optional .apollo.perception.PerceptionObstacle.SubType sub_type = 19;
    if (has_sub_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sub_type());
    }

    // optional .apollo.perception.PerceptionObstacle.Source source = 27 [default = HOST_VEHICLE];
    if (has_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
    }

    // optional double height_above_ground = 21 [default = nan];
    if (has_height_above_ground()) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PerceptionObstacle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.PerceptionObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const PerceptionObstacle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PerceptionObstacle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.PerceptionObstacle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.PerceptionObstacle)
    MergeFrom(*source);
  }
}

void PerceptionObstacle::MergeFrom(const PerceptionObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.PerceptionObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polygon_point_.MergeFrom(from.polygon_point_);
  point_cloud_.MergeFrom(from.point_cloud_);
  drops_.MergeFrom(from.drops_);
  measurements_.MergeFrom(from.measurements_);
  position_covariance_.MergeFrom(from.position_covariance_);
  velocity_covariance_.MergeFrom(from.velocity_covariance_);
  acceleration_covariance_.MergeFrom(from.acceleration_covariance_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position()->::apollo::common::Point3D::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_velocity()->::apollo::common::Point3D::MergeFrom(from.velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_acceleration()->::apollo::common::Point3D::MergeFrom(from.acceleration());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_anchor_point()->::apollo::common::Point3D::MergeFrom(from.anchor_point());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_bbox2d()->::apollo::perception::BBox2D::MergeFrom(from.bbox2d());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_light_status()->::apollo::perception::LightStatus::MergeFrom(from.light_status());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_msg()->::apollo::perception::DebugMessage::MergeFrom(from.msg());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_v2x_info()->::apollo::perception::V2XInformation::MergeFrom(from.v2x_info());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      theta_ = from.theta_;
    }
    if (cached_has_bits & 0x00000200u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000400u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000800u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00001000u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00002000u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00004000u) {
      tracking_time_ = from.tracking_time_;
    }
    if (cached_has_bits & 0x00008000u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 2031616u) {
    if (cached_has_bits & 0x00010000u) {
      confidence_ = from.confidence_;
    }
    if (cached_has_bits & 0x00020000u) {
      confidence_type_ = from.confidence_type_;
    }
    if (cached_has_bits & 0x00040000u) {
      sub_type_ = from.sub_type_;
    }
    if (cached_has_bits & 0x00080000u) {
      source_ = from.source_;
    }
    if (cached_has_bits & 0x00100000u) {
      height_above_ground_ = from.height_above_ground_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PerceptionObstacle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.PerceptionObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerceptionObstacle::CopyFrom(const PerceptionObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.PerceptionObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerceptionObstacle::IsInitialized() const {
  return true;
}

void PerceptionObstacle::Swap(PerceptionObstacle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerceptionObstacle::InternalSwap(PerceptionObstacle* other) {
  using std::swap;
  polygon_point_.InternalSwap(&other->polygon_point_);
  point_cloud_.InternalSwap(&other->point_cloud_);
  drops_.InternalSwap(&other->drops_);
  measurements_.InternalSwap(&other->measurements_);
  position_covariance_.InternalSwap(&other->position_covariance_);
  velocity_covariance_.InternalSwap(&other->velocity_covariance_);
  acceleration_covariance_.InternalSwap(&other->acceleration_covariance_);
  swap(position_, other->position_);
  swap(velocity_, other->velocity_);
  swap(acceleration_, other->acceleration_);
  swap(anchor_point_, other->anchor_point_);
  swap(bbox2d_, other->bbox2d_);
  swap(light_status_, other->light_status_);
  swap(msg_, other->msg_);
  swap(v2x_info_, other->v2x_info_);
  swap(theta_, other->theta_);
  swap(length_, other->length_);
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(tracking_time_, other->tracking_time_);
  swap(timestamp_, other->timestamp_);
  swap(confidence_, other->confidence_);
  swap(confidence_type_, other->confidence_type_);
  swap(sub_type_, other->sub_type_);
  swap(source_, other->source_);
  swap(height_above_ground_, other->height_above_ground_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PerceptionObstacle::GetMetadata() const {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PerceptionObstacle

// optional int32 id = 1;
bool PerceptionObstacle::has_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PerceptionObstacle::set_has_id() {
  _has_bits_[0] |= 0x00000400u;
}
void PerceptionObstacle::clear_has_id() {
  _has_bits_[0] &= ~0x00000400u;
}
void PerceptionObstacle::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 PerceptionObstacle::id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.id)
  return id_;
}
void PerceptionObstacle::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.id)
}

// optional .apollo.common.Point3D position = 2;
bool PerceptionObstacle::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PerceptionObstacle::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
void PerceptionObstacle::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void PerceptionObstacle::clear_position() {
  if (position_ != NULL) position_->::apollo::common::Point3D::Clear();
  clear_has_position();
}
const ::apollo::common::Point3D& PerceptionObstacle::position() const {
  const ::apollo::common::Point3D* p = position_;
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.position)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Point3D*>(
      &::apollo::common::_Point3D_default_instance_);
}
::apollo::common::Point3D* PerceptionObstacle::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.position)
  return position_;
}
::apollo::common::Point3D* PerceptionObstacle::release_position() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacle.position)
  clear_has_position();
  ::apollo::common::Point3D* temp = position_;
  position_ = NULL;
  return temp;
}
void PerceptionObstacle::set_allocated_position(::apollo::common::Point3D* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacle.position)
}

// optional double theta = 3;
bool PerceptionObstacle::has_theta() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PerceptionObstacle::set_has_theta() {
  _has_bits_[0] |= 0x00000100u;
}
void PerceptionObstacle::clear_has_theta() {
  _has_bits_[0] &= ~0x00000100u;
}
void PerceptionObstacle::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
double PerceptionObstacle::theta() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.theta)
  return theta_;
}
void PerceptionObstacle::set_theta(double value) {
  set_has_theta();
  theta_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.theta)
}

// optional .apollo.common.Point3D velocity = 4;
bool PerceptionObstacle::has_velocity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PerceptionObstacle::set_has_velocity() {
  _has_bits_[0] |= 0x00000002u;
}
void PerceptionObstacle::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000002u;
}
void PerceptionObstacle::clear_velocity() {
  if (velocity_ != NULL) velocity_->::apollo::common::Point3D::Clear();
  clear_has_velocity();
}
const ::apollo::common::Point3D& PerceptionObstacle::velocity() const {
  const ::apollo::common::Point3D* p = velocity_;
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Point3D*>(
      &::apollo::common::_Point3D_default_instance_);
}
::apollo::common::Point3D* PerceptionObstacle::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) {
    velocity_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.velocity)
  return velocity_;
}
::apollo::common::Point3D* PerceptionObstacle::release_velocity() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacle.velocity)
  clear_has_velocity();
  ::apollo::common::Point3D* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
void PerceptionObstacle::set_allocated_velocity(::apollo::common::Point3D* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacle.velocity)
}

// optional double length = 5;
bool PerceptionObstacle::has_length() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PerceptionObstacle::set_has_length() {
  _has_bits_[0] |= 0x00000200u;
}
void PerceptionObstacle::clear_has_length() {
  _has_bits_[0] &= ~0x00000200u;
}
void PerceptionObstacle::clear_length() {
  length_ = 0;
  clear_has_length();
}
double PerceptionObstacle::length() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.length)
  return length_;
}
void PerceptionObstacle::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.length)
}

// optional double width = 6;
bool PerceptionObstacle::has_width() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void PerceptionObstacle::set_has_width() {
  _has_bits_[0] |= 0x00001000u;
}
void PerceptionObstacle::clear_has_width() {
  _has_bits_[0] &= ~0x00001000u;
}
void PerceptionObstacle::clear_width() {
  width_ = 0;
  clear_has_width();
}
double PerceptionObstacle::width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.width)
  return width_;
}
void PerceptionObstacle::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.width)
}

// optional double height = 7;
bool PerceptionObstacle::has_height() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void PerceptionObstacle::set_has_height() {
  _has_bits_[0] |= 0x00002000u;
}
void PerceptionObstacle::clear_has_height() {
  _has_bits_[0] &= ~0x00002000u;
}
void PerceptionObstacle::clear_height() {
  height_ = 0;
  clear_has_height();
}
double PerceptionObstacle::height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.height)
  return height_;
}
void PerceptionObstacle::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.height)
}

// repeated .apollo.common.Point3D polygon_point = 8;
int PerceptionObstacle::polygon_point_size() const {
  return polygon_point_.size();
}
void PerceptionObstacle::clear_polygon_point() {
  polygon_point_.Clear();
}
const ::apollo::common::Point3D& PerceptionObstacle::polygon_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.polygon_point)
  return polygon_point_.Get(index);
}
::apollo::common::Point3D* PerceptionObstacle::mutable_polygon_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.polygon_point)
  return polygon_point_.Mutable(index);
}
::apollo::common::Point3D* PerceptionObstacle::add_polygon_point() {
  // @@protoc_insertion_point(field_add:apollo.perception.PerceptionObstacle.polygon_point)
  return polygon_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::common::Point3D >*
PerceptionObstacle::mutable_polygon_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.PerceptionObstacle.polygon_point)
  return &polygon_point_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::common::Point3D >&
PerceptionObstacle::polygon_point() const {
  // @@protoc_insertion_point(field_list:apollo.perception.PerceptionObstacle.polygon_point)
  return polygon_point_;
}

// optional double tracking_time = 9;
bool PerceptionObstacle::has_tracking_time() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void PerceptionObstacle::set_has_tracking_time() {
  _has_bits_[0] |= 0x00004000u;
}
void PerceptionObstacle::clear_has_tracking_time() {
  _has_bits_[0] &= ~0x00004000u;
}
void PerceptionObstacle::clear_tracking_time() {
  tracking_time_ = 0;
  clear_has_tracking_time();
}
double PerceptionObstacle::tracking_time() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.tracking_time)
  return tracking_time_;
}
void PerceptionObstacle::set_tracking_time(double value) {
  set_has_tracking_time();
  tracking_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.tracking_time)
}

// optional .apollo.perception.PerceptionObstacle.Type type = 10;
bool PerceptionObstacle::has_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PerceptionObstacle::set_has_type() {
  _has_bits_[0] |= 0x00000800u;
}
void PerceptionObstacle::clear_has_type() {
  _has_bits_[0] &= ~0x00000800u;
}
void PerceptionObstacle::clear_type() {
  type_ = 0;
  clear_has_type();
}
::apollo::perception::PerceptionObstacle_Type PerceptionObstacle::type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.type)
  return static_cast< ::apollo::perception::PerceptionObstacle_Type >(type_);
}
void PerceptionObstacle::set_type(::apollo::perception::PerceptionObstacle_Type value) {
  assert(::apollo::perception::PerceptionObstacle_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.type)
}

// optional double timestamp = 11;
bool PerceptionObstacle::has_timestamp() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void PerceptionObstacle::set_has_timestamp() {
  _has_bits_[0] |= 0x00008000u;
}
void PerceptionObstacle::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00008000u;
}
void PerceptionObstacle::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
double PerceptionObstacle::timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.timestamp)
  return timestamp_;
}
void PerceptionObstacle::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.timestamp)
}

// repeated double point_cloud = 12 [packed = true];
int PerceptionObstacle::point_cloud_size() const {
  return point_cloud_.size();
}
void PerceptionObstacle::clear_point_cloud() {
  point_cloud_.Clear();
}
double PerceptionObstacle::point_cloud(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.point_cloud)
  return point_cloud_.Get(index);
}
void PerceptionObstacle::set_point_cloud(int index, double value) {
  point_cloud_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.point_cloud)
}
void PerceptionObstacle::add_point_cloud(double value) {
  point_cloud_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.PerceptionObstacle.point_cloud)
}
const ::google::protobuf::RepeatedField< double >&
PerceptionObstacle::point_cloud() const {
  // @@protoc_insertion_point(field_list:apollo.perception.PerceptionObstacle.point_cloud)
  return point_cloud_;
}
::google::protobuf::RepeatedField< double >*
PerceptionObstacle::mutable_point_cloud() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.PerceptionObstacle.point_cloud)
  return &point_cloud_;
}

// optional double confidence = 13 [deprecated = true];
bool PerceptionObstacle::has_confidence() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void PerceptionObstacle::set_has_confidence() {
  _has_bits_[0] |= 0x00010000u;
}
void PerceptionObstacle::clear_has_confidence() {
  _has_bits_[0] &= ~0x00010000u;
}
void PerceptionObstacle::clear_confidence() {
  confidence_ = 0;
  clear_has_confidence();
}
double PerceptionObstacle::confidence() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.confidence)
  return confidence_;
}
void PerceptionObstacle::set_confidence(double value) {
  set_has_confidence();
  confidence_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.confidence)
}

// optional .apollo.perception.PerceptionObstacle.ConfidenceType confidence_type = 14 [deprecated = true];
bool PerceptionObstacle::has_confidence_type() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void PerceptionObstacle::set_has_confidence_type() {
  _has_bits_[0] |= 0x00020000u;
}
void PerceptionObstacle::clear_has_confidence_type() {
  _has_bits_[0] &= ~0x00020000u;
}
void PerceptionObstacle::clear_confidence_type() {
  confidence_type_ = 0;
  clear_has_confidence_type();
}
::apollo::perception::PerceptionObstacle_ConfidenceType PerceptionObstacle::confidence_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.confidence_type)
  return static_cast< ::apollo::perception::PerceptionObstacle_ConfidenceType >(confidence_type_);
}
void PerceptionObstacle::set_confidence_type(::apollo::perception::PerceptionObstacle_ConfidenceType value) {
  assert(::apollo::perception::PerceptionObstacle_ConfidenceType_IsValid(value));
  set_has_confidence_type();
  confidence_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.confidence_type)
}

// repeated .apollo.common.Point3D drops = 15 [deprecated = true];
int PerceptionObstacle::drops_size() const {
  return drops_.size();
}
void PerceptionObstacle::clear_drops() {
  drops_.Clear();
}
const ::apollo::common::Point3D& PerceptionObstacle::drops(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.drops)
  return drops_.Get(index);
}
::apollo::common::Point3D* PerceptionObstacle::mutable_drops(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.drops)
  return drops_.Mutable(index);
}
::apollo::common::Point3D* PerceptionObstacle::add_drops() {
  // @@protoc_insertion_point(field_add:apollo.perception.PerceptionObstacle.drops)
  return drops_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::common::Point3D >*
PerceptionObstacle::mutable_drops() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.PerceptionObstacle.drops)
  return &drops_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::common::Point3D >&
PerceptionObstacle::drops() const {
  // @@protoc_insertion_point(field_list:apollo.perception.PerceptionObstacle.drops)
  return drops_;
}

// optional .apollo.common.Point3D acceleration = 16;
bool PerceptionObstacle::has_acceleration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PerceptionObstacle::set_has_acceleration() {
  _has_bits_[0] |= 0x00000004u;
}
void PerceptionObstacle::clear_has_acceleration() {
  _has_bits_[0] &= ~0x00000004u;
}
void PerceptionObstacle::clear_acceleration() {
  if (acceleration_ != NULL) acceleration_->::apollo::common::Point3D::Clear();
  clear_has_acceleration();
}
const ::apollo::common::Point3D& PerceptionObstacle::acceleration() const {
  const ::apollo::common::Point3D* p = acceleration_;
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.acceleration)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Point3D*>(
      &::apollo::common::_Point3D_default_instance_);
}
::apollo::common::Point3D* PerceptionObstacle::mutable_acceleration() {
  set_has_acceleration();
  if (acceleration_ == NULL) {
    acceleration_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.acceleration)
  return acceleration_;
}
::apollo::common::Point3D* PerceptionObstacle::release_acceleration() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacle.acceleration)
  clear_has_acceleration();
  ::apollo::common::Point3D* temp = acceleration_;
  acceleration_ = NULL;
  return temp;
}
void PerceptionObstacle::set_allocated_acceleration(::apollo::common::Point3D* acceleration) {
  delete acceleration_;
  acceleration_ = acceleration;
  if (acceleration) {
    set_has_acceleration();
  } else {
    clear_has_acceleration();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacle.acceleration)
}

// optional .apollo.common.Point3D anchor_point = 17;
bool PerceptionObstacle::has_anchor_point() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PerceptionObstacle::set_has_anchor_point() {
  _has_bits_[0] |= 0x00000008u;
}
void PerceptionObstacle::clear_has_anchor_point() {
  _has_bits_[0] &= ~0x00000008u;
}
void PerceptionObstacle::clear_anchor_point() {
  if (anchor_point_ != NULL) anchor_point_->::apollo::common::Point3D::Clear();
  clear_has_anchor_point();
}
const ::apollo::common::Point3D& PerceptionObstacle::anchor_point() const {
  const ::apollo::common::Point3D* p = anchor_point_;
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.anchor_point)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Point3D*>(
      &::apollo::common::_Point3D_default_instance_);
}
::apollo::common::Point3D* PerceptionObstacle::mutable_anchor_point() {
  set_has_anchor_point();
  if (anchor_point_ == NULL) {
    anchor_point_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.anchor_point)
  return anchor_point_;
}
::apollo::common::Point3D* PerceptionObstacle::release_anchor_point() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacle.anchor_point)
  clear_has_anchor_point();
  ::apollo::common::Point3D* temp = anchor_point_;
  anchor_point_ = NULL;
  return temp;
}
void PerceptionObstacle::set_allocated_anchor_point(::apollo::common::Point3D* anchor_point) {
  delete anchor_point_;
  anchor_point_ = anchor_point;
  if (anchor_point) {
    set_has_anchor_point();
  } else {
    clear_has_anchor_point();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacle.anchor_point)
}

// optional .apollo.perception.BBox2D bbox2d = 18;
bool PerceptionObstacle::has_bbox2d() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PerceptionObstacle::set_has_bbox2d() {
  _has_bits_[0] |= 0x00000010u;
}
void PerceptionObstacle::clear_has_bbox2d() {
  _has_bits_[0] &= ~0x00000010u;
}
void PerceptionObstacle::clear_bbox2d() {
  if (bbox2d_ != NULL) bbox2d_->::apollo::perception::BBox2D::Clear();
  clear_has_bbox2d();
}
const ::apollo::perception::BBox2D& PerceptionObstacle::bbox2d() const {
  const ::apollo::perception::BBox2D* p = bbox2d_;
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.bbox2d)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::perception::BBox2D*>(
      &::apollo::perception::_BBox2D_default_instance_);
}
::apollo::perception::BBox2D* PerceptionObstacle::mutable_bbox2d() {
  set_has_bbox2d();
  if (bbox2d_ == NULL) {
    bbox2d_ = new ::apollo::perception::BBox2D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.bbox2d)
  return bbox2d_;
}
::apollo::perception::BBox2D* PerceptionObstacle::release_bbox2d() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacle.bbox2d)
  clear_has_bbox2d();
  ::apollo::perception::BBox2D* temp = bbox2d_;
  bbox2d_ = NULL;
  return temp;
}
void PerceptionObstacle::set_allocated_bbox2d(::apollo::perception::BBox2D* bbox2d) {
  delete bbox2d_;
  bbox2d_ = bbox2d;
  if (bbox2d) {
    set_has_bbox2d();
  } else {
    clear_has_bbox2d();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacle.bbox2d)
}

// optional .apollo.perception.PerceptionObstacle.SubType sub_type = 19;
bool PerceptionObstacle::has_sub_type() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void PerceptionObstacle::set_has_sub_type() {
  _has_bits_[0] |= 0x00040000u;
}
void PerceptionObstacle::clear_has_sub_type() {
  _has_bits_[0] &= ~0x00040000u;
}
void PerceptionObstacle::clear_sub_type() {
  sub_type_ = 0;
  clear_has_sub_type();
}
::apollo::perception::PerceptionObstacle_SubType PerceptionObstacle::sub_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.sub_type)
  return static_cast< ::apollo::perception::PerceptionObstacle_SubType >(sub_type_);
}
void PerceptionObstacle::set_sub_type(::apollo::perception::PerceptionObstacle_SubType value) {
  assert(::apollo::perception::PerceptionObstacle_SubType_IsValid(value));
  set_has_sub_type();
  sub_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.sub_type)
}

// repeated .apollo.perception.SensorMeasurement measurements = 20;
int PerceptionObstacle::measurements_size() const {
  return measurements_.size();
}
void PerceptionObstacle::clear_measurements() {
  measurements_.Clear();
}
const ::apollo::perception::SensorMeasurement& PerceptionObstacle::measurements(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.measurements)
  return measurements_.Get(index);
}
::apollo::perception::SensorMeasurement* PerceptionObstacle::mutable_measurements(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.measurements)
  return measurements_.Mutable(index);
}
::apollo::perception::SensorMeasurement* PerceptionObstacle::add_measurements() {
  // @@protoc_insertion_point(field_add:apollo.perception.PerceptionObstacle.measurements)
  return measurements_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::perception::SensorMeasurement >*
PerceptionObstacle::mutable_measurements() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.PerceptionObstacle.measurements)
  return &measurements_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::perception::SensorMeasurement >&
PerceptionObstacle::measurements() const {
  // @@protoc_insertion_point(field_list:apollo.perception.PerceptionObstacle.measurements)
  return measurements_;
}

// optional double height_above_ground = 21 [default = nan];
bool PerceptionObstacle::has_height_above_ground() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void PerceptionObstacle::set_has_height_above_ground() {
  _has_bits_[0] |= 0x00100000u;
}
void PerceptionObstacle::clear_has_height_above_ground() {
  _has_bits_[0] &= ~0x00100000u;
}
void PerceptionObstacle::clear_height_above_ground() {
  height_above_ground_ = ::google::protobuf::internal::NaN();
  clear_has_height_above_ground();
}
double PerceptionObstacle::height_above_ground() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.height_above_ground)
  return height_above_ground_;
}
void PerceptionObstacle::set_height_above_ground(double value) {
  set_has_height_above_ground();
  height_above_ground_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.height_above_ground)
}

// repeated double position_covariance = 22 [packed = true];
int PerceptionObstacle::position_covariance_size() const {
  return position_covariance_.size();
}
void PerceptionObstacle::clear_position_covariance() {
  position_covariance_.Clear();
}
double PerceptionObstacle::position_covariance(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.position_covariance)
  return position_covariance_.Get(index);
}
void PerceptionObstacle::set_position_covariance(int index, double value) {
  position_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.position_covariance)
}
void PerceptionObstacle::add_position_covariance(double value) {
  position_covariance_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.PerceptionObstacle.position_covariance)
}
const ::google::protobuf::RepeatedField< double >&
PerceptionObstacle::position_covariance() const {
  // @@protoc_insertion_point(field_list:apollo.perception.PerceptionObstacle.position_covariance)
  return position_covariance_;
}
::google::protobuf::RepeatedField< double >*
PerceptionObstacle::mutable_position_covariance() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.PerceptionObstacle.position_covariance)
  return &position_covariance_;
}

// repeated double velocity_covariance = 23 [packed = true];
int PerceptionObstacle::velocity_covariance_size() const {
  return velocity_covariance_.size();
}
void PerceptionObstacle::clear_velocity_covariance() {
  velocity_covariance_.Clear();
}
double PerceptionObstacle::velocity_covariance(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.velocity_covariance)
  return velocity_covariance_.Get(index);
}
void PerceptionObstacle::set_velocity_covariance(int index, double value) {
  velocity_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.velocity_covariance)
}
void PerceptionObstacle::add_velocity_covariance(double value) {
  velocity_covariance_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.PerceptionObstacle.velocity_covariance)
}
const ::google::protobuf::RepeatedField< double >&
PerceptionObstacle::velocity_covariance() const {
  // @@protoc_insertion_point(field_list:apollo.perception.PerceptionObstacle.velocity_covariance)
  return velocity_covariance_;
}
::google::protobuf::RepeatedField< double >*
PerceptionObstacle::mutable_velocity_covariance() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.PerceptionObstacle.velocity_covariance)
  return &velocity_covariance_;
}

// repeated double acceleration_covariance = 24 [packed = true];
int PerceptionObstacle::acceleration_covariance_size() const {
  return acceleration_covariance_.size();
}
void PerceptionObstacle::clear_acceleration_covariance() {
  acceleration_covariance_.Clear();
}
double PerceptionObstacle::acceleration_covariance(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.acceleration_covariance)
  return acceleration_covariance_.Get(index);
}
void PerceptionObstacle::set_acceleration_covariance(int index, double value) {
  acceleration_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.acceleration_covariance)
}
void PerceptionObstacle::add_acceleration_covariance(double value) {
  acceleration_covariance_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.PerceptionObstacle.acceleration_covariance)
}
const ::google::protobuf::RepeatedField< double >&
PerceptionObstacle::acceleration_covariance() const {
  // @@protoc_insertion_point(field_list:apollo.perception.PerceptionObstacle.acceleration_covariance)
  return acceleration_covariance_;
}
::google::protobuf::RepeatedField< double >*
PerceptionObstacle::mutable_acceleration_covariance() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.PerceptionObstacle.acceleration_covariance)
  return &acceleration_covariance_;
}

// optional .apollo.perception.LightStatus light_status = 25;
bool PerceptionObstacle::has_light_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PerceptionObstacle::set_has_light_status() {
  _has_bits_[0] |= 0x00000020u;
}
void PerceptionObstacle::clear_has_light_status() {
  _has_bits_[0] &= ~0x00000020u;
}
void PerceptionObstacle::clear_light_status() {
  if (light_status_ != NULL) light_status_->::apollo::perception::LightStatus::Clear();
  clear_has_light_status();
}
const ::apollo::perception::LightStatus& PerceptionObstacle::light_status() const {
  const ::apollo::perception::LightStatus* p = light_status_;
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.light_status)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::perception::LightStatus*>(
      &::apollo::perception::_LightStatus_default_instance_);
}
::apollo::perception::LightStatus* PerceptionObstacle::mutable_light_status() {
  set_has_light_status();
  if (light_status_ == NULL) {
    light_status_ = new ::apollo::perception::LightStatus;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.light_status)
  return light_status_;
}
::apollo::perception::LightStatus* PerceptionObstacle::release_light_status() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacle.light_status)
  clear_has_light_status();
  ::apollo::perception::LightStatus* temp = light_status_;
  light_status_ = NULL;
  return temp;
}
void PerceptionObstacle::set_allocated_light_status(::apollo::perception::LightStatus* light_status) {
  delete light_status_;
  light_status_ = light_status;
  if (light_status) {
    set_has_light_status();
  } else {
    clear_has_light_status();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacle.light_status)
}

// optional .apollo.perception.DebugMessage msg = 26;
bool PerceptionObstacle::has_msg() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PerceptionObstacle::set_has_msg() {
  _has_bits_[0] |= 0x00000040u;
}
void PerceptionObstacle::clear_has_msg() {
  _has_bits_[0] &= ~0x00000040u;
}
void PerceptionObstacle::clear_msg() {
  if (msg_ != NULL) msg_->::apollo::perception::DebugMessage::Clear();
  clear_has_msg();
}
const ::apollo::perception::DebugMessage& PerceptionObstacle::msg() const {
  const ::apollo::perception::DebugMessage* p = msg_;
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.msg)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::perception::DebugMessage*>(
      &::apollo::perception::_DebugMessage_default_instance_);
}
::apollo::perception::DebugMessage* PerceptionObstacle::mutable_msg() {
  set_has_msg();
  if (msg_ == NULL) {
    msg_ = new ::apollo::perception::DebugMessage;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.msg)
  return msg_;
}
::apollo::perception::DebugMessage* PerceptionObstacle::release_msg() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacle.msg)
  clear_has_msg();
  ::apollo::perception::DebugMessage* temp = msg_;
  msg_ = NULL;
  return temp;
}
void PerceptionObstacle::set_allocated_msg(::apollo::perception::DebugMessage* msg) {
  delete msg_;
  msg_ = msg;
  if (msg) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacle.msg)
}

// optional .apollo.perception.PerceptionObstacle.Source source = 27 [default = HOST_VEHICLE];
bool PerceptionObstacle::has_source() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void PerceptionObstacle::set_has_source() {
  _has_bits_[0] |= 0x00080000u;
}
void PerceptionObstacle::clear_has_source() {
  _has_bits_[0] &= ~0x00080000u;
}
void PerceptionObstacle::clear_source() {
  source_ = 0;
  clear_has_source();
}
::apollo::perception::PerceptionObstacle_Source PerceptionObstacle::source() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.source)
  return static_cast< ::apollo::perception::PerceptionObstacle_Source >(source_);
}
void PerceptionObstacle::set_source(::apollo::perception::PerceptionObstacle_Source value) {
  assert(::apollo::perception::PerceptionObstacle_Source_IsValid(value));
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.source)
}

// optional .apollo.perception.V2XInformation v2x_info = 28;
bool PerceptionObstacle::has_v2x_info() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PerceptionObstacle::set_has_v2x_info() {
  _has_bits_[0] |= 0x00000080u;
}
void PerceptionObstacle::clear_has_v2x_info() {
  _has_bits_[0] &= ~0x00000080u;
}
void PerceptionObstacle::clear_v2x_info() {
  if (v2x_info_ != NULL) v2x_info_->::apollo::perception::V2XInformation::Clear();
  clear_has_v2x_info();
}
const ::apollo::perception::V2XInformation& PerceptionObstacle::v2x_info() const {
  const ::apollo::perception::V2XInformation* p = v2x_info_;
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.v2x_info)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::perception::V2XInformation*>(
      &::apollo::perception::_V2XInformation_default_instance_);
}
::apollo::perception::V2XInformation* PerceptionObstacle::mutable_v2x_info() {
  set_has_v2x_info();
  if (v2x_info_ == NULL) {
    v2x_info_ = new ::apollo::perception::V2XInformation;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.v2x_info)
  return v2x_info_;
}
::apollo::perception::V2XInformation* PerceptionObstacle::release_v2x_info() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacle.v2x_info)
  clear_has_v2x_info();
  ::apollo::perception::V2XInformation* temp = v2x_info_;
  v2x_info_ = NULL;
  return temp;
}
void PerceptionObstacle::set_allocated_v2x_info(::apollo::perception::V2XInformation* v2x_info) {
  delete v2x_info_;
  v2x_info_ = v2x_info;
  if (v2x_info) {
    set_has_v2x_info();
  } else {
    clear_has_v2x_info();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacle.v2x_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneMarker::kLaneTypeFieldNumber;
const int LaneMarker::kQualityFieldNumber;
const int LaneMarker::kModelDegreeFieldNumber;
const int LaneMarker::kC0PositionFieldNumber;
const int LaneMarker::kC1HeadingAngleFieldNumber;
const int LaneMarker::kC2CurvatureFieldNumber;
const int LaneMarker::kC3CurvatureDerivativeFieldNumber;
const int LaneMarker::kViewRangeFieldNumber;
const int LaneMarker::kLongitudeStartFieldNumber;
const int LaneMarker::kLongitudeEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneMarker::LaneMarker()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_perception_5fobstacle_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.LaneMarker)
}
LaneMarker::LaneMarker(const LaneMarker& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&quality_, &from.quality_,
    static_cast<size_t>(reinterpret_cast<char*>(&longitude_end_) -
    reinterpret_cast<char*>(&quality_)) + sizeof(longitude_end_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.LaneMarker)
}

void LaneMarker::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&quality_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_end_) -
      reinterpret_cast<char*>(&quality_)) + sizeof(longitude_end_));
}

LaneMarker::~LaneMarker() {
  // @@protoc_insertion_point(destructor:apollo.perception.LaneMarker)
  SharedDtor();
}

void LaneMarker::SharedDtor() {
}

void LaneMarker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneMarker::descriptor() {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneMarker& LaneMarker::default_instance() {
  protobuf_perception_5fobstacle_2eproto::InitDefaults();
  return *internal_default_instance();
}

LaneMarker* LaneMarker::New(::google::protobuf::Arena* arena) const {
  LaneMarker* n = new LaneMarker;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneMarker::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.LaneMarker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&quality_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&view_range_) -
        reinterpret_cast<char*>(&quality_)) + sizeof(view_range_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&longitude_start_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&longitude_end_) -
        reinterpret_cast<char*>(&longitude_start_)) + sizeof(longitude_end_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LaneMarker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.LaneMarker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.hdmap.LaneBoundaryType.Type lane_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::hdmap::LaneBoundaryType_Type_IsValid(value)) {
            set_lane_type(static_cast< ::apollo::hdmap::LaneBoundaryType_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double quality = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_quality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 model_degree = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_model_degree();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_degree_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double c0_position = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_c0_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c0_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double c1_heading_angle = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_c1_heading_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c1_heading_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double c2_curvature = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_c2_curvature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c2_curvature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double c3_curvature_derivative = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_c3_curvature_derivative();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c3_curvature_derivative_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double view_range = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_view_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &view_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitude_start = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_longitude_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitude_end = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_longitude_end();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.LaneMarker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.LaneMarker)
  return false;
#undef DO_
}

void LaneMarker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.LaneMarker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.LaneBoundaryType.Type lane_type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->lane_type(), output);
  }

  // optional double quality = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->quality(), output);
  }

  // optional int32 model_degree = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->model_degree(), output);
  }

  // optional double c0_position = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->c0_position(), output);
  }

  // optional double c1_heading_angle = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->c1_heading_angle(), output);
  }

  // optional double c2_curvature = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->c2_curvature(), output);
  }

  // optional double c3_curvature_derivative = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->c3_curvature_derivative(), output);
  }

  // optional double view_range = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->view_range(), output);
  }

  // optional double longitude_start = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->longitude_start(), output);
  }

  // optional double longitude_end = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->longitude_end(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.LaneMarker)
}

::google::protobuf::uint8* LaneMarker::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.LaneMarker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.LaneBoundaryType.Type lane_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->lane_type(), target);
  }

  // optional double quality = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->quality(), target);
  }

  // optional int32 model_degree = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->model_degree(), target);
  }

  // optional double c0_position = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->c0_position(), target);
  }

  // optional double c1_heading_angle = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->c1_heading_angle(), target);
  }

  // optional double c2_curvature = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->c2_curvature(), target);
  }

  // optional double c3_curvature_derivative = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->c3_curvature_derivative(), target);
  }

  // optional double view_range = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->view_range(), target);
  }

  // optional double longitude_start = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->longitude_start(), target);
  }

  // optional double longitude_end = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->longitude_end(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.LaneMarker)
  return target;
}

size_t LaneMarker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.LaneMarker)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double quality = 2;
    if (has_quality()) {
      total_size += 1 + 8;
    }

    // optional .apollo.hdmap.LaneBoundaryType.Type lane_type = 1;
    if (has_lane_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lane_type());
    }

    // optional int32 model_degree = 3;
    if (has_model_degree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->model_degree());
    }

    // optional double c0_position = 4;
    if (has_c0_position()) {
      total_size += 1 + 8;
    }

    // optional double c1_heading_angle = 5;
    if (has_c1_heading_angle()) {
      total_size += 1 + 8;
    }

    // optional double c2_curvature = 6;
    if (has_c2_curvature()) {
      total_size += 1 + 8;
    }

    // optional double c3_curvature_derivative = 7;
    if (has_c3_curvature_derivative()) {
      total_size += 1 + 8;
    }

    // optional double view_range = 8;
    if (has_view_range()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional double longitude_start = 9;
    if (has_longitude_start()) {
      total_size += 1 + 8;
    }

    // optional double longitude_end = 10;
    if (has_longitude_end()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneMarker::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.LaneMarker)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneMarker* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneMarker>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.LaneMarker)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.LaneMarker)
    MergeFrom(*source);
  }
}

void LaneMarker::MergeFrom(const LaneMarker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.LaneMarker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00000002u) {
      lane_type_ = from.lane_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      model_degree_ = from.model_degree_;
    }
    if (cached_has_bits & 0x00000008u) {
      c0_position_ = from.c0_position_;
    }
    if (cached_has_bits & 0x00000010u) {
      c1_heading_angle_ = from.c1_heading_angle_;
    }
    if (cached_has_bits & 0x00000020u) {
      c2_curvature_ = from.c2_curvature_;
    }
    if (cached_has_bits & 0x00000040u) {
      c3_curvature_derivative_ = from.c3_curvature_derivative_;
    }
    if (cached_has_bits & 0x00000080u) {
      view_range_ = from.view_range_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      longitude_start_ = from.longitude_start_;
    }
    if (cached_has_bits & 0x00000200u) {
      longitude_end_ = from.longitude_end_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaneMarker::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.LaneMarker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneMarker::CopyFrom(const LaneMarker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.LaneMarker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneMarker::IsInitialized() const {
  return true;
}

void LaneMarker::Swap(LaneMarker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneMarker::InternalSwap(LaneMarker* other) {
  using std::swap;
  swap(quality_, other->quality_);
  swap(lane_type_, other->lane_type_);
  swap(model_degree_, other->model_degree_);
  swap(c0_position_, other->c0_position_);
  swap(c1_heading_angle_, other->c1_heading_angle_);
  swap(c2_curvature_, other->c2_curvature_);
  swap(c3_curvature_derivative_, other->c3_curvature_derivative_);
  swap(view_range_, other->view_range_);
  swap(longitude_start_, other->longitude_start_);
  swap(longitude_end_, other->longitude_end_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneMarker::GetMetadata() const {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LaneMarker

// optional .apollo.hdmap.LaneBoundaryType.Type lane_type = 1;
bool LaneMarker::has_lane_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LaneMarker::set_has_lane_type() {
  _has_bits_[0] |= 0x00000002u;
}
void LaneMarker::clear_has_lane_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void LaneMarker::clear_lane_type() {
  lane_type_ = 0;
  clear_has_lane_type();
}
::apollo::hdmap::LaneBoundaryType_Type LaneMarker::lane_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.lane_type)
  return static_cast< ::apollo::hdmap::LaneBoundaryType_Type >(lane_type_);
}
void LaneMarker::set_lane_type(::apollo::hdmap::LaneBoundaryType_Type value) {
  assert(::apollo::hdmap::LaneBoundaryType_Type_IsValid(value));
  set_has_lane_type();
  lane_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.lane_type)
}

// optional double quality = 2;
bool LaneMarker::has_quality() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LaneMarker::set_has_quality() {
  _has_bits_[0] |= 0x00000001u;
}
void LaneMarker::clear_has_quality() {
  _has_bits_[0] &= ~0x00000001u;
}
void LaneMarker::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
double LaneMarker::quality() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.quality)
  return quality_;
}
void LaneMarker::set_quality(double value) {
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.quality)
}

// optional int32 model_degree = 3;
bool LaneMarker::has_model_degree() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LaneMarker::set_has_model_degree() {
  _has_bits_[0] |= 0x00000004u;
}
void LaneMarker::clear_has_model_degree() {
  _has_bits_[0] &= ~0x00000004u;
}
void LaneMarker::clear_model_degree() {
  model_degree_ = 0;
  clear_has_model_degree();
}
::google::protobuf::int32 LaneMarker::model_degree() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.model_degree)
  return model_degree_;
}
void LaneMarker::set_model_degree(::google::protobuf::int32 value) {
  set_has_model_degree();
  model_degree_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.model_degree)
}

// optional double c0_position = 4;
bool LaneMarker::has_c0_position() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LaneMarker::set_has_c0_position() {
  _has_bits_[0] |= 0x00000008u;
}
void LaneMarker::clear_has_c0_position() {
  _has_bits_[0] &= ~0x00000008u;
}
void LaneMarker::clear_c0_position() {
  c0_position_ = 0;
  clear_has_c0_position();
}
double LaneMarker::c0_position() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.c0_position)
  return c0_position_;
}
void LaneMarker::set_c0_position(double value) {
  set_has_c0_position();
  c0_position_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.c0_position)
}

// optional double c1_heading_angle = 5;
bool LaneMarker::has_c1_heading_angle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LaneMarker::set_has_c1_heading_angle() {
  _has_bits_[0] |= 0x00000010u;
}
void LaneMarker::clear_has_c1_heading_angle() {
  _has_bits_[0] &= ~0x00000010u;
}
void LaneMarker::clear_c1_heading_angle() {
  c1_heading_angle_ = 0;
  clear_has_c1_heading_angle();
}
double LaneMarker::c1_heading_angle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.c1_heading_angle)
  return c1_heading_angle_;
}
void LaneMarker::set_c1_heading_angle(double value) {
  set_has_c1_heading_angle();
  c1_heading_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.c1_heading_angle)
}

// optional double c2_curvature = 6;
bool LaneMarker::has_c2_curvature() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LaneMarker::set_has_c2_curvature() {
  _has_bits_[0] |= 0x00000020u;
}
void LaneMarker::clear_has_c2_curvature() {
  _has_bits_[0] &= ~0x00000020u;
}
void LaneMarker::clear_c2_curvature() {
  c2_curvature_ = 0;
  clear_has_c2_curvature();
}
double LaneMarker::c2_curvature() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.c2_curvature)
  return c2_curvature_;
}
void LaneMarker::set_c2_curvature(double value) {
  set_has_c2_curvature();
  c2_curvature_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.c2_curvature)
}

// optional double c3_curvature_derivative = 7;
bool LaneMarker::has_c3_curvature_derivative() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LaneMarker::set_has_c3_curvature_derivative() {
  _has_bits_[0] |= 0x00000040u;
}
void LaneMarker::clear_has_c3_curvature_derivative() {
  _has_bits_[0] &= ~0x00000040u;
}
void LaneMarker::clear_c3_curvature_derivative() {
  c3_curvature_derivative_ = 0;
  clear_has_c3_curvature_derivative();
}
double LaneMarker::c3_curvature_derivative() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.c3_curvature_derivative)
  return c3_curvature_derivative_;
}
void LaneMarker::set_c3_curvature_derivative(double value) {
  set_has_c3_curvature_derivative();
  c3_curvature_derivative_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.c3_curvature_derivative)
}

// optional double view_range = 8;
bool LaneMarker::has_view_range() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LaneMarker::set_has_view_range() {
  _has_bits_[0] |= 0x00000080u;
}
void LaneMarker::clear_has_view_range() {
  _has_bits_[0] &= ~0x00000080u;
}
void LaneMarker::clear_view_range() {
  view_range_ = 0;
  clear_has_view_range();
}
double LaneMarker::view_range() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.view_range)
  return view_range_;
}
void LaneMarker::set_view_range(double value) {
  set_has_view_range();
  view_range_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.view_range)
}

// optional double longitude_start = 9;
bool LaneMarker::has_longitude_start() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void LaneMarker::set_has_longitude_start() {
  _has_bits_[0] |= 0x00000100u;
}
void LaneMarker::clear_has_longitude_start() {
  _has_bits_[0] &= ~0x00000100u;
}
void LaneMarker::clear_longitude_start() {
  longitude_start_ = 0;
  clear_has_longitude_start();
}
double LaneMarker::longitude_start() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.longitude_start)
  return longitude_start_;
}
void LaneMarker::set_longitude_start(double value) {
  set_has_longitude_start();
  longitude_start_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.longitude_start)
}

// optional double longitude_end = 10;
bool LaneMarker::has_longitude_end() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void LaneMarker::set_has_longitude_end() {
  _has_bits_[0] |= 0x00000200u;
}
void LaneMarker::clear_has_longitude_end() {
  _has_bits_[0] &= ~0x00000200u;
}
void LaneMarker::clear_longitude_end() {
  longitude_end_ = 0;
  clear_has_longitude_end();
}
double LaneMarker::longitude_end() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.longitude_end)
  return longitude_end_;
}
void LaneMarker::set_longitude_end(double value) {
  set_has_longitude_end();
  longitude_end_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.longitude_end)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneMarkers::kLeftLaneMarkerFieldNumber;
const int LaneMarkers::kRightLaneMarkerFieldNumber;
const int LaneMarkers::kNextLeftLaneMarkerFieldNumber;
const int LaneMarkers::kNextRightLaneMarkerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneMarkers::LaneMarkers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_perception_5fobstacle_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.LaneMarkers)
}
LaneMarkers::LaneMarkers(const LaneMarkers& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      next_left_lane_marker_(from.next_left_lane_marker_),
      next_right_lane_marker_(from.next_right_lane_marker_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_left_lane_marker()) {
    left_lane_marker_ = new ::apollo::perception::LaneMarker(*from.left_lane_marker_);
  } else {
    left_lane_marker_ = NULL;
  }
  if (from.has_right_lane_marker()) {
    right_lane_marker_ = new ::apollo::perception::LaneMarker(*from.right_lane_marker_);
  } else {
    right_lane_marker_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.LaneMarkers)
}

void LaneMarkers::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&left_lane_marker_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_lane_marker_) -
      reinterpret_cast<char*>(&left_lane_marker_)) + sizeof(right_lane_marker_));
}

LaneMarkers::~LaneMarkers() {
  // @@protoc_insertion_point(destructor:apollo.perception.LaneMarkers)
  SharedDtor();
}

void LaneMarkers::SharedDtor() {
  if (this != internal_default_instance()) delete left_lane_marker_;
  if (this != internal_default_instance()) delete right_lane_marker_;
}

void LaneMarkers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneMarkers::descriptor() {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneMarkers& LaneMarkers::default_instance() {
  protobuf_perception_5fobstacle_2eproto::InitDefaults();
  return *internal_default_instance();
}

LaneMarkers* LaneMarkers::New(::google::protobuf::Arena* arena) const {
  LaneMarkers* n = new LaneMarkers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneMarkers::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.LaneMarkers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  next_left_lane_marker_.Clear();
  next_right_lane_marker_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(left_lane_marker_ != NULL);
      left_lane_marker_->::apollo::perception::LaneMarker::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(right_lane_marker_ != NULL);
      right_lane_marker_->::apollo::perception::LaneMarker::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LaneMarkers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.LaneMarkers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.perception.LaneMarker left_lane_marker = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left_lane_marker()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.perception.LaneMarker right_lane_marker = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right_lane_marker()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.perception.LaneMarker next_left_lane_marker = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_next_left_lane_marker()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.perception.LaneMarker next_right_lane_marker = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_next_right_lane_marker()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.LaneMarkers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.LaneMarkers)
  return false;
#undef DO_
}

void LaneMarkers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.LaneMarkers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.LaneMarker left_lane_marker = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->left_lane_marker_, output);
  }

  // optional .apollo.perception.LaneMarker right_lane_marker = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->right_lane_marker_, output);
  }

  // repeated .apollo.perception.LaneMarker next_left_lane_marker = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->next_left_lane_marker_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->next_left_lane_marker(static_cast<int>(i)), output);
  }

  // repeated .apollo.perception.LaneMarker next_right_lane_marker = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->next_right_lane_marker_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->next_right_lane_marker(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.LaneMarkers)
}

::google::protobuf::uint8* LaneMarkers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.LaneMarkers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.LaneMarker left_lane_marker = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->left_lane_marker_, deterministic, target);
  }

  // optional .apollo.perception.LaneMarker right_lane_marker = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->right_lane_marker_, deterministic, target);
  }

  // repeated .apollo.perception.LaneMarker next_left_lane_marker = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->next_left_lane_marker_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->next_left_lane_marker(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.perception.LaneMarker next_right_lane_marker = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->next_right_lane_marker_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->next_right_lane_marker(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.LaneMarkers)
  return target;
}

size_t LaneMarkers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.LaneMarkers)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.perception.LaneMarker next_left_lane_marker = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->next_left_lane_marker_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->next_left_lane_marker(static_cast<int>(i)));
    }
  }

  // repeated .apollo.perception.LaneMarker next_right_lane_marker = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->next_right_lane_marker_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->next_right_lane_marker(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.perception.LaneMarker left_lane_marker = 1;
    if (has_left_lane_marker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->left_lane_marker_);
    }

    // optional .apollo.perception.LaneMarker right_lane_marker = 2;
    if (has_right_lane_marker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->right_lane_marker_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneMarkers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.LaneMarkers)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneMarkers* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneMarkers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.LaneMarkers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.LaneMarkers)
    MergeFrom(*source);
  }
}

void LaneMarkers::MergeFrom(const LaneMarkers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.LaneMarkers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  next_left_lane_marker_.MergeFrom(from.next_left_lane_marker_);
  next_right_lane_marker_.MergeFrom(from.next_right_lane_marker_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_left_lane_marker()->::apollo::perception::LaneMarker::MergeFrom(from.left_lane_marker());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_right_lane_marker()->::apollo::perception::LaneMarker::MergeFrom(from.right_lane_marker());
    }
  }
}

void LaneMarkers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.LaneMarkers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneMarkers::CopyFrom(const LaneMarkers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.LaneMarkers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneMarkers::IsInitialized() const {
  return true;
}

void LaneMarkers::Swap(LaneMarkers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneMarkers::InternalSwap(LaneMarkers* other) {
  using std::swap;
  next_left_lane_marker_.InternalSwap(&other->next_left_lane_marker_);
  next_right_lane_marker_.InternalSwap(&other->next_right_lane_marker_);
  swap(left_lane_marker_, other->left_lane_marker_);
  swap(right_lane_marker_, other->right_lane_marker_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneMarkers::GetMetadata() const {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LaneMarkers

// optional .apollo.perception.LaneMarker left_lane_marker = 1;
bool LaneMarkers::has_left_lane_marker() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LaneMarkers::set_has_left_lane_marker() {
  _has_bits_[0] |= 0x00000001u;
}
void LaneMarkers::clear_has_left_lane_marker() {
  _has_bits_[0] &= ~0x00000001u;
}
void LaneMarkers::clear_left_lane_marker() {
  if (left_lane_marker_ != NULL) left_lane_marker_->::apollo::perception::LaneMarker::Clear();
  clear_has_left_lane_marker();
}
const ::apollo::perception::LaneMarker& LaneMarkers::left_lane_marker() const {
  const ::apollo::perception::LaneMarker* p = left_lane_marker_;
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarkers.left_lane_marker)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::perception::LaneMarker*>(
      &::apollo::perception::_LaneMarker_default_instance_);
}
::apollo::perception::LaneMarker* LaneMarkers::mutable_left_lane_marker() {
  set_has_left_lane_marker();
  if (left_lane_marker_ == NULL) {
    left_lane_marker_ = new ::apollo::perception::LaneMarker;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.LaneMarkers.left_lane_marker)
  return left_lane_marker_;
}
::apollo::perception::LaneMarker* LaneMarkers::release_left_lane_marker() {
  // @@protoc_insertion_point(field_release:apollo.perception.LaneMarkers.left_lane_marker)
  clear_has_left_lane_marker();
  ::apollo::perception::LaneMarker* temp = left_lane_marker_;
  left_lane_marker_ = NULL;
  return temp;
}
void LaneMarkers::set_allocated_left_lane_marker(::apollo::perception::LaneMarker* left_lane_marker) {
  delete left_lane_marker_;
  left_lane_marker_ = left_lane_marker;
  if (left_lane_marker) {
    set_has_left_lane_marker();
  } else {
    clear_has_left_lane_marker();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.LaneMarkers.left_lane_marker)
}

// optional .apollo.perception.LaneMarker right_lane_marker = 2;
bool LaneMarkers::has_right_lane_marker() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LaneMarkers::set_has_right_lane_marker() {
  _has_bits_[0] |= 0x00000002u;
}
void LaneMarkers::clear_has_right_lane_marker() {
  _has_bits_[0] &= ~0x00000002u;
}
void LaneMarkers::clear_right_lane_marker() {
  if (right_lane_marker_ != NULL) right_lane_marker_->::apollo::perception::LaneMarker::Clear();
  clear_has_right_lane_marker();
}
const ::apollo::perception::LaneMarker& LaneMarkers::right_lane_marker() const {
  const ::apollo::perception::LaneMarker* p = right_lane_marker_;
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarkers.right_lane_marker)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::perception::LaneMarker*>(
      &::apollo::perception::_LaneMarker_default_instance_);
}
::apollo::perception::LaneMarker* LaneMarkers::mutable_right_lane_marker() {
  set_has_right_lane_marker();
  if (right_lane_marker_ == NULL) {
    right_lane_marker_ = new ::apollo::perception::LaneMarker;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.LaneMarkers.right_lane_marker)
  return right_lane_marker_;
}
::apollo::perception::LaneMarker* LaneMarkers::release_right_lane_marker() {
  // @@protoc_insertion_point(field_release:apollo.perception.LaneMarkers.right_lane_marker)
  clear_has_right_lane_marker();
  ::apollo::perception::LaneMarker* temp = right_lane_marker_;
  right_lane_marker_ = NULL;
  return temp;
}
void LaneMarkers::set_allocated_right_lane_marker(::apollo::perception::LaneMarker* right_lane_marker) {
  delete right_lane_marker_;
  right_lane_marker_ = right_lane_marker;
  if (right_lane_marker) {
    set_has_right_lane_marker();
  } else {
    clear_has_right_lane_marker();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.LaneMarkers.right_lane_marker)
}

// repeated .apollo.perception.LaneMarker next_left_lane_marker = 3;
int LaneMarkers::next_left_lane_marker_size() const {
  return next_left_lane_marker_.size();
}
void LaneMarkers::clear_next_left_lane_marker() {
  next_left_lane_marker_.Clear();
}
const ::apollo::perception::LaneMarker& LaneMarkers::next_left_lane_marker(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarkers.next_left_lane_marker)
  return next_left_lane_marker_.Get(index);
}
::apollo::perception::LaneMarker* LaneMarkers::mutable_next_left_lane_marker(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.LaneMarkers.next_left_lane_marker)
  return next_left_lane_marker_.Mutable(index);
}
::apollo::perception::LaneMarker* LaneMarkers::add_next_left_lane_marker() {
  // @@protoc_insertion_point(field_add:apollo.perception.LaneMarkers.next_left_lane_marker)
  return next_left_lane_marker_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::perception::LaneMarker >*
LaneMarkers::mutable_next_left_lane_marker() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.LaneMarkers.next_left_lane_marker)
  return &next_left_lane_marker_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::perception::LaneMarker >&
LaneMarkers::next_left_lane_marker() const {
  // @@protoc_insertion_point(field_list:apollo.perception.LaneMarkers.next_left_lane_marker)
  return next_left_lane_marker_;
}

// repeated .apollo.perception.LaneMarker next_right_lane_marker = 4;
int LaneMarkers::next_right_lane_marker_size() const {
  return next_right_lane_marker_.size();
}
void LaneMarkers::clear_next_right_lane_marker() {
  next_right_lane_marker_.Clear();
}
const ::apollo::perception::LaneMarker& LaneMarkers::next_right_lane_marker(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarkers.next_right_lane_marker)
  return next_right_lane_marker_.Get(index);
}
::apollo::perception::LaneMarker* LaneMarkers::mutable_next_right_lane_marker(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.LaneMarkers.next_right_lane_marker)
  return next_right_lane_marker_.Mutable(index);
}
::apollo::perception::LaneMarker* LaneMarkers::add_next_right_lane_marker() {
  // @@protoc_insertion_point(field_add:apollo.perception.LaneMarkers.next_right_lane_marker)
  return next_right_lane_marker_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::perception::LaneMarker >*
LaneMarkers::mutable_next_right_lane_marker() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.LaneMarkers.next_right_lane_marker)
  return &next_right_lane_marker_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::perception::LaneMarker >&
LaneMarkers::next_right_lane_marker() const {
  // @@protoc_insertion_point(field_list:apollo.perception.LaneMarkers.next_right_lane_marker)
  return next_right_lane_marker_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CIPVInfo::kCipvIdFieldNumber;
const int CIPVInfo::kPotentialCipvIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CIPVInfo::CIPVInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_perception_5fobstacle_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.CIPVInfo)
}
CIPVInfo::CIPVInfo(const CIPVInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      potential_cipv_id_(from.potential_cipv_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cipv_id_ = from.cipv_id_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.CIPVInfo)
}

void CIPVInfo::SharedCtor() {
  _cached_size_ = 0;
  cipv_id_ = 0;
}

CIPVInfo::~CIPVInfo() {
  // @@protoc_insertion_point(destructor:apollo.perception.CIPVInfo)
  SharedDtor();
}

void CIPVInfo::SharedDtor() {
}

void CIPVInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CIPVInfo::descriptor() {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CIPVInfo& CIPVInfo::default_instance() {
  protobuf_perception_5fobstacle_2eproto::InitDefaults();
  return *internal_default_instance();
}

CIPVInfo* CIPVInfo::New(::google::protobuf::Arena* arena) const {
  CIPVInfo* n = new CIPVInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CIPVInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.CIPVInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  potential_cipv_id_.Clear();
  cipv_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CIPVInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.CIPVInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cipv_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_cipv_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cipv_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 potential_cipv_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_potential_cipv_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_potential_cipv_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.CIPVInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.CIPVInfo)
  return false;
#undef DO_
}

void CIPVInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.CIPVInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cipv_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cipv_id(), output);
  }

  // repeated int32 potential_cipv_id = 2;
  for (int i = 0, n = this->potential_cipv_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->potential_cipv_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.CIPVInfo)
}

::google::protobuf::uint8* CIPVInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.CIPVInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cipv_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cipv_id(), target);
  }

  // repeated int32 potential_cipv_id = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(2, this->potential_cipv_id_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.CIPVInfo)
  return target;
}

size_t CIPVInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.CIPVInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int32 potential_cipv_id = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->potential_cipv_id_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->potential_cipv_id_size());
    total_size += data_size;
  }

  // optional int32 cipv_id = 1;
  if (has_cipv_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cipv_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CIPVInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.CIPVInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CIPVInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CIPVInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.CIPVInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.CIPVInfo)
    MergeFrom(*source);
  }
}

void CIPVInfo::MergeFrom(const CIPVInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.CIPVInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  potential_cipv_id_.MergeFrom(from.potential_cipv_id_);
  if (from.has_cipv_id()) {
    set_cipv_id(from.cipv_id());
  }
}

void CIPVInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.CIPVInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CIPVInfo::CopyFrom(const CIPVInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.CIPVInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIPVInfo::IsInitialized() const {
  return true;
}

void CIPVInfo::Swap(CIPVInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CIPVInfo::InternalSwap(CIPVInfo* other) {
  using std::swap;
  potential_cipv_id_.InternalSwap(&other->potential_cipv_id_);
  swap(cipv_id_, other->cipv_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CIPVInfo::GetMetadata() const {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CIPVInfo

// optional int32 cipv_id = 1;
bool CIPVInfo::has_cipv_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CIPVInfo::set_has_cipv_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CIPVInfo::clear_has_cipv_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CIPVInfo::clear_cipv_id() {
  cipv_id_ = 0;
  clear_has_cipv_id();
}
::google::protobuf::int32 CIPVInfo::cipv_id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.CIPVInfo.cipv_id)
  return cipv_id_;
}
void CIPVInfo::set_cipv_id(::google::protobuf::int32 value) {
  set_has_cipv_id();
  cipv_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.CIPVInfo.cipv_id)
}

// repeated int32 potential_cipv_id = 2;
int CIPVInfo::potential_cipv_id_size() const {
  return potential_cipv_id_.size();
}
void CIPVInfo::clear_potential_cipv_id() {
  potential_cipv_id_.Clear();
}
::google::protobuf::int32 CIPVInfo::potential_cipv_id(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.CIPVInfo.potential_cipv_id)
  return potential_cipv_id_.Get(index);
}
void CIPVInfo::set_potential_cipv_id(int index, ::google::protobuf::int32 value) {
  potential_cipv_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.CIPVInfo.potential_cipv_id)
}
void CIPVInfo::add_potential_cipv_id(::google::protobuf::int32 value) {
  potential_cipv_id_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.CIPVInfo.potential_cipv_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CIPVInfo::potential_cipv_id() const {
  // @@protoc_insertion_point(field_list:apollo.perception.CIPVInfo.potential_cipv_id)
  return potential_cipv_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CIPVInfo::mutable_potential_cipv_id() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.CIPVInfo.potential_cipv_id)
  return &potential_cipv_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerceptionObstacles::kPerceptionObstacleFieldNumber;
const int PerceptionObstacles::kHeaderFieldNumber;
const int PerceptionObstacles::kErrorCodeFieldNumber;
const int PerceptionObstacles::kLaneMarkerFieldNumber;
const int PerceptionObstacles::kCipvInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerceptionObstacles::PerceptionObstacles()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_perception_5fobstacle_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.PerceptionObstacles)
}
PerceptionObstacles::PerceptionObstacles(const PerceptionObstacles& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      perception_obstacle_(from.perception_obstacle_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_lane_marker()) {
    lane_marker_ = new ::apollo::perception::LaneMarkers(*from.lane_marker_);
  } else {
    lane_marker_ = NULL;
  }
  if (from.has_cipv_info()) {
    cipv_info_ = new ::apollo::perception::CIPVInfo(*from.cipv_info_);
  } else {
    cipv_info_ = NULL;
  }
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.PerceptionObstacles)
}

void PerceptionObstacles::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&header_)) + sizeof(error_code_));
}

PerceptionObstacles::~PerceptionObstacles() {
  // @@protoc_insertion_point(destructor:apollo.perception.PerceptionObstacles)
  SharedDtor();
}

void PerceptionObstacles::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete lane_marker_;
  if (this != internal_default_instance()) delete cipv_info_;
}

void PerceptionObstacles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PerceptionObstacles::descriptor() {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PerceptionObstacles& PerceptionObstacles::default_instance() {
  protobuf_perception_5fobstacle_2eproto::InitDefaults();
  return *internal_default_instance();
}

PerceptionObstacles* PerceptionObstacles::New(::google::protobuf::Arena* arena) const {
  PerceptionObstacles* n = new PerceptionObstacles;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PerceptionObstacles::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.PerceptionObstacles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  perception_obstacle_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::apollo::common::Header::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(lane_marker_ != NULL);
      lane_marker_->::apollo::perception::LaneMarkers::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(cipv_info_ != NULL);
      cipv_info_->::apollo::perception::CIPVInfo::Clear();
    }
  }
  error_code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PerceptionObstacles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.PerceptionObstacles)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.perception.PerceptionObstacle perception_obstacle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_perception_obstacle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Header header = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.ErrorCode error_code = 3 [default = OK];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::common::ErrorCode_IsValid(value)) {
            set_error_code(static_cast< ::apollo::common::ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.perception.LaneMarkers lane_marker = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lane_marker()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.perception.CIPVInfo cipv_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cipv_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.PerceptionObstacles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.PerceptionObstacles)
  return false;
#undef DO_
}

void PerceptionObstacles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.PerceptionObstacles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.perception.PerceptionObstacle perception_obstacle = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->perception_obstacle_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->perception_obstacle(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->header_, output);
  }

  // optional .apollo.common.ErrorCode error_code = 3 [default = OK];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->error_code(), output);
  }

  // optional .apollo.perception.LaneMarkers lane_marker = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->lane_marker_, output);
  }

  // optional .apollo.perception.CIPVInfo cipv_info = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->cipv_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.PerceptionObstacles)
}

::google::protobuf::uint8* PerceptionObstacles::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.PerceptionObstacles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.perception.PerceptionObstacle perception_obstacle = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->perception_obstacle_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->perception_obstacle(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->header_, deterministic, target);
  }

  // optional .apollo.common.ErrorCode error_code = 3 [default = OK];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->error_code(), target);
  }

  // optional .apollo.perception.LaneMarkers lane_marker = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->lane_marker_, deterministic, target);
  }

  // optional .apollo.perception.CIPVInfo cipv_info = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->cipv_info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.PerceptionObstacles)
  return target;
}

size_t PerceptionObstacles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.PerceptionObstacles)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.perception.PerceptionObstacle perception_obstacle = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->perception_obstacle_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->perception_obstacle(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .apollo.common.Header header = 2;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .apollo.perception.LaneMarkers lane_marker = 4;
    if (has_lane_marker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lane_marker_);
    }

    // optional .apollo.perception.CIPVInfo cipv_info = 5;
    if (has_cipv_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cipv_info_);
    }

    // optional .apollo.common.ErrorCode error_code = 3 [default = OK];
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PerceptionObstacles::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.PerceptionObstacles)
  GOOGLE_DCHECK_NE(&from, this);
  const PerceptionObstacles* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PerceptionObstacles>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.PerceptionObstacles)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.PerceptionObstacles)
    MergeFrom(*source);
  }
}

void PerceptionObstacles::MergeFrom(const PerceptionObstacles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.PerceptionObstacles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  perception_obstacle_.MergeFrom(from.perception_obstacle_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_lane_marker()->::apollo::perception::LaneMarkers::MergeFrom(from.lane_marker());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_cipv_info()->::apollo::perception::CIPVInfo::MergeFrom(from.cipv_info());
    }
    if (cached_has_bits & 0x00000008u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PerceptionObstacles::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.PerceptionObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerceptionObstacles::CopyFrom(const PerceptionObstacles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.PerceptionObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerceptionObstacles::IsInitialized() const {
  return true;
}

void PerceptionObstacles::Swap(PerceptionObstacles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerceptionObstacles::InternalSwap(PerceptionObstacles* other) {
  using std::swap;
  perception_obstacle_.InternalSwap(&other->perception_obstacle_);
  swap(header_, other->header_);
  swap(lane_marker_, other->lane_marker_);
  swap(cipv_info_, other->cipv_info_);
  swap(error_code_, other->error_code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PerceptionObstacles::GetMetadata() const {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PerceptionObstacles

// repeated .apollo.perception.PerceptionObstacle perception_obstacle = 1;
int PerceptionObstacles::perception_obstacle_size() const {
  return perception_obstacle_.size();
}
void PerceptionObstacles::clear_perception_obstacle() {
  perception_obstacle_.Clear();
}
const ::apollo::perception::PerceptionObstacle& PerceptionObstacles::perception_obstacle(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacles.perception_obstacle)
  return perception_obstacle_.Get(index);
}
::apollo::perception::PerceptionObstacle* PerceptionObstacles::mutable_perception_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacles.perception_obstacle)
  return perception_obstacle_.Mutable(index);
}
::apollo::perception::PerceptionObstacle* PerceptionObstacles::add_perception_obstacle() {
  // @@protoc_insertion_point(field_add:apollo.perception.PerceptionObstacles.perception_obstacle)
  return perception_obstacle_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::perception::PerceptionObstacle >*
PerceptionObstacles::mutable_perception_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.PerceptionObstacles.perception_obstacle)
  return &perception_obstacle_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::perception::PerceptionObstacle >&
PerceptionObstacles::perception_obstacle() const {
  // @@protoc_insertion_point(field_list:apollo.perception.PerceptionObstacles.perception_obstacle)
  return perception_obstacle_;
}

// optional .apollo.common.Header header = 2;
bool PerceptionObstacles::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PerceptionObstacles::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void PerceptionObstacles::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void PerceptionObstacles::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
const ::apollo::common::Header& PerceptionObstacles::header() const {
  const ::apollo::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacles.header)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Header*>(
      &::apollo::common::_Header_default_instance_);
}
::apollo::common::Header* PerceptionObstacles::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacles.header)
  return header_;
}
::apollo::common::Header* PerceptionObstacles::release_header() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacles.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void PerceptionObstacles::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacles.header)
}

// optional .apollo.common.ErrorCode error_code = 3 [default = OK];
bool PerceptionObstacles::has_error_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PerceptionObstacles::set_has_error_code() {
  _has_bits_[0] |= 0x00000008u;
}
void PerceptionObstacles::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000008u;
}
void PerceptionObstacles::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
::apollo::common::ErrorCode PerceptionObstacles::error_code() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacles.error_code)
  return static_cast< ::apollo::common::ErrorCode >(error_code_);
}
void PerceptionObstacles::set_error_code(::apollo::common::ErrorCode value) {
  assert(::apollo::common::ErrorCode_IsValid(value));
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacles.error_code)
}

// optional .apollo.perception.LaneMarkers lane_marker = 4;
bool PerceptionObstacles::has_lane_marker() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PerceptionObstacles::set_has_lane_marker() {
  _has_bits_[0] |= 0x00000002u;
}
void PerceptionObstacles::clear_has_lane_marker() {
  _has_bits_[0] &= ~0x00000002u;
}
void PerceptionObstacles::clear_lane_marker() {
  if (lane_marker_ != NULL) lane_marker_->::apollo::perception::LaneMarkers::Clear();
  clear_has_lane_marker();
}
const ::apollo::perception::LaneMarkers& PerceptionObstacles::lane_marker() const {
  const ::apollo::perception::LaneMarkers* p = lane_marker_;
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacles.lane_marker)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::perception::LaneMarkers*>(
      &::apollo::perception::_LaneMarkers_default_instance_);
}
::apollo::perception::LaneMarkers* PerceptionObstacles::mutable_lane_marker() {
  set_has_lane_marker();
  if (lane_marker_ == NULL) {
    lane_marker_ = new ::apollo::perception::LaneMarkers;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacles.lane_marker)
  return lane_marker_;
}
::apollo::perception::LaneMarkers* PerceptionObstacles::release_lane_marker() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacles.lane_marker)
  clear_has_lane_marker();
  ::apollo::perception::LaneMarkers* temp = lane_marker_;
  lane_marker_ = NULL;
  return temp;
}
void PerceptionObstacles::set_allocated_lane_marker(::apollo::perception::LaneMarkers* lane_marker) {
  delete lane_marker_;
  lane_marker_ = lane_marker;
  if (lane_marker) {
    set_has_lane_marker();
  } else {
    clear_has_lane_marker();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacles.lane_marker)
}

// optional .apollo.perception.CIPVInfo cipv_info = 5;
bool PerceptionObstacles::has_cipv_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PerceptionObstacles::set_has_cipv_info() {
  _has_bits_[0] |= 0x00000004u;
}
void PerceptionObstacles::clear_has_cipv_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void PerceptionObstacles::clear_cipv_info() {
  if (cipv_info_ != NULL) cipv_info_->::apollo::perception::CIPVInfo::Clear();
  clear_has_cipv_info();
}
const ::apollo::perception::CIPVInfo& PerceptionObstacles::cipv_info() const {
  const ::apollo::perception::CIPVInfo* p = cipv_info_;
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacles.cipv_info)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::perception::CIPVInfo*>(
      &::apollo::perception::_CIPVInfo_default_instance_);
}
::apollo::perception::CIPVInfo* PerceptionObstacles::mutable_cipv_info() {
  set_has_cipv_info();
  if (cipv_info_ == NULL) {
    cipv_info_ = new ::apollo::perception::CIPVInfo;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacles.cipv_info)
  return cipv_info_;
}
::apollo::perception::CIPVInfo* PerceptionObstacles::release_cipv_info() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacles.cipv_info)
  clear_has_cipv_info();
  ::apollo::perception::CIPVInfo* temp = cipv_info_;
  cipv_info_ = NULL;
  return temp;
}
void PerceptionObstacles::set_allocated_cipv_info(::apollo::perception::CIPVInfo* cipv_info) {
  delete cipv_info_;
  cipv_info_ = cipv_info;
  if (cipv_info) {
    set_has_cipv_info();
  } else {
    clear_has_cipv_info();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacles.cipv_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
