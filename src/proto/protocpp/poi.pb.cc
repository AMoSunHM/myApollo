// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: poi.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "poi.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace routing {
class LandmarkDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Landmark>
     _instance;
} _Landmark_default_instance_;
class POIDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<POI>
     _instance;
} _POI_default_instance_;

namespace protobuf_poi_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Landmark, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Landmark, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Landmark, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Landmark, waypoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Landmark, parking_space_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Landmark, parking_info_),
  0,
  ~0u,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POI, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POI, landmark_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(Landmark)},
  { 13, 19, sizeof(POI)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Landmark_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_POI_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "poi.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::apollo::routing::protobuf_routing_2eproto::InitDefaults();
  _Landmark_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Landmark_default_instance_);_POI_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_POI_default_instance_);_Landmark_default_instance_._instance.get_mutable()->parking_info_ = const_cast< ::apollo::routing::ParkingInfo*>(
      ::apollo::routing::ParkingInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\tpoi.proto\022\016apollo.routing\032\rrouting.pro"
      "to\"\231\001\n\010Landmark\022\014\n\004name\030\001 \001(\t\022.\n\010waypoin"
      "t\030\002 \003(\0132\034.apollo.routing.LaneWaypoint\022\034\n"
      "\020parking_space_id\030\003 \001(\tB\002\030\001\0221\n\014parking_i"
      "nfo\030\004 \001(\0132\033.apollo.routing.ParkingInfo\"1"
      "\n\003POI\022*\n\010landmark\030\001 \003(\0132\030.apollo.routing"
      ".Landmark"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 249);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "poi.proto", &protobuf_RegisterTypes);
  ::apollo::routing::protobuf_routing_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_poi_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Landmark::kNameFieldNumber;
const int Landmark::kWaypointFieldNumber;
const int Landmark::kParkingSpaceIdFieldNumber;
const int Landmark::kParkingInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Landmark::Landmark()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_poi_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.routing.Landmark)
}
Landmark::Landmark(const Landmark& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      waypoint_(from.waypoint_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  parking_space_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_parking_space_id()) {
    parking_space_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parking_space_id_);
  }
  if (from.has_parking_info()) {
    parking_info_ = new ::apollo::routing::ParkingInfo(*from.parking_info_);
  } else {
    parking_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.routing.Landmark)
}

void Landmark::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parking_space_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parking_info_ = NULL;
}

Landmark::~Landmark() {
  // @@protoc_insertion_point(destructor:apollo.routing.Landmark)
  SharedDtor();
}

void Landmark::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parking_space_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parking_info_;
}

void Landmark::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Landmark::descriptor() {
  protobuf_poi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_poi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Landmark& Landmark::default_instance() {
  protobuf_poi_2eproto::InitDefaults();
  return *internal_default_instance();
}

Landmark* Landmark::New(::google::protobuf::Arena* arena) const {
  Landmark* n = new Landmark;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Landmark::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.Landmark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  waypoint_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!parking_space_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*parking_space_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(parking_info_ != NULL);
      parking_info_->::apollo::routing::ParkingInfo::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Landmark::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.routing.Landmark)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.routing.Landmark.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.routing.LaneWaypoint waypoint = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_waypoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string parking_space_id = 3 [deprecated = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parking_space_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parking_space_id().data(), static_cast<int>(this->parking_space_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.routing.Landmark.parking_space_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.routing.ParkingInfo parking_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parking_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.routing.Landmark)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.routing.Landmark)
  return false;
#undef DO_
}

void Landmark::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.routing.Landmark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.Landmark.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .apollo.routing.LaneWaypoint waypoint = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->waypoint_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->waypoint(static_cast<int>(i)), output);
  }

  // optional string parking_space_id = 3 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parking_space_id().data(), static_cast<int>(this->parking_space_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.Landmark.parking_space_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->parking_space_id(), output);
  }

  // optional .apollo.routing.ParkingInfo parking_info = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->parking_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.routing.Landmark)
}

::google::protobuf::uint8* Landmark::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.Landmark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.Landmark.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .apollo.routing.LaneWaypoint waypoint = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->waypoint_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->waypoint(static_cast<int>(i)), deterministic, target);
  }

  // optional string parking_space_id = 3 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parking_space_id().data(), static_cast<int>(this->parking_space_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.Landmark.parking_space_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->parking_space_id(), target);
  }

  // optional .apollo.routing.ParkingInfo parking_info = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->parking_info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.Landmark)
  return target;
}

size_t Landmark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.Landmark)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.routing.LaneWaypoint waypoint = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->waypoint_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->waypoint(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string parking_space_id = 3 [deprecated = true];
    if (has_parking_space_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parking_space_id());
    }

    // optional .apollo.routing.ParkingInfo parking_info = 4;
    if (has_parking_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->parking_info_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Landmark::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.routing.Landmark)
  GOOGLE_DCHECK_NE(&from, this);
  const Landmark* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Landmark>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.routing.Landmark)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.routing.Landmark)
    MergeFrom(*source);
  }
}

void Landmark::MergeFrom(const Landmark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.Landmark)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  waypoint_.MergeFrom(from.waypoint_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_parking_space_id();
      parking_space_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parking_space_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_parking_info()->::apollo::routing::ParkingInfo::MergeFrom(from.parking_info());
    }
  }
}

void Landmark::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.routing.Landmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Landmark::CopyFrom(const Landmark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.Landmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Landmark::IsInitialized() const {
  return true;
}

void Landmark::Swap(Landmark* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Landmark::InternalSwap(Landmark* other) {
  using std::swap;
  waypoint_.InternalSwap(&other->waypoint_);
  name_.Swap(&other->name_);
  parking_space_id_.Swap(&other->parking_space_id_);
  swap(parking_info_, other->parking_info_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Landmark::GetMetadata() const {
  protobuf_poi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_poi_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Landmark

// optional string name = 1;
bool Landmark::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Landmark::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Landmark::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Landmark::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Landmark::name() const {
  // @@protoc_insertion_point(field_get:apollo.routing.Landmark.name)
  return name_.GetNoArena();
}
void Landmark::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.routing.Landmark.name)
}
#if LANG_CXX11
void Landmark::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.routing.Landmark.name)
}
#endif
void Landmark::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.routing.Landmark.name)
}
void Landmark::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.routing.Landmark.name)
}
::std::string* Landmark::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.routing.Landmark.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Landmark::release_name() {
  // @@protoc_insertion_point(field_release:apollo.routing.Landmark.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Landmark::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.Landmark.name)
}

// repeated .apollo.routing.LaneWaypoint waypoint = 2;
int Landmark::waypoint_size() const {
  return waypoint_.size();
}
void Landmark::clear_waypoint() {
  waypoint_.Clear();
}
const ::apollo::routing::LaneWaypoint& Landmark::waypoint(int index) const {
  // @@protoc_insertion_point(field_get:apollo.routing.Landmark.waypoint)
  return waypoint_.Get(index);
}
::apollo::routing::LaneWaypoint* Landmark::mutable_waypoint(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.routing.Landmark.waypoint)
  return waypoint_.Mutable(index);
}
::apollo::routing::LaneWaypoint* Landmark::add_waypoint() {
  // @@protoc_insertion_point(field_add:apollo.routing.Landmark.waypoint)
  return waypoint_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::routing::LaneWaypoint >*
Landmark::mutable_waypoint() {
  // @@protoc_insertion_point(field_mutable_list:apollo.routing.Landmark.waypoint)
  return &waypoint_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::routing::LaneWaypoint >&
Landmark::waypoint() const {
  // @@protoc_insertion_point(field_list:apollo.routing.Landmark.waypoint)
  return waypoint_;
}

// optional string parking_space_id = 3 [deprecated = true];
bool Landmark::has_parking_space_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Landmark::set_has_parking_space_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Landmark::clear_has_parking_space_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Landmark::clear_parking_space_id() {
  parking_space_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parking_space_id();
}
const ::std::string& Landmark::parking_space_id() const {
  // @@protoc_insertion_point(field_get:apollo.routing.Landmark.parking_space_id)
  return parking_space_id_.GetNoArena();
}
void Landmark::set_parking_space_id(const ::std::string& value) {
  set_has_parking_space_id();
  parking_space_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.routing.Landmark.parking_space_id)
}
#if LANG_CXX11
void Landmark::set_parking_space_id(::std::string&& value) {
  set_has_parking_space_id();
  parking_space_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.routing.Landmark.parking_space_id)
}
#endif
void Landmark::set_parking_space_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_parking_space_id();
  parking_space_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.routing.Landmark.parking_space_id)
}
void Landmark::set_parking_space_id(const char* value, size_t size) {
  set_has_parking_space_id();
  parking_space_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.routing.Landmark.parking_space_id)
}
::std::string* Landmark::mutable_parking_space_id() {
  set_has_parking_space_id();
  // @@protoc_insertion_point(field_mutable:apollo.routing.Landmark.parking_space_id)
  return parking_space_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Landmark::release_parking_space_id() {
  // @@protoc_insertion_point(field_release:apollo.routing.Landmark.parking_space_id)
  clear_has_parking_space_id();
  return parking_space_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Landmark::set_allocated_parking_space_id(::std::string* parking_space_id) {
  if (parking_space_id != NULL) {
    set_has_parking_space_id();
  } else {
    clear_has_parking_space_id();
  }
  parking_space_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parking_space_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.Landmark.parking_space_id)
}

// optional .apollo.routing.ParkingInfo parking_info = 4;
bool Landmark::has_parking_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Landmark::set_has_parking_info() {
  _has_bits_[0] |= 0x00000004u;
}
void Landmark::clear_has_parking_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void Landmark::clear_parking_info() {
  if (parking_info_ != NULL) parking_info_->::apollo::routing::ParkingInfo::Clear();
  clear_has_parking_info();
}
const ::apollo::routing::ParkingInfo& Landmark::parking_info() const {
  const ::apollo::routing::ParkingInfo* p = parking_info_;
  // @@protoc_insertion_point(field_get:apollo.routing.Landmark.parking_info)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::routing::ParkingInfo*>(
      &::apollo::routing::_ParkingInfo_default_instance_);
}
::apollo::routing::ParkingInfo* Landmark::mutable_parking_info() {
  set_has_parking_info();
  if (parking_info_ == NULL) {
    parking_info_ = new ::apollo::routing::ParkingInfo;
  }
  // @@protoc_insertion_point(field_mutable:apollo.routing.Landmark.parking_info)
  return parking_info_;
}
::apollo::routing::ParkingInfo* Landmark::release_parking_info() {
  // @@protoc_insertion_point(field_release:apollo.routing.Landmark.parking_info)
  clear_has_parking_info();
  ::apollo::routing::ParkingInfo* temp = parking_info_;
  parking_info_ = NULL;
  return temp;
}
void Landmark::set_allocated_parking_info(::apollo::routing::ParkingInfo* parking_info) {
  delete parking_info_;
  parking_info_ = parking_info;
  if (parking_info) {
    set_has_parking_info();
  } else {
    clear_has_parking_info();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.Landmark.parking_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int POI::kLandmarkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

POI::POI()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_poi_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.routing.POI)
}
POI::POI(const POI& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      landmark_(from.landmark_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.routing.POI)
}

void POI::SharedCtor() {
  _cached_size_ = 0;
}

POI::~POI() {
  // @@protoc_insertion_point(destructor:apollo.routing.POI)
  SharedDtor();
}

void POI::SharedDtor() {
}

void POI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* POI::descriptor() {
  protobuf_poi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_poi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const POI& POI::default_instance() {
  protobuf_poi_2eproto::InitDefaults();
  return *internal_default_instance();
}

POI* POI::New(::google::protobuf::Arena* arena) const {
  POI* n = new POI;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void POI::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.POI)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  landmark_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool POI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.routing.POI)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.routing.Landmark landmark = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_landmark()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.routing.POI)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.routing.POI)
  return false;
#undef DO_
}

void POI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.routing.POI)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.routing.Landmark landmark = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->landmark_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->landmark(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.routing.POI)
}

::google::protobuf::uint8* POI::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.POI)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.routing.Landmark landmark = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->landmark_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->landmark(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.POI)
  return target;
}

size_t POI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.POI)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.routing.Landmark landmark = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->landmark_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->landmark(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void POI::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.routing.POI)
  GOOGLE_DCHECK_NE(&from, this);
  const POI* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const POI>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.routing.POI)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.routing.POI)
    MergeFrom(*source);
  }
}

void POI::MergeFrom(const POI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.POI)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  landmark_.MergeFrom(from.landmark_);
}

void POI::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.routing.POI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void POI::CopyFrom(const POI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.POI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool POI::IsInitialized() const {
  return true;
}

void POI::Swap(POI* other) {
  if (other == this) return;
  InternalSwap(other);
}
void POI::InternalSwap(POI* other) {
  using std::swap;
  landmark_.InternalSwap(&other->landmark_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata POI::GetMetadata() const {
  protobuf_poi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_poi_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// POI

// repeated .apollo.routing.Landmark landmark = 1;
int POI::landmark_size() const {
  return landmark_.size();
}
void POI::clear_landmark() {
  landmark_.Clear();
}
const ::apollo::routing::Landmark& POI::landmark(int index) const {
  // @@protoc_insertion_point(field_get:apollo.routing.POI.landmark)
  return landmark_.Get(index);
}
::apollo::routing::Landmark* POI::mutable_landmark(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.routing.POI.landmark)
  return landmark_.Mutable(index);
}
::apollo::routing::Landmark* POI::add_landmark() {
  // @@protoc_insertion_point(field_add:apollo.routing.POI.landmark)
  return landmark_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::routing::Landmark >*
POI::mutable_landmark() {
  // @@protoc_insertion_point(field_mutable_list:apollo.routing.POI.landmark)
  return &landmark_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::routing::Landmark >&
POI::landmark() const {
  // @@protoc_insertion_point(field_list:apollo.routing.POI.landmark)
  return landmark_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace routing
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
