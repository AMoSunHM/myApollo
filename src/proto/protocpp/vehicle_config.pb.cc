// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "vehicle_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace common {
class TransformDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Transform>
     _instance;
} _Transform_default_instance_;
class ExtrinsicsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Extrinsics>
     _instance;
} _Extrinsics_default_instance_;
class VehicleIDDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VehicleID>
     _instance;
} _VehicleID_default_instance_;
class LatencyParamDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LatencyParam>
     _instance;
} _LatencyParam_default_instance_;
class VehicleParamDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VehicleParam>
     _instance;
} _VehicleParam_default_instance_;
class VehicleConfigDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VehicleConfig>
     _instance;
} _VehicleConfig_default_instance_;

namespace protobuf_vehicle_5fconfig_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, source_frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, target_frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, translation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, rotation_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extrinsics, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extrinsics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extrinsics, tansforms_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleID, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleID, vin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleID, plate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleID, other_unique_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyParam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyParam, dead_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyParam, rise_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyParam, peak_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyParam, settling_time_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, brand_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, vehicle_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, front_edge_to_center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, back_edge_to_center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, left_edge_to_center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, right_edge_to_center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, min_turn_radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, max_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, max_deceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, max_steer_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, max_steer_angle_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, min_steer_angle_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, steer_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, wheel_base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, wheel_rolling_radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, max_abs_speed_when_stopped_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, brake_deadzone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, throttle_deadzone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, steering_latency_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, throttle_latency_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleParam, brake_latency_param_),
  4,
  0,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  5,
  22,
  23,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleConfig, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleConfig, vehicle_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleConfig, extrinsics_),
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(Transform)},
  { 13, 19, sizeof(Extrinsics)},
  { 20, 28, sizeof(VehicleID)},
  { 31, 40, sizeof(LatencyParam)},
  { 44, 73, sizeof(VehicleParam)},
  { 97, 105, sizeof(VehicleConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Transform_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Extrinsics_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VehicleID_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LatencyParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VehicleParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VehicleConfig_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "vehicle_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::apollo::common::protobuf_header_2eproto::InitDefaults();
  ::apollo::common::protobuf_geometry_2eproto::InitDefaults();
  _Transform_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Transform_default_instance_);_Extrinsics_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Extrinsics_default_instance_);_VehicleID_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VehicleID_default_instance_);_LatencyParam_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LatencyParam_default_instance_);_VehicleParam_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VehicleParam_default_instance_);_VehicleConfig_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VehicleConfig_default_instance_);_Transform_default_instance_._instance.get_mutable()->translation_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  _Transform_default_instance_._instance.get_mutable()->rotation_ = const_cast< ::apollo::common::Quaternion*>(
      ::apollo::common::Quaternion::internal_default_instance());
  _VehicleParam_default_instance_._instance.get_mutable()->vehicle_id_ = const_cast< ::apollo::common::VehicleID*>(
      ::apollo::common::VehicleID::internal_default_instance());
  _VehicleParam_default_instance_._instance.get_mutable()->steering_latency_param_ = const_cast< ::apollo::common::LatencyParam*>(
      ::apollo::common::LatencyParam::internal_default_instance());
  _VehicleParam_default_instance_._instance.get_mutable()->throttle_latency_param_ = const_cast< ::apollo::common::LatencyParam*>(
      ::apollo::common::LatencyParam::internal_default_instance());
  _VehicleParam_default_instance_._instance.get_mutable()->brake_latency_param_ = const_cast< ::apollo::common::LatencyParam*>(
      ::apollo::common::LatencyParam::internal_default_instance());
  _VehicleConfig_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  _VehicleConfig_default_instance_._instance.get_mutable()->vehicle_param_ = const_cast< ::apollo::common::VehicleParam*>(
      ::apollo::common::VehicleParam::internal_default_instance());
  _VehicleConfig_default_instance_._instance.get_mutable()->extrinsics_ = const_cast< ::apollo::common::Extrinsics*>(
      ::apollo::common::Extrinsics::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024vehicle_config.proto\022\rapollo.common\032\014h"
      "eader.proto\032\016geometry.proto\"\221\001\n\tTransfor"
      "m\022\024\n\014source_frame\030\001 \001(\014\022\024\n\014target_frame\030"
      "\002 \001(\014\022+\n\013translation\030\003 \001(\0132\026.apollo.comm"
      "on.Point3D\022+\n\010rotation\030\004 \001(\0132\031.apollo.co"
      "mmon.Quaternion\"9\n\nExtrinsics\022+\n\ttansfor"
      "ms\030\001 \003(\0132\030.apollo.common.Transform\"@\n\tVe"
      "hicleID\022\013\n\003vin\030\001 \001(\t\022\r\n\005plate\030\002 \001(\t\022\027\n\017o"
      "ther_unique_id\030\003 \001(\t\"^\n\014LatencyParam\022\021\n\t"
      "dead_time\030\001 \001(\001\022\021\n\trise_time\030\002 \001(\001\022\021\n\tpe"
      "ak_time\030\003 \001(\001\022\025\n\rsettling_time\030\004 \001(\001\"\340\006\n"
      "\014VehicleParam\022*\n\005brand\030\001 \001(\0162\033.apollo.co"
      "mmon.VehicleBrand\022,\n\nvehicle_id\030\002 \001(\0132\030."
      "apollo.common.VehicleID\022!\n\024front_edge_to"
      "_center\030\003 \001(\001:\003nan\022 \n\023back_edge_to_cente"
      "r\030\004 \001(\001:\003nan\022 \n\023left_edge_to_center\030\005 \001("
      "\001:\003nan\022!\n\024right_edge_to_center\030\006 \001(\001:\003na"
      "n\022\023\n\006length\030\007 \001(\001:\003nan\022\022\n\005width\030\010 \001(\001:\003n"
      "an\022\023\n\006height\030\t \001(\001:\003nan\022\034\n\017min_turn_radi"
      "us\030\n \001(\001:\003nan\022\035\n\020max_acceleration\030\013 \001(\001:"
      "\003nan\022\035\n\020max_deceleration\030\014 \001(\001:\003nan\022\034\n\017m"
      "ax_steer_angle\030\r \001(\001:\003nan\022!\n\024max_steer_a"
      "ngle_rate\030\016 \001(\001:\003nan\022!\n\024min_steer_angle_"
      "rate\030\017 \001(\001:\003nan\022\030\n\013steer_ratio\030\020 \001(\001:\003na"
      "n\022\027\n\nwheel_base\030\021 \001(\001:\003nan\022!\n\024wheel_roll"
      "ing_radius\030\022 \001(\001:\003nan\022\'\n\032max_abs_speed_w"
      "hen_stopped\030\023 \001(\002:\003nan\022\033\n\016brake_deadzone"
      "\030\024 \001(\001:\003nan\022\036\n\021throttle_deadzone\030\025 \001(\001:\003"
      "nan\022;\n\026steering_latency_param\030\026 \001(\0132\033.ap"
      "ollo.common.LatencyParam\022;\n\026throttle_lat"
      "ency_param\030\027 \001(\0132\033.apollo.common.Latency"
      "Param\0228\n\023brake_latency_param\030\030 \001(\0132\033.apo"
      "llo.common.LatencyParam\"\231\001\n\rVehicleConfi"
      "g\022%\n\006header\030\001 \001(\0132\025.apollo.common.Header"
      "\0222\n\rvehicle_param\030\002 \001(\0132\033.apollo.common."
      "VehicleParam\022-\n\nextrinsics\030\003 \001(\0132\031.apoll"
      "o.common.Extrinsics*~\n\014VehicleBrand\022\017\n\013L"
      "INCOLN_MKZ\020\000\022\007\n\003GEM\020\001\022\t\n\005LEXUS\020\002\022\013\n\007TRAN"
      "SIT\020\003\022\007\n\003GE3\020\004\022\007\n\003WEY\020\005\022\014\n\010ZHONGYUN\020\006\022\006\n"
      "\002CH\020\007\022\010\n\004DKIT\020\010\022\n\n\006NEOLIX\020\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1587);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vehicle_config.proto", &protobuf_RegisterTypes);
  ::apollo::common::protobuf_header_2eproto::AddDescriptors();
  ::apollo::common::protobuf_geometry_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_vehicle_5fconfig_2eproto

const ::google::protobuf::EnumDescriptor* VehicleBrand_descriptor() {
  protobuf_vehicle_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vehicle_5fconfig_2eproto::file_level_enum_descriptors[0];
}
bool VehicleBrand_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transform::kSourceFrameFieldNumber;
const int Transform::kTargetFrameFieldNumber;
const int Transform::kTranslationFieldNumber;
const int Transform::kRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transform::Transform()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vehicle_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.Transform)
}
Transform::Transform(const Transform& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_frame_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source_frame()) {
    source_frame_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_frame_);
  }
  target_frame_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_target_frame()) {
    target_frame_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_frame_);
  }
  if (from.has_translation()) {
    translation_ = new ::apollo::common::Point3D(*from.translation_);
  } else {
    translation_ = NULL;
  }
  if (from.has_rotation()) {
    rotation_ = new ::apollo::common::Quaternion(*from.rotation_);
  } else {
    rotation_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.common.Transform)
}

void Transform::SharedCtor() {
  _cached_size_ = 0;
  source_frame_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_frame_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&translation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_) -
      reinterpret_cast<char*>(&translation_)) + sizeof(rotation_));
}

Transform::~Transform() {
  // @@protoc_insertion_point(destructor:apollo.common.Transform)
  SharedDtor();
}

void Transform::SharedDtor() {
  source_frame_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_frame_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete translation_;
  if (this != internal_default_instance()) delete rotation_;
}

void Transform::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transform::descriptor() {
  protobuf_vehicle_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vehicle_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Transform& Transform::default_instance() {
  protobuf_vehicle_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

Transform* Transform::New(::google::protobuf::Arena* arena) const {
  Transform* n = new Transform;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transform::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.Transform)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!source_frame_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*source_frame_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!target_frame_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*target_frame_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(translation_ != NULL);
      translation_->::apollo::common::Point3D::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(rotation_ != NULL);
      rotation_->::apollo::common::Quaternion::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Transform::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.Transform)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes source_frame = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_source_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes target_frame = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_target_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point3D translation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Quaternion rotation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.Transform)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.Transform)
  return false;
#undef DO_
}

void Transform::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.Transform)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes source_frame = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->source_frame(), output);
  }

  // optional bytes target_frame = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->target_frame(), output);
  }

  // optional .apollo.common.Point3D translation = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->translation_, output);
  }

  // optional .apollo.common.Quaternion rotation = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->rotation_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.Transform)
}

::google::protobuf::uint8* Transform::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.Transform)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes source_frame = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->source_frame(), target);
  }

  // optional bytes target_frame = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->target_frame(), target);
  }

  // optional .apollo.common.Point3D translation = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->translation_, deterministic, target);
  }

  // optional .apollo.common.Quaternion rotation = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->rotation_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.Transform)
  return target;
}

size_t Transform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.Transform)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes source_frame = 1;
    if (has_source_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->source_frame());
    }

    // optional bytes target_frame = 2;
    if (has_target_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->target_frame());
    }

    // optional .apollo.common.Point3D translation = 3;
    if (has_translation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->translation_);
    }

    // optional .apollo.common.Quaternion rotation = 4;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rotation_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transform::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.Transform)
  GOOGLE_DCHECK_NE(&from, this);
  const Transform* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transform>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.Transform)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.Transform)
    MergeFrom(*source);
  }
}

void Transform::MergeFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.Transform)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_source_frame();
      source_frame_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_frame_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_target_frame();
      target_frame_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_frame_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_translation()->::apollo::common::Point3D::MergeFrom(from.translation());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_rotation()->::apollo::common::Quaternion::MergeFrom(from.rotation());
    }
  }
}

void Transform::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.Transform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transform::CopyFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.Transform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transform::IsInitialized() const {
  return true;
}

void Transform::Swap(Transform* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transform::InternalSwap(Transform* other) {
  using std::swap;
  source_frame_.Swap(&other->source_frame_);
  target_frame_.Swap(&other->target_frame_);
  swap(translation_, other->translation_);
  swap(rotation_, other->rotation_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transform::GetMetadata() const {
  protobuf_vehicle_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vehicle_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transform

// optional bytes source_frame = 1;
bool Transform::has_source_frame() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Transform::set_has_source_frame() {
  _has_bits_[0] |= 0x00000001u;
}
void Transform::clear_has_source_frame() {
  _has_bits_[0] &= ~0x00000001u;
}
void Transform::clear_source_frame() {
  source_frame_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source_frame();
}
const ::std::string& Transform::source_frame() const {
  // @@protoc_insertion_point(field_get:apollo.common.Transform.source_frame)
  return source_frame_.GetNoArena();
}
void Transform::set_source_frame(const ::std::string& value) {
  set_has_source_frame();
  source_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.common.Transform.source_frame)
}
#if LANG_CXX11
void Transform::set_source_frame(::std::string&& value) {
  set_has_source_frame();
  source_frame_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.common.Transform.source_frame)
}
#endif
void Transform::set_source_frame(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source_frame();
  source_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.common.Transform.source_frame)
}
void Transform::set_source_frame(const void* value, size_t size) {
  set_has_source_frame();
  source_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.common.Transform.source_frame)
}
::std::string* Transform::mutable_source_frame() {
  set_has_source_frame();
  // @@protoc_insertion_point(field_mutable:apollo.common.Transform.source_frame)
  return source_frame_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transform::release_source_frame() {
  // @@protoc_insertion_point(field_release:apollo.common.Transform.source_frame)
  clear_has_source_frame();
  return source_frame_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transform::set_allocated_source_frame(::std::string* source_frame) {
  if (source_frame != NULL) {
    set_has_source_frame();
  } else {
    clear_has_source_frame();
  }
  source_frame_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_frame);
  // @@protoc_insertion_point(field_set_allocated:apollo.common.Transform.source_frame)
}

// optional bytes target_frame = 2;
bool Transform::has_target_frame() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Transform::set_has_target_frame() {
  _has_bits_[0] |= 0x00000002u;
}
void Transform::clear_has_target_frame() {
  _has_bits_[0] &= ~0x00000002u;
}
void Transform::clear_target_frame() {
  target_frame_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_target_frame();
}
const ::std::string& Transform::target_frame() const {
  // @@protoc_insertion_point(field_get:apollo.common.Transform.target_frame)
  return target_frame_.GetNoArena();
}
void Transform::set_target_frame(const ::std::string& value) {
  set_has_target_frame();
  target_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.common.Transform.target_frame)
}
#if LANG_CXX11
void Transform::set_target_frame(::std::string&& value) {
  set_has_target_frame();
  target_frame_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.common.Transform.target_frame)
}
#endif
void Transform::set_target_frame(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_target_frame();
  target_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.common.Transform.target_frame)
}
void Transform::set_target_frame(const void* value, size_t size) {
  set_has_target_frame();
  target_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.common.Transform.target_frame)
}
::std::string* Transform::mutable_target_frame() {
  set_has_target_frame();
  // @@protoc_insertion_point(field_mutable:apollo.common.Transform.target_frame)
  return target_frame_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transform::release_target_frame() {
  // @@protoc_insertion_point(field_release:apollo.common.Transform.target_frame)
  clear_has_target_frame();
  return target_frame_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transform::set_allocated_target_frame(::std::string* target_frame) {
  if (target_frame != NULL) {
    set_has_target_frame();
  } else {
    clear_has_target_frame();
  }
  target_frame_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_frame);
  // @@protoc_insertion_point(field_set_allocated:apollo.common.Transform.target_frame)
}

// optional .apollo.common.Point3D translation = 3;
bool Transform::has_translation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Transform::set_has_translation() {
  _has_bits_[0] |= 0x00000004u;
}
void Transform::clear_has_translation() {
  _has_bits_[0] &= ~0x00000004u;
}
void Transform::clear_translation() {
  if (translation_ != NULL) translation_->::apollo::common::Point3D::Clear();
  clear_has_translation();
}
const ::apollo::common::Point3D& Transform::translation() const {
  const ::apollo::common::Point3D* p = translation_;
  // @@protoc_insertion_point(field_get:apollo.common.Transform.translation)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Point3D*>(
      &::apollo::common::_Point3D_default_instance_);
}
::apollo::common::Point3D* Transform::mutable_translation() {
  set_has_translation();
  if (translation_ == NULL) {
    translation_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.Transform.translation)
  return translation_;
}
::apollo::common::Point3D* Transform::release_translation() {
  // @@protoc_insertion_point(field_release:apollo.common.Transform.translation)
  clear_has_translation();
  ::apollo::common::Point3D* temp = translation_;
  translation_ = NULL;
  return temp;
}
void Transform::set_allocated_translation(::apollo::common::Point3D* translation) {
  delete translation_;
  translation_ = translation;
  if (translation) {
    set_has_translation();
  } else {
    clear_has_translation();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.common.Transform.translation)
}

// optional .apollo.common.Quaternion rotation = 4;
bool Transform::has_rotation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Transform::set_has_rotation() {
  _has_bits_[0] |= 0x00000008u;
}
void Transform::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000008u;
}
void Transform::clear_rotation() {
  if (rotation_ != NULL) rotation_->::apollo::common::Quaternion::Clear();
  clear_has_rotation();
}
const ::apollo::common::Quaternion& Transform::rotation() const {
  const ::apollo::common::Quaternion* p = rotation_;
  // @@protoc_insertion_point(field_get:apollo.common.Transform.rotation)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Quaternion*>(
      &::apollo::common::_Quaternion_default_instance_);
}
::apollo::common::Quaternion* Transform::mutable_rotation() {
  set_has_rotation();
  if (rotation_ == NULL) {
    rotation_ = new ::apollo::common::Quaternion;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.Transform.rotation)
  return rotation_;
}
::apollo::common::Quaternion* Transform::release_rotation() {
  // @@protoc_insertion_point(field_release:apollo.common.Transform.rotation)
  clear_has_rotation();
  ::apollo::common::Quaternion* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
void Transform::set_allocated_rotation(::apollo::common::Quaternion* rotation) {
  delete rotation_;
  rotation_ = rotation;
  if (rotation) {
    set_has_rotation();
  } else {
    clear_has_rotation();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.common.Transform.rotation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Extrinsics::kTansformsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Extrinsics::Extrinsics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vehicle_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.Extrinsics)
}
Extrinsics::Extrinsics(const Extrinsics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tansforms_(from.tansforms_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.common.Extrinsics)
}

void Extrinsics::SharedCtor() {
  _cached_size_ = 0;
}

Extrinsics::~Extrinsics() {
  // @@protoc_insertion_point(destructor:apollo.common.Extrinsics)
  SharedDtor();
}

void Extrinsics::SharedDtor() {
}

void Extrinsics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Extrinsics::descriptor() {
  protobuf_vehicle_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vehicle_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Extrinsics& Extrinsics::default_instance() {
  protobuf_vehicle_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

Extrinsics* Extrinsics::New(::google::protobuf::Arena* arena) const {
  Extrinsics* n = new Extrinsics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Extrinsics::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.Extrinsics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tansforms_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Extrinsics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.Extrinsics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.common.Transform tansforms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tansforms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.Extrinsics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.Extrinsics)
  return false;
#undef DO_
}

void Extrinsics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.Extrinsics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.common.Transform tansforms = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tansforms_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tansforms(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.Extrinsics)
}

::google::protobuf::uint8* Extrinsics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.Extrinsics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.common.Transform tansforms = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tansforms_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->tansforms(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.Extrinsics)
  return target;
}

size_t Extrinsics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.Extrinsics)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.common.Transform tansforms = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tansforms_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tansforms(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Extrinsics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.Extrinsics)
  GOOGLE_DCHECK_NE(&from, this);
  const Extrinsics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Extrinsics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.Extrinsics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.Extrinsics)
    MergeFrom(*source);
  }
}

void Extrinsics::MergeFrom(const Extrinsics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.Extrinsics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tansforms_.MergeFrom(from.tansforms_);
}

void Extrinsics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.Extrinsics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Extrinsics::CopyFrom(const Extrinsics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.Extrinsics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extrinsics::IsInitialized() const {
  return true;
}

void Extrinsics::Swap(Extrinsics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Extrinsics::InternalSwap(Extrinsics* other) {
  using std::swap;
  tansforms_.InternalSwap(&other->tansforms_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Extrinsics::GetMetadata() const {
  protobuf_vehicle_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vehicle_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Extrinsics

// repeated .apollo.common.Transform tansforms = 1;
int Extrinsics::tansforms_size() const {
  return tansforms_.size();
}
void Extrinsics::clear_tansforms() {
  tansforms_.Clear();
}
const ::apollo::common::Transform& Extrinsics::tansforms(int index) const {
  // @@protoc_insertion_point(field_get:apollo.common.Extrinsics.tansforms)
  return tansforms_.Get(index);
}
::apollo::common::Transform* Extrinsics::mutable_tansforms(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.common.Extrinsics.tansforms)
  return tansforms_.Mutable(index);
}
::apollo::common::Transform* Extrinsics::add_tansforms() {
  // @@protoc_insertion_point(field_add:apollo.common.Extrinsics.tansforms)
  return tansforms_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::common::Transform >*
Extrinsics::mutable_tansforms() {
  // @@protoc_insertion_point(field_mutable_list:apollo.common.Extrinsics.tansforms)
  return &tansforms_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::common::Transform >&
Extrinsics::tansforms() const {
  // @@protoc_insertion_point(field_list:apollo.common.Extrinsics.tansforms)
  return tansforms_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleID::kVinFieldNumber;
const int VehicleID::kPlateFieldNumber;
const int VehicleID::kOtherUniqueIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleID::VehicleID()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vehicle_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.VehicleID)
}
VehicleID::VehicleID(const VehicleID& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vin()) {
    vin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vin_);
  }
  plate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_plate()) {
    plate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plate_);
  }
  other_unique_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_other_unique_id()) {
    other_unique_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.other_unique_id_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.common.VehicleID)
}

void VehicleID::SharedCtor() {
  _cached_size_ = 0;
  vin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  other_unique_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

VehicleID::~VehicleID() {
  // @@protoc_insertion_point(destructor:apollo.common.VehicleID)
  SharedDtor();
}

void VehicleID::SharedDtor() {
  vin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  other_unique_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VehicleID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleID::descriptor() {
  protobuf_vehicle_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vehicle_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleID& VehicleID::default_instance() {
  protobuf_vehicle_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

VehicleID* VehicleID::New(::google::protobuf::Arena* arena) const {
  VehicleID* n = new VehicleID;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleID::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.VehicleID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!vin_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*vin_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!plate_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*plate_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!other_unique_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*other_unique_id_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VehicleID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.VehicleID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string vin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vin().data(), static_cast<int>(this->vin().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.common.VehicleID.vin");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string plate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->plate().data(), static_cast<int>(this->plate().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.common.VehicleID.plate");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string other_unique_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_other_unique_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->other_unique_id().data(), static_cast<int>(this->other_unique_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.common.VehicleID.other_unique_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.VehicleID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.VehicleID)
  return false;
#undef DO_
}

void VehicleID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.VehicleID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string vin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vin().data(), static_cast<int>(this->vin().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.common.VehicleID.vin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->vin(), output);
  }

  // optional string plate = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->plate().data(), static_cast<int>(this->plate().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.common.VehicleID.plate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->plate(), output);
  }

  // optional string other_unique_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->other_unique_id().data(), static_cast<int>(this->other_unique_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.common.VehicleID.other_unique_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->other_unique_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.VehicleID)
}

::google::protobuf::uint8* VehicleID::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.VehicleID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string vin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vin().data(), static_cast<int>(this->vin().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.common.VehicleID.vin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->vin(), target);
  }

  // optional string plate = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->plate().data(), static_cast<int>(this->plate().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.common.VehicleID.plate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->plate(), target);
  }

  // optional string other_unique_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->other_unique_id().data(), static_cast<int>(this->other_unique_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.common.VehicleID.other_unique_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->other_unique_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.VehicleID)
  return target;
}

size_t VehicleID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.VehicleID)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string vin = 1;
    if (has_vin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vin());
    }

    // optional string plate = 2;
    if (has_plate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->plate());
    }

    // optional string other_unique_id = 3;
    if (has_other_unique_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->other_unique_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.VehicleID)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleID* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleID>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.VehicleID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.VehicleID)
    MergeFrom(*source);
  }
}

void VehicleID::MergeFrom(const VehicleID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.VehicleID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_vin();
      vin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vin_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_plate();
      plate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plate_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_other_unique_id();
      other_unique_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.other_unique_id_);
    }
  }
}

void VehicleID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.VehicleID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleID::CopyFrom(const VehicleID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.VehicleID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleID::IsInitialized() const {
  return true;
}

void VehicleID::Swap(VehicleID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleID::InternalSwap(VehicleID* other) {
  using std::swap;
  vin_.Swap(&other->vin_);
  plate_.Swap(&other->plate_);
  other_unique_id_.Swap(&other->other_unique_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleID::GetMetadata() const {
  protobuf_vehicle_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vehicle_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleID

// optional string vin = 1;
bool VehicleID::has_vin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VehicleID::set_has_vin() {
  _has_bits_[0] |= 0x00000001u;
}
void VehicleID::clear_has_vin() {
  _has_bits_[0] &= ~0x00000001u;
}
void VehicleID::clear_vin() {
  vin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vin();
}
const ::std::string& VehicleID::vin() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleID.vin)
  return vin_.GetNoArena();
}
void VehicleID::set_vin(const ::std::string& value) {
  set_has_vin();
  vin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.common.VehicleID.vin)
}
#if LANG_CXX11
void VehicleID::set_vin(::std::string&& value) {
  set_has_vin();
  vin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.common.VehicleID.vin)
}
#endif
void VehicleID::set_vin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vin();
  vin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.common.VehicleID.vin)
}
void VehicleID::set_vin(const char* value, size_t size) {
  set_has_vin();
  vin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.common.VehicleID.vin)
}
::std::string* VehicleID::mutable_vin() {
  set_has_vin();
  // @@protoc_insertion_point(field_mutable:apollo.common.VehicleID.vin)
  return vin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VehicleID::release_vin() {
  // @@protoc_insertion_point(field_release:apollo.common.VehicleID.vin)
  clear_has_vin();
  return vin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VehicleID::set_allocated_vin(::std::string* vin) {
  if (vin != NULL) {
    set_has_vin();
  } else {
    clear_has_vin();
  }
  vin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vin);
  // @@protoc_insertion_point(field_set_allocated:apollo.common.VehicleID.vin)
}

// optional string plate = 2;
bool VehicleID::has_plate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VehicleID::set_has_plate() {
  _has_bits_[0] |= 0x00000002u;
}
void VehicleID::clear_has_plate() {
  _has_bits_[0] &= ~0x00000002u;
}
void VehicleID::clear_plate() {
  plate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_plate();
}
const ::std::string& VehicleID::plate() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleID.plate)
  return plate_.GetNoArena();
}
void VehicleID::set_plate(const ::std::string& value) {
  set_has_plate();
  plate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.common.VehicleID.plate)
}
#if LANG_CXX11
void VehicleID::set_plate(::std::string&& value) {
  set_has_plate();
  plate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.common.VehicleID.plate)
}
#endif
void VehicleID::set_plate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_plate();
  plate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.common.VehicleID.plate)
}
void VehicleID::set_plate(const char* value, size_t size) {
  set_has_plate();
  plate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.common.VehicleID.plate)
}
::std::string* VehicleID::mutable_plate() {
  set_has_plate();
  // @@protoc_insertion_point(field_mutable:apollo.common.VehicleID.plate)
  return plate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VehicleID::release_plate() {
  // @@protoc_insertion_point(field_release:apollo.common.VehicleID.plate)
  clear_has_plate();
  return plate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VehicleID::set_allocated_plate(::std::string* plate) {
  if (plate != NULL) {
    set_has_plate();
  } else {
    clear_has_plate();
  }
  plate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plate);
  // @@protoc_insertion_point(field_set_allocated:apollo.common.VehicleID.plate)
}

// optional string other_unique_id = 3;
bool VehicleID::has_other_unique_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VehicleID::set_has_other_unique_id() {
  _has_bits_[0] |= 0x00000004u;
}
void VehicleID::clear_has_other_unique_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void VehicleID::clear_other_unique_id() {
  other_unique_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_other_unique_id();
}
const ::std::string& VehicleID::other_unique_id() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleID.other_unique_id)
  return other_unique_id_.GetNoArena();
}
void VehicleID::set_other_unique_id(const ::std::string& value) {
  set_has_other_unique_id();
  other_unique_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.common.VehicleID.other_unique_id)
}
#if LANG_CXX11
void VehicleID::set_other_unique_id(::std::string&& value) {
  set_has_other_unique_id();
  other_unique_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.common.VehicleID.other_unique_id)
}
#endif
void VehicleID::set_other_unique_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_other_unique_id();
  other_unique_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.common.VehicleID.other_unique_id)
}
void VehicleID::set_other_unique_id(const char* value, size_t size) {
  set_has_other_unique_id();
  other_unique_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.common.VehicleID.other_unique_id)
}
::std::string* VehicleID::mutable_other_unique_id() {
  set_has_other_unique_id();
  // @@protoc_insertion_point(field_mutable:apollo.common.VehicleID.other_unique_id)
  return other_unique_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VehicleID::release_other_unique_id() {
  // @@protoc_insertion_point(field_release:apollo.common.VehicleID.other_unique_id)
  clear_has_other_unique_id();
  return other_unique_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VehicleID::set_allocated_other_unique_id(::std::string* other_unique_id) {
  if (other_unique_id != NULL) {
    set_has_other_unique_id();
  } else {
    clear_has_other_unique_id();
  }
  other_unique_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), other_unique_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.common.VehicleID.other_unique_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LatencyParam::kDeadTimeFieldNumber;
const int LatencyParam::kRiseTimeFieldNumber;
const int LatencyParam::kPeakTimeFieldNumber;
const int LatencyParam::kSettlingTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LatencyParam::LatencyParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vehicle_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.LatencyParam)
}
LatencyParam::LatencyParam(const LatencyParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dead_time_, &from.dead_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&settling_time_) -
    reinterpret_cast<char*>(&dead_time_)) + sizeof(settling_time_));
  // @@protoc_insertion_point(copy_constructor:apollo.common.LatencyParam)
}

void LatencyParam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&dead_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&settling_time_) -
      reinterpret_cast<char*>(&dead_time_)) + sizeof(settling_time_));
}

LatencyParam::~LatencyParam() {
  // @@protoc_insertion_point(destructor:apollo.common.LatencyParam)
  SharedDtor();
}

void LatencyParam::SharedDtor() {
}

void LatencyParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LatencyParam::descriptor() {
  protobuf_vehicle_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vehicle_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LatencyParam& LatencyParam::default_instance() {
  protobuf_vehicle_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

LatencyParam* LatencyParam::New(::google::protobuf::Arena* arena) const {
  LatencyParam* n = new LatencyParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LatencyParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.LatencyParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&dead_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&settling_time_) -
        reinterpret_cast<char*>(&dead_time_)) + sizeof(settling_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LatencyParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.LatencyParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double dead_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_dead_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dead_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double rise_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_rise_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rise_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double peak_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_peak_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &peak_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double settling_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_settling_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &settling_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.LatencyParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.LatencyParam)
  return false;
#undef DO_
}

void LatencyParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.LatencyParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double dead_time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->dead_time(), output);
  }

  // optional double rise_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->rise_time(), output);
  }

  // optional double peak_time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->peak_time(), output);
  }

  // optional double settling_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->settling_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.LatencyParam)
}

::google::protobuf::uint8* LatencyParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.LatencyParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double dead_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->dead_time(), target);
  }

  // optional double rise_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->rise_time(), target);
  }

  // optional double peak_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->peak_time(), target);
  }

  // optional double settling_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->settling_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.LatencyParam)
  return target;
}

size_t LatencyParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.LatencyParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional double dead_time = 1;
    if (has_dead_time()) {
      total_size += 1 + 8;
    }

    // optional double rise_time = 2;
    if (has_rise_time()) {
      total_size += 1 + 8;
    }

    // optional double peak_time = 3;
    if (has_peak_time()) {
      total_size += 1 + 8;
    }

    // optional double settling_time = 4;
    if (has_settling_time()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LatencyParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.LatencyParam)
  GOOGLE_DCHECK_NE(&from, this);
  const LatencyParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LatencyParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.LatencyParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.LatencyParam)
    MergeFrom(*source);
  }
}

void LatencyParam::MergeFrom(const LatencyParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.LatencyParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      dead_time_ = from.dead_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      rise_time_ = from.rise_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      peak_time_ = from.peak_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      settling_time_ = from.settling_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LatencyParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.LatencyParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatencyParam::CopyFrom(const LatencyParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.LatencyParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatencyParam::IsInitialized() const {
  return true;
}

void LatencyParam::Swap(LatencyParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LatencyParam::InternalSwap(LatencyParam* other) {
  using std::swap;
  swap(dead_time_, other->dead_time_);
  swap(rise_time_, other->rise_time_);
  swap(peak_time_, other->peak_time_);
  swap(settling_time_, other->settling_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LatencyParam::GetMetadata() const {
  protobuf_vehicle_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vehicle_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LatencyParam

// optional double dead_time = 1;
bool LatencyParam::has_dead_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LatencyParam::set_has_dead_time() {
  _has_bits_[0] |= 0x00000001u;
}
void LatencyParam::clear_has_dead_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void LatencyParam::clear_dead_time() {
  dead_time_ = 0;
  clear_has_dead_time();
}
double LatencyParam::dead_time() const {
  // @@protoc_insertion_point(field_get:apollo.common.LatencyParam.dead_time)
  return dead_time_;
}
void LatencyParam::set_dead_time(double value) {
  set_has_dead_time();
  dead_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.LatencyParam.dead_time)
}

// optional double rise_time = 2;
bool LatencyParam::has_rise_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LatencyParam::set_has_rise_time() {
  _has_bits_[0] |= 0x00000002u;
}
void LatencyParam::clear_has_rise_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void LatencyParam::clear_rise_time() {
  rise_time_ = 0;
  clear_has_rise_time();
}
double LatencyParam::rise_time() const {
  // @@protoc_insertion_point(field_get:apollo.common.LatencyParam.rise_time)
  return rise_time_;
}
void LatencyParam::set_rise_time(double value) {
  set_has_rise_time();
  rise_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.LatencyParam.rise_time)
}

// optional double peak_time = 3;
bool LatencyParam::has_peak_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LatencyParam::set_has_peak_time() {
  _has_bits_[0] |= 0x00000004u;
}
void LatencyParam::clear_has_peak_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void LatencyParam::clear_peak_time() {
  peak_time_ = 0;
  clear_has_peak_time();
}
double LatencyParam::peak_time() const {
  // @@protoc_insertion_point(field_get:apollo.common.LatencyParam.peak_time)
  return peak_time_;
}
void LatencyParam::set_peak_time(double value) {
  set_has_peak_time();
  peak_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.LatencyParam.peak_time)
}

// optional double settling_time = 4;
bool LatencyParam::has_settling_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LatencyParam::set_has_settling_time() {
  _has_bits_[0] |= 0x00000008u;
}
void LatencyParam::clear_has_settling_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void LatencyParam::clear_settling_time() {
  settling_time_ = 0;
  clear_has_settling_time();
}
double LatencyParam::settling_time() const {
  // @@protoc_insertion_point(field_get:apollo.common.LatencyParam.settling_time)
  return settling_time_;
}
void LatencyParam::set_settling_time(double value) {
  set_has_settling_time();
  settling_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.LatencyParam.settling_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleParam::kBrandFieldNumber;
const int VehicleParam::kVehicleIdFieldNumber;
const int VehicleParam::kFrontEdgeToCenterFieldNumber;
const int VehicleParam::kBackEdgeToCenterFieldNumber;
const int VehicleParam::kLeftEdgeToCenterFieldNumber;
const int VehicleParam::kRightEdgeToCenterFieldNumber;
const int VehicleParam::kLengthFieldNumber;
const int VehicleParam::kWidthFieldNumber;
const int VehicleParam::kHeightFieldNumber;
const int VehicleParam::kMinTurnRadiusFieldNumber;
const int VehicleParam::kMaxAccelerationFieldNumber;
const int VehicleParam::kMaxDecelerationFieldNumber;
const int VehicleParam::kMaxSteerAngleFieldNumber;
const int VehicleParam::kMaxSteerAngleRateFieldNumber;
const int VehicleParam::kMinSteerAngleRateFieldNumber;
const int VehicleParam::kSteerRatioFieldNumber;
const int VehicleParam::kWheelBaseFieldNumber;
const int VehicleParam::kWheelRollingRadiusFieldNumber;
const int VehicleParam::kMaxAbsSpeedWhenStoppedFieldNumber;
const int VehicleParam::kBrakeDeadzoneFieldNumber;
const int VehicleParam::kThrottleDeadzoneFieldNumber;
const int VehicleParam::kSteeringLatencyParamFieldNumber;
const int VehicleParam::kThrottleLatencyParamFieldNumber;
const int VehicleParam::kBrakeLatencyParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleParam::VehicleParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vehicle_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.VehicleParam)
}
VehicleParam::VehicleParam(const VehicleParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_vehicle_id()) {
    vehicle_id_ = new ::apollo::common::VehicleID(*from.vehicle_id_);
  } else {
    vehicle_id_ = NULL;
  }
  if (from.has_steering_latency_param()) {
    steering_latency_param_ = new ::apollo::common::LatencyParam(*from.steering_latency_param_);
  } else {
    steering_latency_param_ = NULL;
  }
  if (from.has_throttle_latency_param()) {
    throttle_latency_param_ = new ::apollo::common::LatencyParam(*from.throttle_latency_param_);
  } else {
    throttle_latency_param_ = NULL;
  }
  if (from.has_brake_latency_param()) {
    brake_latency_param_ = new ::apollo::common::LatencyParam(*from.brake_latency_param_);
  } else {
    brake_latency_param_ = NULL;
  }
  ::memcpy(&brand_, &from.brand_,
    static_cast<size_t>(reinterpret_cast<char*>(&throttle_deadzone_) -
    reinterpret_cast<char*>(&brand_)) + sizeof(throttle_deadzone_));
  // @@protoc_insertion_point(copy_constructor:apollo.common.VehicleParam)
}

void VehicleParam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&vehicle_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brand_) -
      reinterpret_cast<char*>(&vehicle_id_)) + sizeof(brand_));
  max_abs_speed_when_stopped_ = static_cast<float>(::google::protobuf::internal::NaN());
  front_edge_to_center_ = ::google::protobuf::internal::NaN();
  back_edge_to_center_ = ::google::protobuf::internal::NaN();
  left_edge_to_center_ = ::google::protobuf::internal::NaN();
  right_edge_to_center_ = ::google::protobuf::internal::NaN();
  length_ = ::google::protobuf::internal::NaN();
  width_ = ::google::protobuf::internal::NaN();
  height_ = ::google::protobuf::internal::NaN();
  min_turn_radius_ = ::google::protobuf::internal::NaN();
  max_acceleration_ = ::google::protobuf::internal::NaN();
  max_deceleration_ = ::google::protobuf::internal::NaN();
  max_steer_angle_ = ::google::protobuf::internal::NaN();
  max_steer_angle_rate_ = ::google::protobuf::internal::NaN();
  min_steer_angle_rate_ = ::google::protobuf::internal::NaN();
  steer_ratio_ = ::google::protobuf::internal::NaN();
  wheel_base_ = ::google::protobuf::internal::NaN();
  wheel_rolling_radius_ = ::google::protobuf::internal::NaN();
  brake_deadzone_ = ::google::protobuf::internal::NaN();
  throttle_deadzone_ = ::google::protobuf::internal::NaN();
}

VehicleParam::~VehicleParam() {
  // @@protoc_insertion_point(destructor:apollo.common.VehicleParam)
  SharedDtor();
}

void VehicleParam::SharedDtor() {
  if (this != internal_default_instance()) delete vehicle_id_;
  if (this != internal_default_instance()) delete steering_latency_param_;
  if (this != internal_default_instance()) delete throttle_latency_param_;
  if (this != internal_default_instance()) delete brake_latency_param_;
}

void VehicleParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleParam::descriptor() {
  protobuf_vehicle_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vehicle_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleParam& VehicleParam::default_instance() {
  protobuf_vehicle_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

VehicleParam* VehicleParam::New(::google::protobuf::Arena* arena) const {
  VehicleParam* n = new VehicleParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.VehicleParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(vehicle_id_ != NULL);
      vehicle_id_->::apollo::common::VehicleID::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(steering_latency_param_ != NULL);
      steering_latency_param_->::apollo::common::LatencyParam::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(throttle_latency_param_ != NULL);
      throttle_latency_param_->::apollo::common::LatencyParam::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(brake_latency_param_ != NULL);
      brake_latency_param_->::apollo::common::LatencyParam::Clear();
    }
  }
  if (cached_has_bits & 240u) {
    brand_ = 0;
    max_abs_speed_when_stopped_ = static_cast<float>(::google::protobuf::internal::NaN());
    front_edge_to_center_ = ::google::protobuf::internal::NaN();
    back_edge_to_center_ = ::google::protobuf::internal::NaN();
  }
  if (cached_has_bits & 65280u) {
    left_edge_to_center_ = ::google::protobuf::internal::NaN();
    right_edge_to_center_ = ::google::protobuf::internal::NaN();
    length_ = ::google::protobuf::internal::NaN();
    width_ = ::google::protobuf::internal::NaN();
    height_ = ::google::protobuf::internal::NaN();
    min_turn_radius_ = ::google::protobuf::internal::NaN();
    max_acceleration_ = ::google::protobuf::internal::NaN();
    max_deceleration_ = ::google::protobuf::internal::NaN();
  }
  if (cached_has_bits & 16711680u) {
    max_steer_angle_ = ::google::protobuf::internal::NaN();
    max_steer_angle_rate_ = ::google::protobuf::internal::NaN();
    min_steer_angle_rate_ = ::google::protobuf::internal::NaN();
    steer_ratio_ = ::google::protobuf::internal::NaN();
    wheel_base_ = ::google::protobuf::internal::NaN();
    wheel_rolling_radius_ = ::google::protobuf::internal::NaN();
    brake_deadzone_ = ::google::protobuf::internal::NaN();
    throttle_deadzone_ = ::google::protobuf::internal::NaN();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VehicleParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.VehicleParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.VehicleBrand brand = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::common::VehicleBrand_IsValid(value)) {
            set_brand(static_cast< ::apollo::common::VehicleBrand >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.VehicleID vehicle_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehicle_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double front_edge_to_center = 3 [default = nan];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_front_edge_to_center();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &front_edge_to_center_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double back_edge_to_center = 4 [default = nan];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_back_edge_to_center();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &back_edge_to_center_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double left_edge_to_center = 5 [default = nan];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_left_edge_to_center();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &left_edge_to_center_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double right_edge_to_center = 6 [default = nan];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_right_edge_to_center();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &right_edge_to_center_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double length = 7 [default = nan];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double width = 8 [default = nan];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double height = 9 [default = nan];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_turn_radius = 10 [default = nan];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_min_turn_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_turn_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_acceleration = 11 [default = nan];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_max_acceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_deceleration = 12 [default = nan];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_max_deceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_deceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_steer_angle = 13 [default = nan];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_max_steer_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_steer_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_steer_angle_rate = 14 [default = nan];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_max_steer_angle_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_steer_angle_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_steer_angle_rate = 15 [default = nan];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {
          set_has_min_steer_angle_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_steer_angle_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steer_ratio = 16 [default = nan];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {
          set_has_steer_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double wheel_base = 17 [default = nan];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {
          set_has_wheel_base();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_base_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double wheel_rolling_radius = 18 [default = nan];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {
          set_has_wheel_rolling_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_rolling_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_abs_speed_when_stopped = 19 [default = nan];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u /* 157 & 0xFF */)) {
          set_has_max_abs_speed_when_stopped();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_abs_speed_when_stopped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double brake_deadzone = 20 [default = nan];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u /* 161 & 0xFF */)) {
          set_has_brake_deadzone();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_deadzone_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double throttle_deadzone = 21 [default = nan];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {
          set_has_throttle_deadzone();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throttle_deadzone_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.LatencyParam steering_latency_param = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_steering_latency_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.LatencyParam throttle_latency_param = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_throttle_latency_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.LatencyParam brake_latency_param = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_brake_latency_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.VehicleParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.VehicleParam)
  return false;
#undef DO_
}

void VehicleParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.VehicleParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.VehicleBrand brand = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->brand(), output);
  }

  // optional .apollo.common.VehicleID vehicle_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->vehicle_id_, output);
  }

  // optional double front_edge_to_center = 3 [default = nan];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->front_edge_to_center(), output);
  }

  // optional double back_edge_to_center = 4 [default = nan];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->back_edge_to_center(), output);
  }

  // optional double left_edge_to_center = 5 [default = nan];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->left_edge_to_center(), output);
  }

  // optional double right_edge_to_center = 6 [default = nan];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->right_edge_to_center(), output);
  }

  // optional double length = 7 [default = nan];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->length(), output);
  }

  // optional double width = 8 [default = nan];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->width(), output);
  }

  // optional double height = 9 [default = nan];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->height(), output);
  }

  // optional double min_turn_radius = 10 [default = nan];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->min_turn_radius(), output);
  }

  // optional double max_acceleration = 11 [default = nan];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->max_acceleration(), output);
  }

  // optional double max_deceleration = 12 [default = nan];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->max_deceleration(), output);
  }

  // optional double max_steer_angle = 13 [default = nan];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->max_steer_angle(), output);
  }

  // optional double max_steer_angle_rate = 14 [default = nan];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->max_steer_angle_rate(), output);
  }

  // optional double min_steer_angle_rate = 15 [default = nan];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->min_steer_angle_rate(), output);
  }

  // optional double steer_ratio = 16 [default = nan];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->steer_ratio(), output);
  }

  // optional double wheel_base = 17 [default = nan];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->wheel_base(), output);
  }

  // optional double wheel_rolling_radius = 18 [default = nan];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->wheel_rolling_radius(), output);
  }

  // optional float max_abs_speed_when_stopped = 19 [default = nan];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->max_abs_speed_when_stopped(), output);
  }

  // optional double brake_deadzone = 20 [default = nan];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->brake_deadzone(), output);
  }

  // optional double throttle_deadzone = 21 [default = nan];
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->throttle_deadzone(), output);
  }

  // optional .apollo.common.LatencyParam steering_latency_param = 22;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->steering_latency_param_, output);
  }

  // optional .apollo.common.LatencyParam throttle_latency_param = 23;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->throttle_latency_param_, output);
  }

  // optional .apollo.common.LatencyParam brake_latency_param = 24;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *this->brake_latency_param_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.VehicleParam)
}

::google::protobuf::uint8* VehicleParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.VehicleParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.VehicleBrand brand = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->brand(), target);
  }

  // optional .apollo.common.VehicleID vehicle_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->vehicle_id_, deterministic, target);
  }

  // optional double front_edge_to_center = 3 [default = nan];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->front_edge_to_center(), target);
  }

  // optional double back_edge_to_center = 4 [default = nan];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->back_edge_to_center(), target);
  }

  // optional double left_edge_to_center = 5 [default = nan];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->left_edge_to_center(), target);
  }

  // optional double right_edge_to_center = 6 [default = nan];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->right_edge_to_center(), target);
  }

  // optional double length = 7 [default = nan];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->length(), target);
  }

  // optional double width = 8 [default = nan];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->width(), target);
  }

  // optional double height = 9 [default = nan];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->height(), target);
  }

  // optional double min_turn_radius = 10 [default = nan];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->min_turn_radius(), target);
  }

  // optional double max_acceleration = 11 [default = nan];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->max_acceleration(), target);
  }

  // optional double max_deceleration = 12 [default = nan];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->max_deceleration(), target);
  }

  // optional double max_steer_angle = 13 [default = nan];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->max_steer_angle(), target);
  }

  // optional double max_steer_angle_rate = 14 [default = nan];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->max_steer_angle_rate(), target);
  }

  // optional double min_steer_angle_rate = 15 [default = nan];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->min_steer_angle_rate(), target);
  }

  // optional double steer_ratio = 16 [default = nan];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->steer_ratio(), target);
  }

  // optional double wheel_base = 17 [default = nan];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->wheel_base(), target);
  }

  // optional double wheel_rolling_radius = 18 [default = nan];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->wheel_rolling_radius(), target);
  }

  // optional float max_abs_speed_when_stopped = 19 [default = nan];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->max_abs_speed_when_stopped(), target);
  }

  // optional double brake_deadzone = 20 [default = nan];
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->brake_deadzone(), target);
  }

  // optional double throttle_deadzone = 21 [default = nan];
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->throttle_deadzone(), target);
  }

  // optional .apollo.common.LatencyParam steering_latency_param = 22;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *this->steering_latency_param_, deterministic, target);
  }

  // optional .apollo.common.LatencyParam throttle_latency_param = 23;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, *this->throttle_latency_param_, deterministic, target);
  }

  // optional .apollo.common.LatencyParam brake_latency_param = 24;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, *this->brake_latency_param_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.VehicleParam)
  return target;
}

size_t VehicleParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.VehicleParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.common.VehicleID vehicle_id = 2;
    if (has_vehicle_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vehicle_id_);
    }

    // optional .apollo.common.LatencyParam steering_latency_param = 22;
    if (has_steering_latency_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->steering_latency_param_);
    }

    // optional .apollo.common.LatencyParam throttle_latency_param = 23;
    if (has_throttle_latency_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->throttle_latency_param_);
    }

    // optional .apollo.common.LatencyParam brake_latency_param = 24;
    if (has_brake_latency_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->brake_latency_param_);
    }

    // optional .apollo.common.VehicleBrand brand = 1;
    if (has_brand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->brand());
    }

    // optional float max_abs_speed_when_stopped = 19 [default = nan];
    if (has_max_abs_speed_when_stopped()) {
      total_size += 2 + 4;
    }

    // optional double front_edge_to_center = 3 [default = nan];
    if (has_front_edge_to_center()) {
      total_size += 1 + 8;
    }

    // optional double back_edge_to_center = 4 [default = nan];
    if (has_back_edge_to_center()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double left_edge_to_center = 5 [default = nan];
    if (has_left_edge_to_center()) {
      total_size += 1 + 8;
    }

    // optional double right_edge_to_center = 6 [default = nan];
    if (has_right_edge_to_center()) {
      total_size += 1 + 8;
    }

    // optional double length = 7 [default = nan];
    if (has_length()) {
      total_size += 1 + 8;
    }

    // optional double width = 8 [default = nan];
    if (has_width()) {
      total_size += 1 + 8;
    }

    // optional double height = 9 [default = nan];
    if (has_height()) {
      total_size += 1 + 8;
    }

    // optional double min_turn_radius = 10 [default = nan];
    if (has_min_turn_radius()) {
      total_size += 1 + 8;
    }

    // optional double max_acceleration = 11 [default = nan];
    if (has_max_acceleration()) {
      total_size += 1 + 8;
    }

    // optional double max_deceleration = 12 [default = nan];
    if (has_max_deceleration()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional double max_steer_angle = 13 [default = nan];
    if (has_max_steer_angle()) {
      total_size += 1 + 8;
    }

    // optional double max_steer_angle_rate = 14 [default = nan];
    if (has_max_steer_angle_rate()) {
      total_size += 1 + 8;
    }

    // optional double min_steer_angle_rate = 15 [default = nan];
    if (has_min_steer_angle_rate()) {
      total_size += 1 + 8;
    }

    // optional double steer_ratio = 16 [default = nan];
    if (has_steer_ratio()) {
      total_size += 2 + 8;
    }

    // optional double wheel_base = 17 [default = nan];
    if (has_wheel_base()) {
      total_size += 2 + 8;
    }

    // optional double wheel_rolling_radius = 18 [default = nan];
    if (has_wheel_rolling_radius()) {
      total_size += 2 + 8;
    }

    // optional double brake_deadzone = 20 [default = nan];
    if (has_brake_deadzone()) {
      total_size += 2 + 8;
    }

    // optional double throttle_deadzone = 21 [default = nan];
    if (has_throttle_deadzone()) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.VehicleParam)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.VehicleParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.VehicleParam)
    MergeFrom(*source);
  }
}

void VehicleParam::MergeFrom(const VehicleParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.VehicleParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_vehicle_id()->::apollo::common::VehicleID::MergeFrom(from.vehicle_id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_steering_latency_param()->::apollo::common::LatencyParam::MergeFrom(from.steering_latency_param());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_throttle_latency_param()->::apollo::common::LatencyParam::MergeFrom(from.throttle_latency_param());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_brake_latency_param()->::apollo::common::LatencyParam::MergeFrom(from.brake_latency_param());
    }
    if (cached_has_bits & 0x00000010u) {
      brand_ = from.brand_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_abs_speed_when_stopped_ = from.max_abs_speed_when_stopped_;
    }
    if (cached_has_bits & 0x00000040u) {
      front_edge_to_center_ = from.front_edge_to_center_;
    }
    if (cached_has_bits & 0x00000080u) {
      back_edge_to_center_ = from.back_edge_to_center_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      left_edge_to_center_ = from.left_edge_to_center_;
    }
    if (cached_has_bits & 0x00000200u) {
      right_edge_to_center_ = from.right_edge_to_center_;
    }
    if (cached_has_bits & 0x00000400u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000800u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00001000u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00002000u) {
      min_turn_radius_ = from.min_turn_radius_;
    }
    if (cached_has_bits & 0x00004000u) {
      max_acceleration_ = from.max_acceleration_;
    }
    if (cached_has_bits & 0x00008000u) {
      max_deceleration_ = from.max_deceleration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      max_steer_angle_ = from.max_steer_angle_;
    }
    if (cached_has_bits & 0x00020000u) {
      max_steer_angle_rate_ = from.max_steer_angle_rate_;
    }
    if (cached_has_bits & 0x00040000u) {
      min_steer_angle_rate_ = from.min_steer_angle_rate_;
    }
    if (cached_has_bits & 0x00080000u) {
      steer_ratio_ = from.steer_ratio_;
    }
    if (cached_has_bits & 0x00100000u) {
      wheel_base_ = from.wheel_base_;
    }
    if (cached_has_bits & 0x00200000u) {
      wheel_rolling_radius_ = from.wheel_rolling_radius_;
    }
    if (cached_has_bits & 0x00400000u) {
      brake_deadzone_ = from.brake_deadzone_;
    }
    if (cached_has_bits & 0x00800000u) {
      throttle_deadzone_ = from.throttle_deadzone_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VehicleParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.VehicleParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleParam::CopyFrom(const VehicleParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.VehicleParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleParam::IsInitialized() const {
  return true;
}

void VehicleParam::Swap(VehicleParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleParam::InternalSwap(VehicleParam* other) {
  using std::swap;
  swap(vehicle_id_, other->vehicle_id_);
  swap(steering_latency_param_, other->steering_latency_param_);
  swap(throttle_latency_param_, other->throttle_latency_param_);
  swap(brake_latency_param_, other->brake_latency_param_);
  swap(brand_, other->brand_);
  swap(max_abs_speed_when_stopped_, other->max_abs_speed_when_stopped_);
  swap(front_edge_to_center_, other->front_edge_to_center_);
  swap(back_edge_to_center_, other->back_edge_to_center_);
  swap(left_edge_to_center_, other->left_edge_to_center_);
  swap(right_edge_to_center_, other->right_edge_to_center_);
  swap(length_, other->length_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(min_turn_radius_, other->min_turn_radius_);
  swap(max_acceleration_, other->max_acceleration_);
  swap(max_deceleration_, other->max_deceleration_);
  swap(max_steer_angle_, other->max_steer_angle_);
  swap(max_steer_angle_rate_, other->max_steer_angle_rate_);
  swap(min_steer_angle_rate_, other->min_steer_angle_rate_);
  swap(steer_ratio_, other->steer_ratio_);
  swap(wheel_base_, other->wheel_base_);
  swap(wheel_rolling_radius_, other->wheel_rolling_radius_);
  swap(brake_deadzone_, other->brake_deadzone_);
  swap(throttle_deadzone_, other->throttle_deadzone_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleParam::GetMetadata() const {
  protobuf_vehicle_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vehicle_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleParam

// optional .apollo.common.VehicleBrand brand = 1;
bool VehicleParam::has_brand() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VehicleParam::set_has_brand() {
  _has_bits_[0] |= 0x00000010u;
}
void VehicleParam::clear_has_brand() {
  _has_bits_[0] &= ~0x00000010u;
}
void VehicleParam::clear_brand() {
  brand_ = 0;
  clear_has_brand();
}
::apollo::common::VehicleBrand VehicleParam::brand() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.brand)
  return static_cast< ::apollo::common::VehicleBrand >(brand_);
}
void VehicleParam::set_brand(::apollo::common::VehicleBrand value) {
  assert(::apollo::common::VehicleBrand_IsValid(value));
  set_has_brand();
  brand_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.brand)
}

// optional .apollo.common.VehicleID vehicle_id = 2;
bool VehicleParam::has_vehicle_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VehicleParam::set_has_vehicle_id() {
  _has_bits_[0] |= 0x00000001u;
}
void VehicleParam::clear_has_vehicle_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void VehicleParam::clear_vehicle_id() {
  if (vehicle_id_ != NULL) vehicle_id_->::apollo::common::VehicleID::Clear();
  clear_has_vehicle_id();
}
const ::apollo::common::VehicleID& VehicleParam::vehicle_id() const {
  const ::apollo::common::VehicleID* p = vehicle_id_;
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.vehicle_id)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::VehicleID*>(
      &::apollo::common::_VehicleID_default_instance_);
}
::apollo::common::VehicleID* VehicleParam::mutable_vehicle_id() {
  set_has_vehicle_id();
  if (vehicle_id_ == NULL) {
    vehicle_id_ = new ::apollo::common::VehicleID;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.VehicleParam.vehicle_id)
  return vehicle_id_;
}
::apollo::common::VehicleID* VehicleParam::release_vehicle_id() {
  // @@protoc_insertion_point(field_release:apollo.common.VehicleParam.vehicle_id)
  clear_has_vehicle_id();
  ::apollo::common::VehicleID* temp = vehicle_id_;
  vehicle_id_ = NULL;
  return temp;
}
void VehicleParam::set_allocated_vehicle_id(::apollo::common::VehicleID* vehicle_id) {
  delete vehicle_id_;
  vehicle_id_ = vehicle_id;
  if (vehicle_id) {
    set_has_vehicle_id();
  } else {
    clear_has_vehicle_id();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.common.VehicleParam.vehicle_id)
}

// optional double front_edge_to_center = 3 [default = nan];
bool VehicleParam::has_front_edge_to_center() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VehicleParam::set_has_front_edge_to_center() {
  _has_bits_[0] |= 0x00000040u;
}
void VehicleParam::clear_has_front_edge_to_center() {
  _has_bits_[0] &= ~0x00000040u;
}
void VehicleParam::clear_front_edge_to_center() {
  front_edge_to_center_ = ::google::protobuf::internal::NaN();
  clear_has_front_edge_to_center();
}
double VehicleParam::front_edge_to_center() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.front_edge_to_center)
  return front_edge_to_center_;
}
void VehicleParam::set_front_edge_to_center(double value) {
  set_has_front_edge_to_center();
  front_edge_to_center_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.front_edge_to_center)
}

// optional double back_edge_to_center = 4 [default = nan];
bool VehicleParam::has_back_edge_to_center() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VehicleParam::set_has_back_edge_to_center() {
  _has_bits_[0] |= 0x00000080u;
}
void VehicleParam::clear_has_back_edge_to_center() {
  _has_bits_[0] &= ~0x00000080u;
}
void VehicleParam::clear_back_edge_to_center() {
  back_edge_to_center_ = ::google::protobuf::internal::NaN();
  clear_has_back_edge_to_center();
}
double VehicleParam::back_edge_to_center() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.back_edge_to_center)
  return back_edge_to_center_;
}
void VehicleParam::set_back_edge_to_center(double value) {
  set_has_back_edge_to_center();
  back_edge_to_center_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.back_edge_to_center)
}

// optional double left_edge_to_center = 5 [default = nan];
bool VehicleParam::has_left_edge_to_center() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VehicleParam::set_has_left_edge_to_center() {
  _has_bits_[0] |= 0x00000100u;
}
void VehicleParam::clear_has_left_edge_to_center() {
  _has_bits_[0] &= ~0x00000100u;
}
void VehicleParam::clear_left_edge_to_center() {
  left_edge_to_center_ = ::google::protobuf::internal::NaN();
  clear_has_left_edge_to_center();
}
double VehicleParam::left_edge_to_center() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.left_edge_to_center)
  return left_edge_to_center_;
}
void VehicleParam::set_left_edge_to_center(double value) {
  set_has_left_edge_to_center();
  left_edge_to_center_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.left_edge_to_center)
}

// optional double right_edge_to_center = 6 [default = nan];
bool VehicleParam::has_right_edge_to_center() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void VehicleParam::set_has_right_edge_to_center() {
  _has_bits_[0] |= 0x00000200u;
}
void VehicleParam::clear_has_right_edge_to_center() {
  _has_bits_[0] &= ~0x00000200u;
}
void VehicleParam::clear_right_edge_to_center() {
  right_edge_to_center_ = ::google::protobuf::internal::NaN();
  clear_has_right_edge_to_center();
}
double VehicleParam::right_edge_to_center() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.right_edge_to_center)
  return right_edge_to_center_;
}
void VehicleParam::set_right_edge_to_center(double value) {
  set_has_right_edge_to_center();
  right_edge_to_center_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.right_edge_to_center)
}

// optional double length = 7 [default = nan];
bool VehicleParam::has_length() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void VehicleParam::set_has_length() {
  _has_bits_[0] |= 0x00000400u;
}
void VehicleParam::clear_has_length() {
  _has_bits_[0] &= ~0x00000400u;
}
void VehicleParam::clear_length() {
  length_ = ::google::protobuf::internal::NaN();
  clear_has_length();
}
double VehicleParam::length() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.length)
  return length_;
}
void VehicleParam::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.length)
}

// optional double width = 8 [default = nan];
bool VehicleParam::has_width() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void VehicleParam::set_has_width() {
  _has_bits_[0] |= 0x00000800u;
}
void VehicleParam::clear_has_width() {
  _has_bits_[0] &= ~0x00000800u;
}
void VehicleParam::clear_width() {
  width_ = ::google::protobuf::internal::NaN();
  clear_has_width();
}
double VehicleParam::width() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.width)
  return width_;
}
void VehicleParam::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.width)
}

// optional double height = 9 [default = nan];
bool VehicleParam::has_height() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void VehicleParam::set_has_height() {
  _has_bits_[0] |= 0x00001000u;
}
void VehicleParam::clear_has_height() {
  _has_bits_[0] &= ~0x00001000u;
}
void VehicleParam::clear_height() {
  height_ = ::google::protobuf::internal::NaN();
  clear_has_height();
}
double VehicleParam::height() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.height)
  return height_;
}
void VehicleParam::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.height)
}

// optional double min_turn_radius = 10 [default = nan];
bool VehicleParam::has_min_turn_radius() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void VehicleParam::set_has_min_turn_radius() {
  _has_bits_[0] |= 0x00002000u;
}
void VehicleParam::clear_has_min_turn_radius() {
  _has_bits_[0] &= ~0x00002000u;
}
void VehicleParam::clear_min_turn_radius() {
  min_turn_radius_ = ::google::protobuf::internal::NaN();
  clear_has_min_turn_radius();
}
double VehicleParam::min_turn_radius() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.min_turn_radius)
  return min_turn_radius_;
}
void VehicleParam::set_min_turn_radius(double value) {
  set_has_min_turn_radius();
  min_turn_radius_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.min_turn_radius)
}

// optional double max_acceleration = 11 [default = nan];
bool VehicleParam::has_max_acceleration() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void VehicleParam::set_has_max_acceleration() {
  _has_bits_[0] |= 0x00004000u;
}
void VehicleParam::clear_has_max_acceleration() {
  _has_bits_[0] &= ~0x00004000u;
}
void VehicleParam::clear_max_acceleration() {
  max_acceleration_ = ::google::protobuf::internal::NaN();
  clear_has_max_acceleration();
}
double VehicleParam::max_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.max_acceleration)
  return max_acceleration_;
}
void VehicleParam::set_max_acceleration(double value) {
  set_has_max_acceleration();
  max_acceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.max_acceleration)
}

// optional double max_deceleration = 12 [default = nan];
bool VehicleParam::has_max_deceleration() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void VehicleParam::set_has_max_deceleration() {
  _has_bits_[0] |= 0x00008000u;
}
void VehicleParam::clear_has_max_deceleration() {
  _has_bits_[0] &= ~0x00008000u;
}
void VehicleParam::clear_max_deceleration() {
  max_deceleration_ = ::google::protobuf::internal::NaN();
  clear_has_max_deceleration();
}
double VehicleParam::max_deceleration() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.max_deceleration)
  return max_deceleration_;
}
void VehicleParam::set_max_deceleration(double value) {
  set_has_max_deceleration();
  max_deceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.max_deceleration)
}

// optional double max_steer_angle = 13 [default = nan];
bool VehicleParam::has_max_steer_angle() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void VehicleParam::set_has_max_steer_angle() {
  _has_bits_[0] |= 0x00010000u;
}
void VehicleParam::clear_has_max_steer_angle() {
  _has_bits_[0] &= ~0x00010000u;
}
void VehicleParam::clear_max_steer_angle() {
  max_steer_angle_ = ::google::protobuf::internal::NaN();
  clear_has_max_steer_angle();
}
double VehicleParam::max_steer_angle() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.max_steer_angle)
  return max_steer_angle_;
}
void VehicleParam::set_max_steer_angle(double value) {
  set_has_max_steer_angle();
  max_steer_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.max_steer_angle)
}

// optional double max_steer_angle_rate = 14 [default = nan];
bool VehicleParam::has_max_steer_angle_rate() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void VehicleParam::set_has_max_steer_angle_rate() {
  _has_bits_[0] |= 0x00020000u;
}
void VehicleParam::clear_has_max_steer_angle_rate() {
  _has_bits_[0] &= ~0x00020000u;
}
void VehicleParam::clear_max_steer_angle_rate() {
  max_steer_angle_rate_ = ::google::protobuf::internal::NaN();
  clear_has_max_steer_angle_rate();
}
double VehicleParam::max_steer_angle_rate() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.max_steer_angle_rate)
  return max_steer_angle_rate_;
}
void VehicleParam::set_max_steer_angle_rate(double value) {
  set_has_max_steer_angle_rate();
  max_steer_angle_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.max_steer_angle_rate)
}

// optional double min_steer_angle_rate = 15 [default = nan];
bool VehicleParam::has_min_steer_angle_rate() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void VehicleParam::set_has_min_steer_angle_rate() {
  _has_bits_[0] |= 0x00040000u;
}
void VehicleParam::clear_has_min_steer_angle_rate() {
  _has_bits_[0] &= ~0x00040000u;
}
void VehicleParam::clear_min_steer_angle_rate() {
  min_steer_angle_rate_ = ::google::protobuf::internal::NaN();
  clear_has_min_steer_angle_rate();
}
double VehicleParam::min_steer_angle_rate() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.min_steer_angle_rate)
  return min_steer_angle_rate_;
}
void VehicleParam::set_min_steer_angle_rate(double value) {
  set_has_min_steer_angle_rate();
  min_steer_angle_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.min_steer_angle_rate)
}

// optional double steer_ratio = 16 [default = nan];
bool VehicleParam::has_steer_ratio() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void VehicleParam::set_has_steer_ratio() {
  _has_bits_[0] |= 0x00080000u;
}
void VehicleParam::clear_has_steer_ratio() {
  _has_bits_[0] &= ~0x00080000u;
}
void VehicleParam::clear_steer_ratio() {
  steer_ratio_ = ::google::protobuf::internal::NaN();
  clear_has_steer_ratio();
}
double VehicleParam::steer_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.steer_ratio)
  return steer_ratio_;
}
void VehicleParam::set_steer_ratio(double value) {
  set_has_steer_ratio();
  steer_ratio_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.steer_ratio)
}

// optional double wheel_base = 17 [default = nan];
bool VehicleParam::has_wheel_base() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void VehicleParam::set_has_wheel_base() {
  _has_bits_[0] |= 0x00100000u;
}
void VehicleParam::clear_has_wheel_base() {
  _has_bits_[0] &= ~0x00100000u;
}
void VehicleParam::clear_wheel_base() {
  wheel_base_ = ::google::protobuf::internal::NaN();
  clear_has_wheel_base();
}
double VehicleParam::wheel_base() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.wheel_base)
  return wheel_base_;
}
void VehicleParam::set_wheel_base(double value) {
  set_has_wheel_base();
  wheel_base_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.wheel_base)
}

// optional double wheel_rolling_radius = 18 [default = nan];
bool VehicleParam::has_wheel_rolling_radius() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void VehicleParam::set_has_wheel_rolling_radius() {
  _has_bits_[0] |= 0x00200000u;
}
void VehicleParam::clear_has_wheel_rolling_radius() {
  _has_bits_[0] &= ~0x00200000u;
}
void VehicleParam::clear_wheel_rolling_radius() {
  wheel_rolling_radius_ = ::google::protobuf::internal::NaN();
  clear_has_wheel_rolling_radius();
}
double VehicleParam::wheel_rolling_radius() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.wheel_rolling_radius)
  return wheel_rolling_radius_;
}
void VehicleParam::set_wheel_rolling_radius(double value) {
  set_has_wheel_rolling_radius();
  wheel_rolling_radius_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.wheel_rolling_radius)
}

// optional float max_abs_speed_when_stopped = 19 [default = nan];
bool VehicleParam::has_max_abs_speed_when_stopped() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VehicleParam::set_has_max_abs_speed_when_stopped() {
  _has_bits_[0] |= 0x00000020u;
}
void VehicleParam::clear_has_max_abs_speed_when_stopped() {
  _has_bits_[0] &= ~0x00000020u;
}
void VehicleParam::clear_max_abs_speed_when_stopped() {
  max_abs_speed_when_stopped_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_max_abs_speed_when_stopped();
}
float VehicleParam::max_abs_speed_when_stopped() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.max_abs_speed_when_stopped)
  return max_abs_speed_when_stopped_;
}
void VehicleParam::set_max_abs_speed_when_stopped(float value) {
  set_has_max_abs_speed_when_stopped();
  max_abs_speed_when_stopped_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.max_abs_speed_when_stopped)
}

// optional double brake_deadzone = 20 [default = nan];
bool VehicleParam::has_brake_deadzone() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void VehicleParam::set_has_brake_deadzone() {
  _has_bits_[0] |= 0x00400000u;
}
void VehicleParam::clear_has_brake_deadzone() {
  _has_bits_[0] &= ~0x00400000u;
}
void VehicleParam::clear_brake_deadzone() {
  brake_deadzone_ = ::google::protobuf::internal::NaN();
  clear_has_brake_deadzone();
}
double VehicleParam::brake_deadzone() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.brake_deadzone)
  return brake_deadzone_;
}
void VehicleParam::set_brake_deadzone(double value) {
  set_has_brake_deadzone();
  brake_deadzone_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.brake_deadzone)
}

// optional double throttle_deadzone = 21 [default = nan];
bool VehicleParam::has_throttle_deadzone() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void VehicleParam::set_has_throttle_deadzone() {
  _has_bits_[0] |= 0x00800000u;
}
void VehicleParam::clear_has_throttle_deadzone() {
  _has_bits_[0] &= ~0x00800000u;
}
void VehicleParam::clear_throttle_deadzone() {
  throttle_deadzone_ = ::google::protobuf::internal::NaN();
  clear_has_throttle_deadzone();
}
double VehicleParam::throttle_deadzone() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.throttle_deadzone)
  return throttle_deadzone_;
}
void VehicleParam::set_throttle_deadzone(double value) {
  set_has_throttle_deadzone();
  throttle_deadzone_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.throttle_deadzone)
}

// optional .apollo.common.LatencyParam steering_latency_param = 22;
bool VehicleParam::has_steering_latency_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VehicleParam::set_has_steering_latency_param() {
  _has_bits_[0] |= 0x00000002u;
}
void VehicleParam::clear_has_steering_latency_param() {
  _has_bits_[0] &= ~0x00000002u;
}
void VehicleParam::clear_steering_latency_param() {
  if (steering_latency_param_ != NULL) steering_latency_param_->::apollo::common::LatencyParam::Clear();
  clear_has_steering_latency_param();
}
const ::apollo::common::LatencyParam& VehicleParam::steering_latency_param() const {
  const ::apollo::common::LatencyParam* p = steering_latency_param_;
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.steering_latency_param)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::LatencyParam*>(
      &::apollo::common::_LatencyParam_default_instance_);
}
::apollo::common::LatencyParam* VehicleParam::mutable_steering_latency_param() {
  set_has_steering_latency_param();
  if (steering_latency_param_ == NULL) {
    steering_latency_param_ = new ::apollo::common::LatencyParam;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.VehicleParam.steering_latency_param)
  return steering_latency_param_;
}
::apollo::common::LatencyParam* VehicleParam::release_steering_latency_param() {
  // @@protoc_insertion_point(field_release:apollo.common.VehicleParam.steering_latency_param)
  clear_has_steering_latency_param();
  ::apollo::common::LatencyParam* temp = steering_latency_param_;
  steering_latency_param_ = NULL;
  return temp;
}
void VehicleParam::set_allocated_steering_latency_param(::apollo::common::LatencyParam* steering_latency_param) {
  delete steering_latency_param_;
  steering_latency_param_ = steering_latency_param;
  if (steering_latency_param) {
    set_has_steering_latency_param();
  } else {
    clear_has_steering_latency_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.common.VehicleParam.steering_latency_param)
}

// optional .apollo.common.LatencyParam throttle_latency_param = 23;
bool VehicleParam::has_throttle_latency_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VehicleParam::set_has_throttle_latency_param() {
  _has_bits_[0] |= 0x00000004u;
}
void VehicleParam::clear_has_throttle_latency_param() {
  _has_bits_[0] &= ~0x00000004u;
}
void VehicleParam::clear_throttle_latency_param() {
  if (throttle_latency_param_ != NULL) throttle_latency_param_->::apollo::common::LatencyParam::Clear();
  clear_has_throttle_latency_param();
}
const ::apollo::common::LatencyParam& VehicleParam::throttle_latency_param() const {
  const ::apollo::common::LatencyParam* p = throttle_latency_param_;
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.throttle_latency_param)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::LatencyParam*>(
      &::apollo::common::_LatencyParam_default_instance_);
}
::apollo::common::LatencyParam* VehicleParam::mutable_throttle_latency_param() {
  set_has_throttle_latency_param();
  if (throttle_latency_param_ == NULL) {
    throttle_latency_param_ = new ::apollo::common::LatencyParam;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.VehicleParam.throttle_latency_param)
  return throttle_latency_param_;
}
::apollo::common::LatencyParam* VehicleParam::release_throttle_latency_param() {
  // @@protoc_insertion_point(field_release:apollo.common.VehicleParam.throttle_latency_param)
  clear_has_throttle_latency_param();
  ::apollo::common::LatencyParam* temp = throttle_latency_param_;
  throttle_latency_param_ = NULL;
  return temp;
}
void VehicleParam::set_allocated_throttle_latency_param(::apollo::common::LatencyParam* throttle_latency_param) {
  delete throttle_latency_param_;
  throttle_latency_param_ = throttle_latency_param;
  if (throttle_latency_param) {
    set_has_throttle_latency_param();
  } else {
    clear_has_throttle_latency_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.common.VehicleParam.throttle_latency_param)
}

// optional .apollo.common.LatencyParam brake_latency_param = 24;
bool VehicleParam::has_brake_latency_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VehicleParam::set_has_brake_latency_param() {
  _has_bits_[0] |= 0x00000008u;
}
void VehicleParam::clear_has_brake_latency_param() {
  _has_bits_[0] &= ~0x00000008u;
}
void VehicleParam::clear_brake_latency_param() {
  if (brake_latency_param_ != NULL) brake_latency_param_->::apollo::common::LatencyParam::Clear();
  clear_has_brake_latency_param();
}
const ::apollo::common::LatencyParam& VehicleParam::brake_latency_param() const {
  const ::apollo::common::LatencyParam* p = brake_latency_param_;
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.brake_latency_param)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::LatencyParam*>(
      &::apollo::common::_LatencyParam_default_instance_);
}
::apollo::common::LatencyParam* VehicleParam::mutable_brake_latency_param() {
  set_has_brake_latency_param();
  if (brake_latency_param_ == NULL) {
    brake_latency_param_ = new ::apollo::common::LatencyParam;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.VehicleParam.brake_latency_param)
  return brake_latency_param_;
}
::apollo::common::LatencyParam* VehicleParam::release_brake_latency_param() {
  // @@protoc_insertion_point(field_release:apollo.common.VehicleParam.brake_latency_param)
  clear_has_brake_latency_param();
  ::apollo::common::LatencyParam* temp = brake_latency_param_;
  brake_latency_param_ = NULL;
  return temp;
}
void VehicleParam::set_allocated_brake_latency_param(::apollo::common::LatencyParam* brake_latency_param) {
  delete brake_latency_param_;
  brake_latency_param_ = brake_latency_param;
  if (brake_latency_param) {
    set_has_brake_latency_param();
  } else {
    clear_has_brake_latency_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.common.VehicleParam.brake_latency_param)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleConfig::kHeaderFieldNumber;
const int VehicleConfig::kVehicleParamFieldNumber;
const int VehicleConfig::kExtrinsicsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleConfig::VehicleConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vehicle_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.VehicleConfig)
}
VehicleConfig::VehicleConfig(const VehicleConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_vehicle_param()) {
    vehicle_param_ = new ::apollo::common::VehicleParam(*from.vehicle_param_);
  } else {
    vehicle_param_ = NULL;
  }
  if (from.has_extrinsics()) {
    extrinsics_ = new ::apollo::common::Extrinsics(*from.extrinsics_);
  } else {
    extrinsics_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.common.VehicleConfig)
}

void VehicleConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extrinsics_) -
      reinterpret_cast<char*>(&header_)) + sizeof(extrinsics_));
}

VehicleConfig::~VehicleConfig() {
  // @@protoc_insertion_point(destructor:apollo.common.VehicleConfig)
  SharedDtor();
}

void VehicleConfig::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete vehicle_param_;
  if (this != internal_default_instance()) delete extrinsics_;
}

void VehicleConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleConfig::descriptor() {
  protobuf_vehicle_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vehicle_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleConfig& VehicleConfig::default_instance() {
  protobuf_vehicle_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

VehicleConfig* VehicleConfig::New(::google::protobuf::Arena* arena) const {
  VehicleConfig* n = new VehicleConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.VehicleConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::apollo::common::Header::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(vehicle_param_ != NULL);
      vehicle_param_->::apollo::common::VehicleParam::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(extrinsics_ != NULL);
      extrinsics_->::apollo::common::Extrinsics::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VehicleConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.VehicleConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.VehicleParam vehicle_param = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehicle_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Extrinsics extrinsics = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extrinsics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.VehicleConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.VehicleConfig)
  return false;
#undef DO_
}

void VehicleConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.VehicleConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .apollo.common.VehicleParam vehicle_param = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->vehicle_param_, output);
  }

  // optional .apollo.common.Extrinsics extrinsics = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->extrinsics_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.VehicleConfig)
}

::google::protobuf::uint8* VehicleConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.VehicleConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // optional .apollo.common.VehicleParam vehicle_param = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->vehicle_param_, deterministic, target);
  }

  // optional .apollo.common.Extrinsics extrinsics = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->extrinsics_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.VehicleConfig)
  return target;
}

size_t VehicleConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.VehicleConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .apollo.common.VehicleParam vehicle_param = 2;
    if (has_vehicle_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vehicle_param_);
    }

    // optional .apollo.common.Extrinsics extrinsics = 3;
    if (has_extrinsics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->extrinsics_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.VehicleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.VehicleConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.VehicleConfig)
    MergeFrom(*source);
  }
}

void VehicleConfig::MergeFrom(const VehicleConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.VehicleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_vehicle_param()->::apollo::common::VehicleParam::MergeFrom(from.vehicle_param());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_extrinsics()->::apollo::common::Extrinsics::MergeFrom(from.extrinsics());
    }
  }
}

void VehicleConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.VehicleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleConfig::CopyFrom(const VehicleConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.VehicleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleConfig::IsInitialized() const {
  return true;
}

void VehicleConfig::Swap(VehicleConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleConfig::InternalSwap(VehicleConfig* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(vehicle_param_, other->vehicle_param_);
  swap(extrinsics_, other->extrinsics_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleConfig::GetMetadata() const {
  protobuf_vehicle_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vehicle_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleConfig

// optional .apollo.common.Header header = 1;
bool VehicleConfig::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VehicleConfig::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void VehicleConfig::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void VehicleConfig::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
const ::apollo::common::Header& VehicleConfig::header() const {
  const ::apollo::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:apollo.common.VehicleConfig.header)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Header*>(
      &::apollo::common::_Header_default_instance_);
}
::apollo::common::Header* VehicleConfig::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.VehicleConfig.header)
  return header_;
}
::apollo::common::Header* VehicleConfig::release_header() {
  // @@protoc_insertion_point(field_release:apollo.common.VehicleConfig.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void VehicleConfig::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.common.VehicleConfig.header)
}

// optional .apollo.common.VehicleParam vehicle_param = 2;
bool VehicleConfig::has_vehicle_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VehicleConfig::set_has_vehicle_param() {
  _has_bits_[0] |= 0x00000002u;
}
void VehicleConfig::clear_has_vehicle_param() {
  _has_bits_[0] &= ~0x00000002u;
}
void VehicleConfig::clear_vehicle_param() {
  if (vehicle_param_ != NULL) vehicle_param_->::apollo::common::VehicleParam::Clear();
  clear_has_vehicle_param();
}
const ::apollo::common::VehicleParam& VehicleConfig::vehicle_param() const {
  const ::apollo::common::VehicleParam* p = vehicle_param_;
  // @@protoc_insertion_point(field_get:apollo.common.VehicleConfig.vehicle_param)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::VehicleParam*>(
      &::apollo::common::_VehicleParam_default_instance_);
}
::apollo::common::VehicleParam* VehicleConfig::mutable_vehicle_param() {
  set_has_vehicle_param();
  if (vehicle_param_ == NULL) {
    vehicle_param_ = new ::apollo::common::VehicleParam;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.VehicleConfig.vehicle_param)
  return vehicle_param_;
}
::apollo::common::VehicleParam* VehicleConfig::release_vehicle_param() {
  // @@protoc_insertion_point(field_release:apollo.common.VehicleConfig.vehicle_param)
  clear_has_vehicle_param();
  ::apollo::common::VehicleParam* temp = vehicle_param_;
  vehicle_param_ = NULL;
  return temp;
}
void VehicleConfig::set_allocated_vehicle_param(::apollo::common::VehicleParam* vehicle_param) {
  delete vehicle_param_;
  vehicle_param_ = vehicle_param;
  if (vehicle_param) {
    set_has_vehicle_param();
  } else {
    clear_has_vehicle_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.common.VehicleConfig.vehicle_param)
}

// optional .apollo.common.Extrinsics extrinsics = 3;
bool VehicleConfig::has_extrinsics() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VehicleConfig::set_has_extrinsics() {
  _has_bits_[0] |= 0x00000004u;
}
void VehicleConfig::clear_has_extrinsics() {
  _has_bits_[0] &= ~0x00000004u;
}
void VehicleConfig::clear_extrinsics() {
  if (extrinsics_ != NULL) extrinsics_->::apollo::common::Extrinsics::Clear();
  clear_has_extrinsics();
}
const ::apollo::common::Extrinsics& VehicleConfig::extrinsics() const {
  const ::apollo::common::Extrinsics* p = extrinsics_;
  // @@protoc_insertion_point(field_get:apollo.common.VehicleConfig.extrinsics)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Extrinsics*>(
      &::apollo::common::_Extrinsics_default_instance_);
}
::apollo::common::Extrinsics* VehicleConfig::mutable_extrinsics() {
  set_has_extrinsics();
  if (extrinsics_ == NULL) {
    extrinsics_ = new ::apollo::common::Extrinsics;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.VehicleConfig.extrinsics)
  return extrinsics_;
}
::apollo::common::Extrinsics* VehicleConfig::release_extrinsics() {
  // @@protoc_insertion_point(field_release:apollo.common.VehicleConfig.extrinsics)
  clear_has_extrinsics();
  ::apollo::common::Extrinsics* temp = extrinsics_;
  extrinsics_ = NULL;
  return temp;
}
void VehicleConfig::set_allocated_extrinsics(::apollo::common::Extrinsics* extrinsics) {
  delete extrinsics_;
  extrinsics_ = extrinsics;
  if (extrinsics) {
    set_has_extrinsics();
  } else {
    clear_has_extrinsics();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.common.VehicleConfig.extrinsics)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
